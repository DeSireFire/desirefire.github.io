<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>疑难杂症：incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line at...</title>
      <link href="article/637099416/"/>
      <url>article/637099416/</url>
      
        <content type="html"><![CDATA[<p>疑难杂症：incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line at…</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: webStrom 2021.3.1 x64  </span><br><span class="line">语言: nodeJs v14.15.4</span><br><span class="line">框架: hexo &quot;5.3.0&quot;</span><br><span class="line">theme: [Butterfly  &quot;3.6.1&quot;]</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>写完博客，使用命令</p><blockquote><p>hexo clean&amp;&amp;hexo g&amp;&amp;hexo s</p></blockquote><p>出现了报错(节选)：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">ERROR &#123;</span><br><span class="line">  err: YAMLException: incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line at line 5, column 52:</span><br><span class="line">       ... +报错pyppeteer.errors.BrowserError: Browser closed unexpectedly:解决办法</span><br><span class="line">                                           ^</span><br><span class="line">      at generateError (F:\workSpace\myHexo\node_modules\js-yaml\lib\js-yaml\loader.js:167:10)</span><br><span class="line">      at throwError (F:\workSpace\myHexo\node_modules\js-yaml\lib\js-yaml\loader.js:173:9)</span><br><span class="line">      at readBlockMapping (F:\workSpace\myHexo\node_modules\js-yaml\lib\js-yaml\loader.js:1027:9)</span><br><span class="line">      at composeNode (F:\workSpace\myHexo\node_modules\js-yaml\lib\js-yaml\loader.js:1359:12)</span><br><span class="line">      at readDocument (F:\workSpace\myHexo\node_modules\js-yaml\lib\js-yaml\loader.js:1525:3)</span><br><span class="line">      at loadDocuments (F:\workSpace\myHexo\node_modules\js-yaml\lib\js-yaml\loader.js:1588:5)</span><br><span class="line">      at Object.load (F:\workSpace\myHexo\node_modules\js-yaml\lib\js-yaml\loader.js:1614:19)</span><br><span class="line">      at parseYAML (F:\workSpace\myHexo\node_modules\hexo-front-matter\lib\front_matter.js:69:23)</span><br><span class="line">      at parse (F:\workSpace\myHexo\node_modules\hexo-front-matter\lib\front_matter.js:50:12)</span><br><span class="line">      at F:\workSpace\myHexo\node_modules\hexo\lib\plugins\processor\post.js:51:20</span><br><span class="line">      at tryCatcher (F:\workSpace\myHexo\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">      at Promise._settlePromiseFromHandler (F:\workSpace\myHexo\node_modules\bluebird\js\release\promise.js:544:35)</span><br><span class="line">      at Promise._settlePromise (F:\workSpace\myHexo\node_modules\bluebird\js\release\promise.js:604:18)</span><br><span class="line">      at Promise._settlePromise0 (F:\workSpace\myHexo\node_modules\bluebird\js\release\promise.js:649:10)</span><br><span class="line">      at Promise._settlePromises (F:\workSpace\myHexo\node_modules\bluebird\js\release\promise.js:729:18)</span><br><span class="line">      at Promise._fulfill (F:\workSpace\myHexo\node_modules\bluebird\js\release\promise.js:673:18)</span><br><span class="line">      at PromiseArray._resolve (F:\workSpace\myHexo\node_modules\bluebird\js\release\promise_array.js:127:19)</span><br><span class="line">      at PromiseArray._promiseFulfilled (F:\workSpace\myHexo\node_modules\bluebird\js\release\promise_array.js:145:14)</span><br><span class="line">      at PromiseArray._iterate (F:\workSpace\myHexo\node_modules\bluebird\js\release\promise_array.js:115:31)</span><br><span class="line">      at PromiseArray.init [as _init] (F:\workSpace\myHexo\node_modules\bluebird\js\release\promise_array.js:79:10)</span><br><span class="line">      at Promise._settlePromise (F:\workSpace\myHexo\node_modules\bluebird\js\release\promise.js:601:21)</span><br><span class="line">      at Promise._settlePromise0 (F:\workSpace\myHexo\node_modules\bluebird\js\release\promise.js:649:10) &#123;</span><br><span class="line">    reason: &#x27;incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line&#x27;,</span><br><span class="line">    mark: Mark &#123;</span><br><span class="line">      name: null,</span><br><span class="line">      buffer: &quot;title: &#x27;scrapy+报错pyppeteer.errors.BrowserError Browser closed unexpectedly 的解决办法&#x27;\n&quot; +</span><br><span class="line">        &#x27;top_img: /customize/img/top/debug.jpg\n&#x27; +</span><br><span class="line">        &#x27;cover: /customize/img/top/debug.jpg\n&#x27; +</span><br><span class="line">        &#x27;comments: true\n&#x27; +</span><br><span class="line">        &#x27;description: scrapy+报错pyppeteer.errors.BrowserError: Browser closed unexpectedly:解决办法\n&#x27; +</span><br><span class="line">        &#x27;keywords:\n&#x27; +</span><br><span class="line">        &#x27;    - scrapy\n&#x27; +</span><br><span class="line">        &#x27;    - python\n&#x27; +</span><br><span class="line">        &#x27;    - pyppeteer\n&#x27; +</span><br><span class="line">        &#x27;tags:\n&#x27; +</span><br><span class="line">        &#x27;    - scrapy\n&#x27; +</span><br><span class="line">        &#x27;    - python\n&#x27; +</span><br><span class="line">        &#x27;    - pyppeteer\n&#x27; +</span><br><span class="line">        &#x27;categories:\n&#x27; +</span><br><span class="line">        &#x27;    - 技术博文\n&#x27; +</span><br><span class="line">        &#x27;date: 2021-05-12 10:06:18\n&#x27; +</span><br><span class="line">        &#x27;updated: 2021-05-12 10:06:18\n&#x27; +</span><br><span class="line">        &#x27;\x00&#x27;,</span><br><span class="line">      position: 222,</span><br><span class="line">      line: 4,</span><br><span class="line">      column: 51</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>hexo g 发生此类报错，可能是因为md文件title中有冒号。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>英文的”:” 改成 中文的”：”。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 疑难杂症 </tag>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫：使用多进程，让Scrapy采集速度如虎添翼</title>
      <link href="article/964431818/"/>
      <url>article/964431818/</url>
      
        <content type="html"><![CDATA[<p>Python爬虫：使用多进程，让Scrapy采集速度如虎添翼.</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2021.3.1 x64  </span><br><span class="line">语言: python v3.9.1</span><br><span class="line">框架: Scrapy v2.4.1</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>应用场景，站源的数据是按照日期区间（一年的第一天到该年的最后一天），来进行检索，根据结果整合成url列表来进行采集。</p><p>那么，这个列表中的url数量就会相当的庞大。</p><p>倘若对它进行切分，用多个相同的Scrapy爬虫，来对切分好的各个分段url进行采集，</p><p>加上scrapy自身的并发，那采集速度就可以指数倍增长。</p><p>当然，这也会消耗性能，对服务器的配置要求也会提高，代理IP消耗量也会增加。</p><p><del>就算使用批量插入数据，可能也会把mysql日到翻白眼…</del></p><p>Scrapy是线程级别，实现异步。</p><p>使用多个进程，来多次跑Scrapy爬虫。</p><p>为了避免本文篇幅过长，仅介绍如何多进程跑scrapy，不介绍如何切分url列表，让scrapy区间采集。</p><h1 id="multiprocessing-模块介绍"><a href="#multiprocessing-模块介绍" class="headerlink" title="multiprocessing 模块介绍"></a>multiprocessing 模块介绍</h1><p>python中的多线程无法利用多核优势，如果想要充分地使用多核CPU的资源（os.cpu_count()查看），在python中大部分情况需要使用多进程。</p><p>Python提供了multiprocessing。 multiprocessing模块用来开启子进程，并在子进程中执行我们定制的任务（比如函数），该模块与多线程模块threading的编程接口类似。</p><p>multiprocessing模块的功能众多：支持子进程、通信和共享数据、执行不同形式的同步，&gt;提供了Process、Queue、Pipe、Lock等组件。</p><p>需要再次强调的一点是：与线程不同，进程没有任何共享状态，进程修改的数据，改动仅限于该进程内。</p><h1 id="Scrapy-框架的介绍"><a href="#Scrapy-框架的介绍" class="headerlink" title="Scrapy 框架的介绍"></a>Scrapy 框架的介绍</h1><blockquote><p>Scrapy,这把刀是我的最爱。</p></blockquote><p>作为一个易上手的高性能爬虫框架，Scrapy 使用 Twisted 异步网络框架处理并发请求。</p><p>Scrapy诞生得比较早，核心通过yield这一携程的思路来实现的异步。</p><p>虽然 Twisted 框架提供了线程池支持，但是其核心网络部分处理逻辑依赖的是「单线程 IO 多路复用」技术，在 Linux 平台上，是围绕 epoll() 系统调用实现的 Reactor 模式。</p><p>总有人说，Scrapy不灵活，限制太多来作为缺点来评价它，但是却没几个人能好好举出究竟具体是什么场景Scrapy不能胜任的案例。</p><p>摸棱两可的跟风评价，没有什么营养。</p><p>在这里并不是说Scrapy是如何完美的框架，它确实有自己的缺点，但是..</p><p>绝大多数情况下，都是因为自己对框架没有足够的了解和自身缺乏开阔的开发思维。</p><p>多人协作开发的情况，统一的框架结构，更易于维护。</p><h1 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h1><p>scrapy的爬虫文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">import scrapy</span><br><span class="line">from multiprocessing import Process</span><br><span class="line">from scrapy.crawler import CrawlerProcess</span><br><span class="line">from scrapy.utils.project import get_project_settings</span><br><span class="line"></span><br><span class="line">class BaiduSpider(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;baidu&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;baidu.com&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    def __init__(self, category=None, *args, **kwargs):</span><br><span class="line">        super(BaiduSpider, self).__init__(*args, **kwargs)</span><br><span class="line">        self.start_urls = f<span class="string">&quot;https://www.baidu.com/s?ie=utf-8&amp;wd=&#123;category&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    def start_requests(self):</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        yield scrapy.Request(self.start_urls, headers=headers, callback=self.parse)</span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line">        <span class="built_in">print</span>(response.status)</span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line"></span><br><span class="line">def start(category):</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&quot;category=&#123;category&#125;&quot;</span>)</span><br><span class="line">    settings = get_project_settings()</span><br><span class="line">    process = CrawlerProcess(settings)</span><br><span class="line">    spider = BaiduSpider()</span><br><span class="line">    process.crawl(spider, category=category)</span><br><span class="line">    process.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    name = [<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;C语言&#x27;</span>, <span class="string">&#x27;php&#x27;</span>, <span class="string">&#x27;goland&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(name)):</span><br><span class="line">        category = name[i]</span><br><span class="line">        p = Process(target=start, args=(category,))</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure><p>这段代码要做的是：</p><ul><li>使用百度搜索[‘java’, ‘python’, ‘C语言’, ‘php’, ‘goland’]这些关键字</li><li>采集搜索到的结果列表。</li><li>使用multiprocessing的Process封装,多次运行Scrapy</li><li>为每一个关键词，单独跑一个关键词。即’java’跑一个Scrapy,’python’跑一个Scrapy…</li><li>而不是一个scrapy跑[‘java’, ‘python’, ‘C语言’, ‘php’, ‘goland’]所有关键词搜索结果</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>代码中，有get_project_settings和CrawlerProcess方法的应用。</p><p>在封装scrapy启动文件的时候，可以更加的优雅。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据清洗：Python的列表的交集、并集、差集</title>
      <link href="article/688259363/"/>
      <url>article/688259363/</url>
      
        <content type="html"><![CDATA[<p>数据清洗：Python的列表的交集、并集、差集</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2021.3.1 x64  </span><br><span class="line">语言: python v3.9.1</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>数据清洗和结构化的时候，免不了要对两方数据进行对比或者合并。</p><p>Python列表的常见的三种集合操作，还是要记录一下。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>]</span><br><span class="line">l2 = [<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交集</span></span><br><span class="line">result1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> l1 <span class="keyword">if</span> i <span class="keyword">in</span> l2]</span><br><span class="line">result2 = <span class="built_in">list</span>(<span class="built_in">set</span>(l1).intersection(<span class="built_in">set</span>(l2)))</span><br><span class="line">print(result1)</span><br><span class="line">print(result2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line">result3 = <span class="built_in">list</span>(<span class="built_in">set</span>(l1).union(<span class="built_in">set</span>(l2)))</span><br><span class="line">print(result3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 差集</span></span><br><span class="line"><span class="comment"># 元素在 l1 不在 l2</span></span><br><span class="line">result4 = <span class="built_in">list</span>(<span class="built_in">set</span>(l1).difference(<span class="built_in">set</span>(l2)))</span><br><span class="line">print(result4)</span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src= "/customize/img/loading.gif" data-lazy-src="%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%EF%BC%9APython%E7%9A%84%E5%88%97%E8%A1%A8%E7%9A%84%E4%BA%A4%E9%9B%86%E3%80%81%E5%B9%B6%E9%9B%86%E3%80%81%E5%B7%AE%E9%9B%86/6e083c9f.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>没啥总结的，就是日常应用。数据结构的处理基本功，贵在积累。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python：中英文时间格式的转换</title>
      <link href="article/1750273785/"/>
      <url>article/1750273785/</url>
      
        <content type="html"><![CDATA[<p>将时间字符串格式化，但是有出现英文月份，英文星期。</p><p>python，也可以这样特殊的日期转换成日期对象。</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2021.3.1 x64  </span><br><span class="line">语言: python v3.9.1</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>采集的网站，时间格式包含英文月份，需要转换成数字月份然后入库。</p><p><img src= "/customize/img/loading.gif" data-lazy-src="python%EF%BC%9A%E4%B8%AD%E8%8B%B1%E6%96%87%E6%97%B6%E9%97%B4%E8%BD%AC%E6%8D%A2/8d3c99a6.png"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>代码举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">time_str=<span class="string">&#x27;Friday, November 18, 2016&#x27;</span></span><br><span class="line">time_format=datetime.datetime.strptime(time_str,<span class="string">&#x27;%A, %B %d, %Y&#x27;</span>)</span><br><span class="line">print(time_format)</span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src= "/customize/img/loading.gif" data-lazy-src="python%EF%BC%9A%E4%B8%AD%E8%8B%B1%E6%96%87%E6%97%B6%E9%97%B4%E8%BD%AC%E6%8D%A2/cf1f97e4.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>英文日期格式化，也是数据清洗的常见应用。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy+pyppeteer.errors.BrowserError Browser closed unexpectedly 的解决办法</title>
      <link href="article/1479294947/"/>
      <url>article/1479294947/</url>
      
        <content type="html"><![CDATA[<p>scrapy+报错pyppeteer.errors.BrowserError: Browser closed unexpectedly:解决办法</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2021.3.1 x64  </span><br><span class="line">语言: python v3.9.1</span><br><span class="line">框架: Scrapy v2.4.1</span><br><span class="line">----</span><br><span class="line">gerapy-pyppeteer    0.0.13</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>在centos服务器上部署scrapty+gerapy-pyppeteer,运行</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyppeteer.errors.BrowserError: Browser closed unexpectedly:</span><br><span class="line">[ERROR] Running as root without --no-sandbox is not supported. See https://crbug.com/638180</span><br></pre></td></tr></table></figure><h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>于是我去扒拉的一下gerapy-pyppeteer封装的代码</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">async def _process_request(self, request, spider):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    use pyppeteer to process spider</span><br><span class="line">    :param request:</span><br><span class="line">    :param spider:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    options = &#123;</span><br><span class="line">        &#x27;headless&#x27;: self.headless,</span><br><span class="line">        &#x27;dumpio&#x27;: self.dumpio,</span><br><span class="line">        &#x27;devtools&#x27;: self.devtools,</span><br><span class="line">        &#x27;args&#x27;: [</span><br><span class="line">            f&#x27;--window-size=&#123;self.window_width&#125;,&#123;self.window_height&#125;&#x27;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    if self.pretend:</span><br><span class="line">        options[&#x27;ignoreDefaultArgs&#x27;] = [</span><br><span class="line">            &#x27;--enable-automation&#x27;</span><br><span class="line">        ]</span><br><span class="line">    if self.executable_path:</span><br><span class="line">        options[&#x27;executablePath&#x27;] = self.executable_path</span><br><span class="line">    if self.ignore_https_errors:</span><br><span class="line">        options[&#x27;ignoreHTTPSErrors&#x27;] = self.ignore_https_errors</span><br><span class="line">    if self.slow_mo:</span><br><span class="line">        options[&#x27;slowMo&#x27;] = self.slow_mo</span><br><span class="line">    if self.ignore_default_args:</span><br><span class="line">        options[&#x27;ignoreDefaultArgs&#x27;] = self.ignore_default_args</span><br><span class="line">    if self.handle_sigint:</span><br><span class="line">        options[&#x27;handleSIGINT&#x27;] = self.handle_sigint</span><br><span class="line">    if self.handle_sigterm:</span><br><span class="line">        options[&#x27;handleSIGTERM&#x27;] = self.handle_sigterm</span><br><span class="line">    if self.handle_sighup:</span><br><span class="line">        options[&#x27;handleSIGHUP&#x27;] = self.handle_sighup</span><br><span class="line">    if self.auto_close:</span><br><span class="line">        options[&#x27;autoClose&#x27;] = self.auto_close</span><br><span class="line">    if self.disable_extensions:</span><br><span class="line">        options[&#x27;args&#x27;].append(&#x27;--disable-extensions&#x27;)</span><br><span class="line">    if self.hide_scrollbars:</span><br><span class="line">        options[&#x27;args&#x27;].append(&#x27;--hide-scrollbars&#x27;)</span><br><span class="line">    if self.mute_audio:</span><br><span class="line">        options[&#x27;args&#x27;].append(&#x27;--mute-audio&#x27;)</span><br><span class="line">    if self.no_sandbox:</span><br><span class="line">        options[&#x27;args&#x27;].append(&#x27;--no-sandbox&#x27;)</span><br><span class="line">    if self.disable_setuid_sandbox:</span><br><span class="line">        options[&#x27;args&#x27;].append(&#x27;--disable-setuid-sandbox&#x27;)</span><br><span class="line">    if self.disable_gpu:</span><br><span class="line">        options[&#x27;args&#x27;].append(&#x27;--disable-gpu&#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if self.no_sandbox:</span><br><span class="line">    options[&#x27;args&#x27;].append(&#x27;--no-sandbox&#x27;)</span><br></pre></td></tr></table></figure><p>gerapy-pyppeteer封装的时候已经把沙盒参数加入了进去，那就说明不是这个问题。</p><p>既然是centos首次安装使用gerapy-pyppeteer，那会不会就是有关的环境和依赖没有安装完全。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>把pyppeteer所需要的依赖安装完整。</p><p>centos 系统的命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install pango.x86_64 libXcomposite.x86_64 libXcursor.x86_64 libXdamage.x86_64 libXext.x86_64 libXi.x86_64 libXtst.x86_64 cups-libs.x86_64 libXScrnSaver.x86_64 libXrandr.x86_64 GConf2.x86_64 alsa-lib.x86_64 atk.x86_64 gtk3.x86_64 -y</span><br></pre></td></tr></table></figure><p>ubuntu 系统的命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install pango.x86_64 libXcomposite.x86_64 libXcursor.x86_64 libXdamage.x86_64 libXext.x86_64 libXi.x86_64 libXtst.x86_64 cups-libs.x86_64 libXScrnSaver.x86_64 libXrandr.x86_64 GConf2.x86_64 alsa-lib.x86_64 atk.x86_64 gtk3.x86_64 -y</span><br></pre></td></tr></table></figure><p>根据自己的需要添加sudo</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>scrapy + gerapy-pyppeteer 优雅组合，实现scrapy的动态爬虫。</p><p>数据量小，5W数据以下可以玩玩。数据量大，妥妥内存溢出…</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> scrapy </tag>
            
            <tag> pyppeteer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python:导入上级目录中的模块</title>
      <link href="article/3615261912/"/>
      <url>article/3615261912/</url>
      
        <content type="html"><![CDATA[<p>python导入同级别模块很方便：</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2021.3.1 x64  </span><br><span class="line">语言: python v3.9.1</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司开发的爬虫项目日益庞大，光是启动爬虫的启动文件，都有几十个了。</p><p>于是，我打算把我负责的爬虫启动程序收束到一个目录当中，做整理。</p><p>但是，路径变更了以后，导致启动程序在服务器运行时，发生了错误。</p><h1 id="主程序与模块程序在同一目录下"><a href="#主程序与模块程序在同一目录下" class="headerlink" title="主程序与模块程序在同一目录下"></a>主程序与模块程序在同一目录下</h1><p>目录结构</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- spider</span><br><span class="line">    |-- demo_1.py</span><br><span class="line">    |-- main.py</span><br></pre></td></tr></table></figure><p>main.py 中导入 mod1.py,则：</p><blockquote><p>import demo_1</p></blockquote><blockquote><p>from demo_1 import *</p></blockquote><h1 id="主程序所在目录是模块所在目录的父-或祖辈-目录"><a href="#主程序所在目录是模块所在目录的父-或祖辈-目录" class="headerlink" title="主程序所在目录是模块所在目录的父(或祖辈)目录"></a>主程序所在目录是模块所在目录的父(或祖辈)目录</h1><p>目录结构</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- spider</span><br><span class="line">    |-- demo_1.py</span><br><span class="line">    |-- demo_2</span><br><span class="line">    |   |-- demo_2_1.py</span><br><span class="line">    |-- main.py</span><br></pre></td></tr></table></figure><p>main.py 中导入 demo_2中的demo_2_1.py,则：</p><ul><li> 需要在demo_2文件夹中建立空文件__init__.py文件</li></ul><blockquote><p>from demo_2.demo_2_1 import * </p></blockquote><blockquote><p>import demo_2.demo_2_1</p></blockquote><h1 id="主程序导入上层目录中模块或其他目录-平级-下的模块"><a href="#主程序导入上层目录中模块或其他目录-平级-下的模块" class="headerlink" title="主程序导入上层目录中模块或其他目录(平级)下的模块"></a>主程序导入上层目录中模块或其他目录(平级)下的模块</h1><p>目录结构</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- src</span><br><span class="line">    |-- demo_1.py</span><br><span class="line">    |-- demo_2</span><br><span class="line">    |   |-- demo_2_1.py</span><br><span class="line">    |-- sub</span><br><span class="line">    |   |-- main.py</span><br></pre></td></tr></table></figure><p>main.py 中导入 demo_2中的demo_2_1.py,则：</p><ul><li> 需要在demo_2文件夹中建立空文件__init__.py文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> demo_1</span><br><span class="line"><span class="keyword">import</span> demo_2.demo_2_1</span><br><span class="line"></span><br><span class="line"><span class="comment"># or </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> demo_1 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> demo_2.demo_2_1 <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>ojbk, 完事。虽然Pycharm下面报着个小横线，看着听不自在的。不过解决的问题。</p><p>sys模块可以让python的导包路径更加灵活，但个人认为开发的时候，在项目结构上还是尽量避免需要用到这种方式的尝尽。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python：将一个列表切分成多个小列表</title>
      <link href="article/2054084708/"/>
      <url>article/2054084708/</url>
      
        <content type="html"><![CDATA[<p>python-将一个列表切分成多个小列表,多组数据扁平的保存在一个列表了，要怎么拆分。</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2021.3.1 x64  </span><br><span class="line">语言: python v3.9.1</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>数据采集，有时会采集到类似这样场景的数据结构。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_info = [&#x27;name zhangsan&#x27;,&#x27;age 10&#x27;,&#x27;sex man&#x27;,&#x27;name lisi&#x27;,&#x27;age 11&#x27;,&#x27;sex women&#x27;]</span><br></pre></td></tr></table></figure><p>可以观察到列表中每三个元素为一条数据，按理说一条应该被封装起来，变成这种格式</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_info = [[&#x27;name zhangsan&#x27;,&#x27;age 10&#x27;,&#x27;sex man&#x27;],[&#x27;name lisi&#x27;,&#x27;age 11&#x27;,&#x27;sex women&#x27;]]</span><br></pre></td></tr></table></figure><p>是把 有规律的 扁平列表的拆分。</p><h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_of_groups</span>(<span class="params">list_info, per_list_len</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    :param list_info:   列表</span></span><br><span class="line"><span class="string">    :param per_list_len:  每个小列表的长度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    list_of_group = <span class="built_in">zip</span>(*(<span class="built_in">iter</span>(list_info),) *per_list_len) </span><br><span class="line">    end_list = [<span class="built_in">list</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> list_of_group] <span class="comment"># i is a tuple</span></span><br><span class="line">    count = <span class="built_in">len</span>(list_info) % per_list_len</span><br><span class="line">    end_list.append(list_info[-count:]) <span class="keyword">if</span> count !=<span class="number">0</span> <span class="keyword">else</span> end_list</span><br><span class="line">    <span class="keyword">return</span> end_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    list_info = [<span class="string">&#x27;name zhangsan&#x27;</span>, <span class="string">&#x27;age 10&#x27;</span>, <span class="string">&#x27;sex man&#x27;</span>, <span class="string">&#x27;name lisi&#x27;</span>, <span class="string">&#x27;age 11&#x27;</span>, <span class="string">&#x27;sex women&#x27;</span>]</span><br><span class="line">    ret = list_of_groups(list_info,<span class="number">3</span>)</span><br><span class="line">    print(ret)</span><br></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_split</span>(<span class="params">cls, temp_list, step</span>) -&gt; list:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    大列表拆分成小列表</span></span><br><span class="line"><span class="string">    :param step: int, 每个小列表的长度</span></span><br><span class="line"><span class="string">    :param temp_list: list, 需要拆分的大列表</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    step = <span class="built_in">int</span>(step)</span><br><span class="line">    <span class="keyword">return</span> [temp_list[i:i + step] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(temp_list), step)]</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    list_info = [<span class="string">&#x27;name zhangsan&#x27;</span>, <span class="string">&#x27;age 10&#x27;</span>, <span class="string">&#x27;sex man&#x27;</span>, <span class="string">&#x27;name lisi&#x27;</span>, <span class="string">&#x27;age 11&#x27;</span>, <span class="string">&#x27;sex women&#x27;</span>]</span><br><span class="line">    ret = list_split(list_info,<span class="number">3</span>)</span><br><span class="line">    print(ret)</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>第一种方法是网上查来的，第二种是我个人理解的升华。</p><p>这样的方法适用于每组数据结构规律的列表</p><p>规律的情况（三三成组）：</p><blockquote><p>list_info = [‘name zhangsan’,’age 10’,’sex man’,’name lisi’,’age 11’,’sex women’]</p></blockquote><p>不规律的情况(二三(不定)成组)</p><blockquote><p>list_info = [‘name zhangsan’,’sex man’,’name lisi’,’age 11’,’sex women’]</p></blockquote><p>长度不规律的情况就不适用了</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xpath语法:不包含某属性(or与and)的用法</title>
      <link href="article/267444874/"/>
      <url>article/267444874/</url>
      
        <content type="html"><![CDATA[<p>页面解析时，碰到同级li标签，进行部分采集筛选时用到了or和contains方法的结合。</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2021.3.1 x64  </span><br><span class="line">语言: python v3.9.1</span><br></pre></td></tr></table></figure><hr><h1 id="html-示例"><a href="#html-示例" class="headerlink" title="html 示例"></a>html 示例</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pharos_list&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;pharos_list&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;pharos_list&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;pharos_list&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;pharos_list blue&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;pharos_list red&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;pharos_list blue&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;pharos_list red&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;pharos_list blue&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;pharos_list red&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;pharos_list blue&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;pharos_list red&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;pharos_list blue&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="xpath-测试对比"><a href="#xpath-测试对比" class="headerlink" title="xpath 测试对比"></a>xpath 测试对比</h1><p>不包含id 和 不包含class</p><blockquote><p>//li[not(@id) and not(@class)]</p></blockquote><p><img src= "/customize/img/loading.gif" data-lazy-src="xpath-%E4%B8%8D%E5%8C%85%E5%90%AB%E6%9F%90%E5%B1%9E%E6%80%A7or%E4%B8%8Eand%E7%9A%84%E7%94%A8%E6%B3%95/7d658db0.png"></p><p>不包含id 或 不包含 class(即没id也没class的li标签被排除了)</p><blockquote><p>//li[not(@id) or not(@class)]</p></blockquote><p><img src= "/customize/img/loading.gif" data-lazy-src="xpath-%E4%B8%8D%E5%8C%85%E5%90%AB%E6%9F%90%E5%B1%9E%E6%80%A7or%E4%B8%8Eand%E7%9A%84%E7%94%A8%E6%B3%95/e02176f5.png"></p><p>class中包含blue 或 有id dom属性的li标签</p><blockquote><p>//li[contains(@class, ‘blue’) or (@id)]</p></blockquote><p><img src= "/customize/img/loading.gif" data-lazy-src="xpath-%E4%B8%8D%E5%8C%85%E5%90%AB%E6%9F%90%E5%B1%9E%E6%80%A7or%E4%B8%8Eand%E7%9A%84%E7%94%A8%E6%B3%95/18628a4d.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>非常简单，主要就是了解清楚and和or、not和contains的用法。</p><p>网上有部分文章提到xpath了”!=“的用法，但是我在自己实际测试中没有成功。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 数据清洗 </tag>
            
            <tag> 解析库 </tag>
            
            <tag> xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xpath_定位中@dom、starts-with、contains和text()、last()的对比</title>
      <link href="article/3719630739/"/>
      <url>article/3719630739/</url>
      
        <content type="html"><![CDATA[<p>xpath_定位中@dom、starts-with、contains和text()、last()的对比.</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2021.3.1 x64  </span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>xpath 解析很强大，函数方法也很多，但是常用的也就那几个。</p><p>xpath_定位中@dom、starts-with、contains和text()、last()的对比。</p><h1 id="常用位置定位和描述"><a href="#常用位置定位和描述" class="headerlink" title="常用位置定位和描述"></a>常用位置定位和描述</h1><p>测试用html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg s_btn btnhover&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Raxianch&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度搜索<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="dom-dom属性定位"><a href="#dom-dom属性定位" class="headerlink" title="@dom dom属性定位"></a>@dom dom属性定位</h2><p>@符号加上dom属性名称组成定位，例如：@id、@name、@href等等..高亮部分为被定位的HTML节点</p><blockquote><p>//input[@id=’demo’]</p></blockquote><p><img src= "/customize/img/loading.gif" data-lazy-src="xpath_%E5%AE%9A%E4%BD%8D%E4%B8%AD@dom%E3%80%81starts-with%E3%80%81contains%E5%92%8Ctext()%E3%80%81last()%E7%9A%84%E5%AF%B9%E6%AF%94/914d0543.png"></p><p>同时匹配多个dom元素</p><blockquote><p>//input[@id=’demo’][@value=’xxxx’]</p></blockquote><p><img src= "/customize/img/loading.gif" data-lazy-src="xpath_%E5%AE%9A%E4%BD%8D%E4%B8%AD@dom%E3%80%81starts-with%E3%80%81contains%E5%92%8Ctext()%E3%80%81last()%E7%9A%84%E5%AF%B9%E6%AF%94/306d5030.png"></p><blockquote><p>//input[@id=’demo’][@value=’Raxianch’]</p></blockquote><p><img src= "/customize/img/loading.gif" data-lazy-src="xpath_%E5%AE%9A%E4%BD%8D%E4%B8%AD@dom%E3%80%81starts-with%E3%80%81contains%E5%92%8Ctext()%E3%80%81last()%E7%9A%84%E5%AF%B9%E6%AF%94/38d223ac.png"></p><p>结合 通配符、and、不存在、or、不等于的用法：</p><blockquote><p>//*[@id=”demo” and (not(@class) or @value!=”Raxianch”)]</p></blockquote><p><img src= "/customize/img/loading.gif" data-lazy-src="xpath_%E5%AE%9A%E4%BD%8D%E4%B8%AD@dom%E3%80%81starts-with%E3%80%81contains%E5%92%8Ctext()%E3%80%81last()%E7%9A%84%E5%AF%B9%E6%AF%94/6c51b5d3.png"></p><h2 id="starts-with-顾名思义，匹配一个属性开始位置的关键字-–-模糊定位"><a href="#starts-with-顾名思义，匹配一个属性开始位置的关键字-–-模糊定位" class="headerlink" title="starts-with 顾名思义，匹配一个属性开始位置的关键字  – 模糊定位"></a>starts-with 顾名思义，匹配一个属性开始位置的关键字  – 模糊定位</h2><blockquote><p>//a[starts-with(@name,’2d’)]</p></blockquote><p>匹配到两个节点，排除了name属性中非’2d’开头的</p><p><img src= "/customize/img/loading.gif" data-lazy-src="xpath_%E5%AE%9A%E4%BD%8D%E4%B8%AD@dom%E3%80%81starts-with%E3%80%81contains%E5%92%8Ctext()%E3%80%81last()%E7%9A%84%E5%AF%B9%E6%AF%94/51aefdda.png"></p><p><img src= "/customize/img/loading.gif" data-lazy-src="xpath_%E5%AE%9A%E4%BD%8D%E4%B8%AD@dom%E3%80%81starts-with%E3%80%81contains%E5%92%8Ctext()%E3%80%81last()%E7%9A%84%E5%AF%B9%E6%AF%94/0fb5b250.png"></p><h2 id="contains-匹配一个属性值中包含的字符串-–-模糊定位"><a href="#contains-匹配一个属性值中包含的字符串-–-模糊定位" class="headerlink" title="contains 匹配一个属性值中包含的字符串  – 模糊定位"></a>contains 匹配一个属性值中包含的字符串  – 模糊定位</h2><blockquote><p>//a[contains(@name,’d’)]</p></blockquote><p>匹配到四个节点，name属性的全有了</p><p><img src= "/customize/img/loading.gif" data-lazy-src="xpath_%E5%AE%9A%E4%BD%8D%E4%B8%AD@dom%E3%80%81starts-with%E3%80%81contains%E5%92%8Ctext()%E3%80%81last()%E7%9A%84%E5%AF%B9%E6%AF%94/d01f13aa.png"></p><h2 id="text-函数文本定位"><a href="#text-函数文本定位" class="headerlink" title="text()  函数文本定位"></a>text()  函数文本定位</h2><blockquote><p>//a[@id=’cb_post_title_url’]/span/text()</p></blockquote><p><img src= "/customize/img/loading.gif" data-lazy-src="xpath_%E5%AE%9A%E4%BD%8D%E4%B8%AD@dom%E3%80%81starts-with%E3%80%81contains%E5%92%8Ctext()%E3%80%81last()%E7%9A%84%E5%AF%B9%E6%AF%94/b672bfe2.png"></p><blockquote><p>//a[text()=’百度搜索’]</p></blockquote><p>匹配文本为百度搜索的所有节点</p><p><img src= "/customize/img/loading.gif" data-lazy-src="xpath_%E5%AE%9A%E4%BD%8D%E4%B8%AD@dom%E3%80%81starts-with%E3%80%81contains%E5%92%8Ctext()%E3%80%81last()%E7%9A%84%E5%AF%B9%E6%AF%94/637ab86c.png"></p><h2 id="last-函数位置定位"><a href="#last-函数位置定位" class="headerlink" title="last()  函数位置定位"></a>last()  函数位置定位</h2><blockquote><p>//span[@class=’span_test’][last()]</p></blockquote><p>/A/B/C[last()]   表示A元素→B元素→C元素的最后一个子元素,且class值为span_test</p><p><img src= "/customize/img/loading.gif" data-lazy-src="xpath_%E5%AE%9A%E4%BD%8D%E4%B8%AD@dom%E3%80%81starts-with%E3%80%81contains%E5%92%8Ctext()%E3%80%81last()%E7%9A%84%E5%AF%B9%E6%AF%94/2cdfd2d0.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python - 爬虫 - 解析库 - xpath - 数据清洗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用方法_撤销最后一次提交</title>
      <link href="article/1884864783/"/>
      <url>article/1884864783/</url>
      
        <content type="html"><![CDATA[<p>Git可以使用reset重置来撤销提交。</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2021.3.1 x64  </span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>手滑，不小心把idea给add到git里面去了。</p><p>忽略文件都没来得及写。</p><p>所以，Git可以使用reset重置来撤销提交。</p><p>这难吗？ 不难。 容易忘吗？ 这种情况不多见，但是用到时候又要查一下。</p><p>干脆，写文章自己记一下。</p><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>撤销最近的一次提交。()</p><blockquote><p>git reset HEAD~1</p></blockquote><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>使用–soft，执行后，状态重置为上一次提交，但撤回提交的文件add到git，被git跟踪。(即撤回comit,但不撤回add)</p><blockquote><p>git reset –soft HEAD~1</p></blockquote><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><h2 id="–mixed"><a href="#–mixed" class="headerlink" title="–mixed"></a>–mixed</h2><p>意思是：不删除工作空间改动代码，撤销commit，并且撤销git add . 操作<br>这个为默认参数,git reset –mixed HEAD^ 和 git reset HEAD^ 效果是一样的。</p><h2 id="–soft"><a href="#–soft" class="headerlink" title="–soft"></a>–soft</h2><p>不删除工作空间改动代码，撤销commit，不撤销git add .</p><h2 id="–hard"><a href="#–hard" class="headerlink" title="–hard"></a>–hard</h2><p>删除工作空间改动代码，撤销commit，撤销git add .</p><p>注意完成这个操作后，就恢复到了上一次的commit状态.</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>整理一下，命令就是这样。</p><blockquote><p>git reset [–soft] HEAD~[撤销到倒数第几次]</p></blockquote><p>如果不清楚自己到底要撤销几次的情况，可以先用</p><blockquote><p>git log</p></blockquote><p>查看一下历史提交日志</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xpath_normalize-space函数的两种用法</title>
      <link href="article/1637075314/"/>
      <url>article/1637075314/</url>
      
        <content type="html"><![CDATA[<p>normalize-space()的功能是去掉前后的空格。xpath函数normalize-space的两种用法，第一种方法非常实用，第二种方法就比较少用了。</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2021.3.1 x64  </span><br><span class="line">语言: python v3.9.1</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>使用xpath作为采集解析库是非常方便的。</p><p>有时就会采集到一些空格下来，甚至出现’\xa0’,这些空格的符号。</p><p>在Python里进一步进行清理处理，很容易，</p><p>但是能一步到位的话，也可以省些事情。</p><h1 id="作用描述"><a href="#作用描述" class="headerlink" title="作用描述"></a>作用描述</h1><p>normalize-space()的功能是去掉前后的空格。</p><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>normalize-space用在属性上，如</p><blockquote><p>//div[normalize-space(@class)=’’]/text()</p></blockquote><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>normalize-space用结果上，如</p><blockquote><p>normalize-space(//div[normalize-space(@class)=’’]/text())</p></blockquote><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>text()方法可以获取父节点下所有的文本字符串，</p><p>但是如果加上normalize-space方法就只能匹配到第一个文本字符串，而不是全部。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对单一节点的字符换解析清洗，很不错。</p><p>但是要解析父节点下的多个子节点，normalize-space就不一定适用了，具体看情况来使用。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 数据清洗 </tag>
            
            <tag> 解析库 </tag>
            
            <tag> xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm 设置模板默认添加作者时间等信息</title>
      <link href="article/3315403751/"/>
      <url>article/3315403751/</url>
      
        <content type="html"><![CDATA[<p>Pycharm过程中,每次新建都需要手动的编写一些项目信息或者文件信息个人信息,如果使用模板的话,很高效很多.</p><p>总之就是为了方便的添加信息。</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2021.3.1 x64  </span><br><span class="line">语言: python v3.9.1</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Pycharm过程中,每次新建都需要手动的编写一些项目信息或者文件信息个人信息,如果使用模板的话,很高效很多.</p><p>总之就是为了方便的添加信息。</p><h1 id="设置步骤"><a href="#设置步骤" class="headerlink" title="设置步骤"></a>设置步骤</h1><ul><li>打开Pycharm,选择 File &gt; Settings(Ctrl + Alt + S)</li></ul><p><img src= "/customize/img/loading.gif" data-lazy-src="Pycharm_%E8%AE%BE%E7%BD%AE%E6%A8%A1%E6%9D%BF%E9%BB%98%E8%AE%A4%E6%B7%BB%E5%8A%A0%E4%BD%9C%E8%80%85%E6%97%B6%E9%97%B4%E7%AD%89%E4%BF%A1%E6%81%AF/f3f7008a.png"></p><ul><li>使用搜索快速找到”File and Code Templates”</li></ul><p><img src= "/customize/img/loading.gif" data-lazy-src="Pycharm_%E8%AE%BE%E7%BD%AE%E6%A8%A1%E6%9D%BF%E9%BB%98%E8%AE%A4%E6%B7%BB%E5%8A%A0%E4%BD%9C%E8%80%85%E6%97%B6%E9%97%B4%E7%AD%89%E4%BF%A1%E6%81%AF/9c0a5133.png"></p><ul><li>右侧菜单选择”Python Script”,对模板进行编辑,并按OK保存生效</li></ul><p><img src= "/customize/img/loading.gif" data-lazy-src="Pycharm_%E8%AE%BE%E7%BD%AE%E6%A8%A1%E6%9D%BF%E9%BB%98%E8%AE%A4%E6%B7%BB%E5%8A%A0%E4%BD%9C%E8%80%85%E6%97%B6%E9%97%B4%E7%AD%89%E4%BF%A1%E6%81%AF/4fe53232.png"></p><p>常用变量：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$&#123;USER&#125;   当前系统用户</span><br><span class="line"></span><br><span class="line">$&#123;DATE&#125;   当前系统日期</span><br><span class="line"></span><br><span class="line">$&#123;TIME&#125;   当前系统时间</span><br><span class="line"></span><br><span class="line">$&#123;PRODUCT_NAME&#125;   创建文件的IDE名称</span><br></pre></td></tr></table></figure><p>我的模板：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># Author    : RaXianch</span><br><span class="line"># CreatDATE : $&#123;DATE&#125;</span><br><span class="line"># CreatTIME : $&#123;TIME&#125; </span><br><span class="line"># Blog      : https://blog.raxianch.moe/</span><br><span class="line"># Github    : https://github.com/DeSireFire</span><br><span class="line">__author__ = &#x27;RaXianch&#x27;</span><br></pre></td></tr></table></figure><ul><li>通过pycharm新建python文件时，效果</li></ul><p><img src= "/customize/img/loading.gif" data-lazy-src="Pycharm_%E8%AE%BE%E7%BD%AE%E6%A8%A1%E6%9D%BF%E9%BB%98%E8%AE%A4%E6%B7%BB%E5%8A%A0%E4%BD%9C%E8%80%85%E6%97%B6%E9%97%B4%E7%AD%89%E4%BF%A1%E6%81%AF/46ae8ad5.png"></p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>“File and Code Templates” 设置 “Python Script” 模板，代表的是pycharm在生成py文件时使用的模板。</p><p>如果你设置的是”Python Script”模板，但是却用pycharm生成了一个html文件，那就不会使用py文件的模板了。</p><p>不要傻傻分不清楚。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>该设置方法其实在jetbrains系列开发工具里，都是通用的。设置方式都差别不大。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计Python的list列表中元素的重复次数</title>
      <link href="article/1074843733/"/>
      <url>article/1074843733/</url>
      
        <content type="html"><![CDATA[<p>python的列表去重挺方便的，但是想获取列表中的元素是否重复，以及想知道重复了几次要如何做呢？</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2021.3.1 x64  </span><br><span class="line">语言: python v3.9.1</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>某日，检查数据库表，想看看数据跟需求文档是否一致，导出的时候发现，数据条数比需求文档多了几个。</p><p>那就说明同一个用于检索的关键词有可能采集到了多条结果。</p><p>多条结果用了同一个检索词，那我就想知道，每个检索词分别有多少条数据。</p><p>基于该应用场景，有了这样的需求。</p><h1 id="code-代码"><a href="#code-代码" class="headerlink" title="code 代码"></a>code 代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要使用collections模块</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">test = &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="built_in">dict</span>(Counter(a)).items() <span class="keyword">if</span> value &gt; <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h1><blockquote><p>{‘a’: 1, ‘b’: 3, ‘c’: 2}</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>做数据清洗的时候，要对各种数据结构操作，都有点了解才行。</p><p>不过，如果键值对数量庞大的时候，这样方式，答应出来也是有一点点长的…</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql数据库&#39;Got a packet bigger than‘max_allowed_packet’bytes&#39;的解决方案</title>
      <link href="article/3896883137/"/>
      <url>article/3896883137/</url>
      
        <content type="html"><![CDATA[<p>采集数据时，总有几条入不了库。尝试手动入库的时候，发生了报错。</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: webStrom 2021.3.1 x64  </span><br><span class="line">语言: nodeJs v14.15.4</span><br><span class="line">框架: hexo &quot;5.3.0&quot;</span><br><span class="line">theme: [Butterfly  &quot;3.6.1&quot;]</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>从网上将数据复制下来，用Navicat填写进相应字段中，按保存发生了错误。</p><p><img src= "/customize/img/loading.gif" data-lazy-src="Mysql%E6%95%B0%E6%8D%AE%E5%BA%93'Got_a_packet_bigger_than%E2%80%98max_allowed_packet%E2%80%99bytes'%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/c11a8e48.png"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Got a packet bigger than‘max_allowed_packet’bytes</span><br></pre></td></tr></table></figure><h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>该字段存储的是站源的原生接口json数据。</p><p>字段类型为json类型，长度应该是足够的，但是也存不进去。</p><p>发现是由于max_allowed_packet的值设置过小的原因，</p><p>只需要将max_allowed_packet值设置大一点就OK了。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>通过终端进入mysql控制台，输入如下命令可以查看max_allowed_packet值的大小。</p><blockquote><p>show VARIABLES like ‘%max_allowed_packet%’;</p></blockquote><p>显示的结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+——————–+———+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+——————–+———+</span><br><span class="line">| max_allowed_packet | 1048576 |</span><br><span class="line">+——————–+———+</span><br><span class="line">————————————————</span><br></pre></td></tr></table></figure><p>以上说明目前的配置是：1M</p><p>需要搞大max_allowed_packet的值：</p><blockquote><p>set global max_allowed_packet = 1048576*10</p></blockquote><p>退出mysql命令行，然后重新登录。</p><p>show VARIABLES like ‘%max_allowed_packet%’;</p><p>设置完之后，再重新导入数据，OK，一切正常。</p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>使用这种方法，重启服务器之后又恢复默认值了。</p><p>只是导数据的时候临时将其值改大，</p><p>导完之后尽量让其恢复原值，</p><p>因为max_allowed_packet设置过大可能会导致服务器太忙来不及接收，</p><p>网络差的时候也可能会出现丢包的现象。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 疑难杂症 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过python一键生成mysql建表sql语句！</title>
      <link href="article/2508268452/"/>
      <url>article/2508268452/</url>
      
        <content type="html"><![CDATA[<p>这一个多月，一直在做数据采集，写程序，然后创建好几个表一个个填字段，我吐了。</p><p>于是开发了一个懒人工具。</p><span id="more"></span><hr><h4 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">navicat: 15.0.2  </span><br><span class="line">mysql: 5.7.31</span><br><span class="line">IDE: Pycharm 2021.3.2 x64  </span><br><span class="line">语言: Python 3.9.1</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>这一个多月，一直在做数据采集。</p><p>开发程序，然后为每个创建好几个表，</p><p>并且一个个填字段，excel|Pycharm|Navicat 三个窗口切着换，眼睛都看疼了。</p><p>于是开发了一个懒人工具，</p><p>通过python的字典，直接生成可供Navicat（别的能够执行sql语句的工具也可以，只是我没测试过）使用的建表sql语句，简称DDL。</p><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>假如爬虫采集一条数据，并进行清洗生产了一个变量名为item的字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">itemDict = &#123;</span><br><span class="line">    <span class="string">&#x27;chembl_id&#x27;</span>: <span class="string">&#x27;cXXXl_XXXX_target&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;chembl_target_type&#x27;</span>: <span class="string">&#x27;PROTEIN COMPLEX&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;chembl_target_name&#x27;</span>: <span class="string">&#x27;Interleukin-23&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;chembl_target_alias&#x27;</span>: [<span class="string">&#x27;CLMF p40&#x27;</span>, <span class="string">&#x27;Cytotoxic lymphocyte maturation factor 40 kDa subunit&#x27;</span>, <span class="string">&#x27;IL12B&#x27;</span>, <span class="string">&#x27;IL-12B&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;chembl_target_organisim&#x27;</span>: <span class="string">&#x27;Homo sapiens&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;chembl_target_classification&#x27;</span>: [<span class="string">&#x27;Secreted protein&#x27;</span>, <span class="string">&#x27;Secreted protein&#x27;</span>], </span><br><span class="line">    <span class="string">&#x27;chembl_drug_name&#x27;</span>: <span class="literal">None</span>, </span><br><span class="line">    <span class="string">&#x27;chembl_drug&#x27;</span>: <span class="literal">None</span>, </span><br><span class="line">    <span class="string">&#x27;guidetopharmacology&#x27;</span>: <span class="literal">None</span>, </span><br><span class="line">    <span class="string">&#x27;human_protein_atlas&#x27;</span>: &#123;<span class="string">&#x27;EXXXXXXXXX2&#x27;</span>: <span class="string">&#x27;http://www.XXXX.org/Gene/Summary?g=EXXXXXXXXX2&#x27;</span>, </span><br><span class="line">                            <span class="string">&#x27;EXXXXXXXXX3&#x27;</span>: <span class="string">&#x27;http://www.XXXX.org/Gene/Summary?g=EXXXXXXXXX3&#x27;</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;open_targets&#x27;</span>: &#123;<span class="string">&#x27;EXXXXXXXXX2&#x27;</span>: <span class="string">&#x27;http://www.XXXX.org/Gene/Summary?g=EXXXXXXXXX2&#x27;</span>, </span><br><span class="line">                     <span class="string">&#x27;EXXXXXXXXX3&#x27;</span>: <span class="string">&#x27;http://www.XXXX.org/Gene/Summary?g=EXXXXXXXXX3&#x27;</span>&#125;, </span><br><span class="line">    <span class="string">&#x27;chembl_pharos_url&#x27;</span>: &#123;<span class="string">&#x27;Tclin&#x27;</span>: <span class="string">&#x27;https://XXXX.XXX.gov/idg/targets/QXXXX&#x27;</span>&#125;, </span><br><span class="line">    <span class="string">&#x27;ebi_chembl_url&#x27;</span>: <span class="string">&#x27;https://www.XXXX.uk/chembl/target_report_card/XXXXX/&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;raw_datas&#x27;</span>: &#123;<span class="string">&#x27;_id&#x27;</span>: <span class="string">&#x27;XXXXX&#x27;</span>, <span class="string">&#x27;_index&#x27;</span>: <span class="string">&#x27;cXXXl_XXXX_target&#x27;</span>, <span class="string">&#x27;_primary_term&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;_seq_no&#x27;</span>: <span class="number">179</span>&#125;</span><br></pre></td></tr></table></figure><p>要把这条数据库存入mysql数据库，就要先创建相关的数据表。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `表名` (</span><br><span class="line">    ......</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4;</span><br></pre></td></tr></table></figure><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>直接上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author    : RaXianch</span></span><br><span class="line"><span class="comment"># CreatDATE : 2021/4/21</span></span><br><span class="line"><span class="comment"># CreatTIME : 9:21 </span></span><br><span class="line"><span class="comment"># Blog      : https://blog.raxianch.moe/</span></span><br><span class="line"><span class="comment"># Github    : https://github.com/DeSireFire</span></span><br><span class="line">__author__ = <span class="string">&#x27;RaXianch&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">运行结果：</span></span><br><span class="line"><span class="string">CREATE TABLE `！！！！此处填写表名！！！！` (</span></span><br><span class="line"><span class="string">  `id` int(25) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;自增id(仅作计数使用不可作为关联依据！)&#x27;,</span></span><br><span class="line"><span class="string">  `chembl_id` varchar(648) NOT NULL COMMENT &#x27;chembl_id&#x27;,</span></span><br><span class="line"><span class="string">  `chembl_target_type` varchar(648) NOT NULL COMMENT &#x27;chembl_target_type&#x27;,</span></span><br><span class="line"><span class="string">  `chembl_target_name` varchar(648) NOT NULL COMMENT &#x27;chembl_target_name&#x27;,</span></span><br><span class="line"><span class="string">  `chembl_target_alias` json DEFAULT NULL COMMENT &#x27;chembl_target_alias&#x27;,</span></span><br><span class="line"><span class="string">  `chembl_target_organisim` varchar(648) NOT NULL COMMENT &#x27;chembl_target_organisim&#x27;,</span></span><br><span class="line"><span class="string">  `chembl_target_classification` json DEFAULT NULL COMMENT &#x27;chembl_target_classification&#x27;,</span></span><br><span class="line"><span class="string">  `chembl_drug_name` varchar(648) NOT NULL COMMENT &#x27;chembl_drug_name&#x27;,</span></span><br><span class="line"><span class="string">  `chembl_drug` varchar(648) NOT NULL COMMENT &#x27;chembl_drug&#x27;,</span></span><br><span class="line"><span class="string">  `guidetopharmacology` varchar(648) NOT NULL COMMENT &#x27;guidetopharmacology&#x27;,</span></span><br><span class="line"><span class="string">  `human_protein_atlas` json DEFAULT NULL COMMENT &#x27;human_protein_atlas&#x27;,</span></span><br><span class="line"><span class="string">  `open_targets` json DEFAULT NULL COMMENT &#x27;open_targets&#x27;,</span></span><br><span class="line"><span class="string">  `chembl_pharos_url` json DEFAULT NULL COMMENT &#x27;chembl_pharos_url&#x27;,</span></span><br><span class="line"><span class="string">  `ebi_chembl_url` varchar(648) NOT NULL COMMENT &#x27;ebi_chembl_url&#x27;,</span></span><br><span class="line"><span class="string">  `raw_datas` json DEFAULT NULL COMMENT &#x27;raw_datas&#x27;,</span></span><br><span class="line"><span class="string">  PRIMARY KEY (`id`) USING BTREE,</span></span><br><span class="line"><span class="string">  UNIQUE KEY `unique_id` (`id`) USING BTREE,</span></span><br><span class="line"><span class="string">  `update_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#x27;采集时间&#x27;</span></span><br><span class="line"><span class="string">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;总之就是特别牛逼的一表数据&#x27;;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dict2sqlDDL</span>(<span class="params">tempDict: <span class="built_in">dict</span></span>):</span></span><br><span class="line">    result = []</span><br><span class="line">    sql_orm = &#123;</span><br><span class="line">        <span class="string">&#x27;dict&#x27;</span>: <span class="string">&quot;  `&#123;conName&#125;` json DEFAULT NULL COMMENT &#x27;&#123;COMMENT&#125;&#x27;,&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;list&#x27;</span>: <span class="string">&quot;  `&#123;conName&#125;` json DEFAULT NULL COMMENT &#x27;&#123;COMMENT&#125;&#x27;,&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;bool&#x27;</span>: <span class="string">&quot;  `&#123;conName&#125;` varchar(648) NOT NULL COMMENT &#x27;&#123;COMMENT&#125;&#x27;,&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;NoneType&#x27;</span>: <span class="string">&quot;  `&#123;conName&#125;` json DEFAULT NULL COMMENT &#x27;&#123;COMMENT&#125;&#x27;,&quot;</span>,</span><br><span class="line">        <span class="comment"># &#x27;str&#x27;: &quot;  `&#123;conName&#125;` varchar(648) NOT NULL COMMENT &#x27;&#123;COMMENT&#125;&#x27;,&quot;,</span></span><br><span class="line">        <span class="string">&#x27;str&#x27;</span>: str_to_varchar_text_checker,</span><br><span class="line">    &#125;</span><br><span class="line">    must_sql = &#123;</span><br><span class="line">        <span class="number">0</span>: <span class="string">&quot;CREATE TABLE `！！！！此处填写表名！！！！` (&quot;</span>,</span><br><span class="line">        <span class="number">1</span>: <span class="string">&quot;  `id` int(25) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;自增id(仅作计数使用不可作为关联依据！)&#x27;,&quot;</span>,</span><br><span class="line">        <span class="string">&quot;autoEnd0&quot;</span>: <span class="string">&quot;  `update_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#x27;采集时间&#x27;,&quot;</span>,</span><br><span class="line">        <span class="string">&quot;autoEnd1&quot;</span>: <span class="string">&quot;  PRIMARY KEY (`id`) USING BTREE,&quot;</span>,</span><br><span class="line">        <span class="string">&quot;autoEnd2&quot;</span>: <span class="string">&quot;  UNIQUE KEY `unique_id` (`id`) USING BTREE,&quot;</span>,</span><br><span class="line">        <span class="string">&quot;End&quot;</span>: <span class="string">&quot;) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;总之就是特别牛逼的一表数据&#x27;;&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> tempDict.items():</span><br><span class="line">        typeStr = <span class="built_in">str</span>(<span class="built_in">type</span>(v))[<span class="number">8</span>:-<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, <span class="built_in">str</span>):</span><br><span class="line">            result.append(sql_orm[typeStr](k, v).<span class="built_in">format</span>(conName=k, COMMENT=k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(sql_orm[typeStr].<span class="built_in">format</span>(conName=k, COMMENT=k))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n, c <span class="keyword">in</span> must_sql.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(n, <span class="built_in">int</span>):</span><br><span class="line">            result.insert(n, c)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 自动添加到行数末尾</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;autoEnd&quot;</span> <span class="keyword">in</span> n:</span><br><span class="line">                result.append(c)</span><br><span class="line">            <span class="comment"># 绝对末尾</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;End&quot;</span> == n <span class="keyword">and</span> <span class="built_in">list</span>(must_sql.values()).index(c) == <span class="built_in">len</span>(<span class="built_in">list</span>(must_sql.keys()))-<span class="number">1</span>:</span><br><span class="line">                result.insert(<span class="built_in">len</span>(result), c)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;(&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> c <span class="keyword">and</span> <span class="string">&quot;)&quot;</span> <span class="keyword">in</span> c:</span><br><span class="line">            <span class="comment"># 去掉末尾逗号</span></span><br><span class="line">            <span class="keyword">if</span> result[-<span class="number">2</span>][-<span class="number">1</span>] == <span class="string">&quot;,&quot;</span>:</span><br><span class="line">                result[-<span class="number">2</span>] = result[-<span class="number">2</span>][<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> result:</span><br><span class="line">        print(line)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_to_varchar_text_checker</span>(<span class="params">tempkey:<span class="built_in">str</span>, tempStr: <span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据传入的值长短，判断sql是使用varchar还是text类型</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    resStr = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> tempStr:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;  `&#123;conName&#125;` varchar(648) DEFAULT NULL COMMENT &#x27;&#123;COMMENT&#125;&#x27;,&quot;</span></span><br><span class="line">    lenInt = <span class="built_in">len</span>(tempStr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> lenInt &lt; <span class="number">648</span>:</span><br><span class="line">        resStr = <span class="string">&quot;  `&#123;conName&#125;` varchar(648) DEFAULT NULL COMMENT &#x27;&#123;COMMENT&#125;&#x27;,&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> lenInt &gt;= <span class="number">648</span>:</span><br><span class="line">        resStr = <span class="string">&quot;  `&#123;conName&#125;` text COMMENT &#x27;&#123;COMMENT&#125;&#x27;,&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;url&quot;</span> <span class="keyword">in</span> tempkey:</span><br><span class="line">        resStr = <span class="string">&quot;  `&#123;conName&#125;` text COMMENT &#x27;&#123;COMMENT&#125;&#x27;,&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 字段名称包含id</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;_id&quot;</span> <span class="keyword">in</span> tempkey <span class="keyword">or</span> <span class="string">&quot;id&quot;</span> == tempkey:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;NOT NULL&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> resStr:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;DEFAULT NULL&quot;</span> <span class="keyword">in</span> resStr:</span><br><span class="line">                resStr = resStr.replace(<span class="string">&quot;DEFAULT NULL&quot;</span>, <span class="string">&quot;NOT NULL&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                resStr = resStr.replace(<span class="string">&quot;NULL&quot;</span>, <span class="string">&quot;NOT NULL&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resStr</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    </span><br><span class="line">    itemDict = &#123;</span><br><span class="line">    <span class="string">&#x27;chembl_id&#x27;</span>: <span class="string">&#x27;cXXXl_XXXX_target&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;chembl_target_type&#x27;</span>: <span class="string">&#x27;PROTEIN COMPLEX&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;chembl_target_name&#x27;</span>: <span class="string">&#x27;Interleukin-23&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;chembl_target_alias&#x27;</span>: [<span class="string">&#x27;CLMF p40&#x27;</span>, <span class="string">&#x27;Cytotoxic lymphocyte maturation factor 40 kDa subunit&#x27;</span>, <span class="string">&#x27;IL12B&#x27;</span>, <span class="string">&#x27;IL-12B&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;chembl_target_organisim&#x27;</span>: <span class="string">&#x27;Homo sapiens&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;chembl_target_classification&#x27;</span>: [<span class="string">&#x27;Secreted protein&#x27;</span>, <span class="string">&#x27;Secreted protein&#x27;</span>], </span><br><span class="line">    <span class="string">&#x27;chembl_drug_name&#x27;</span>: <span class="literal">None</span>, </span><br><span class="line">    <span class="string">&#x27;chembl_drug&#x27;</span>: <span class="literal">None</span>, </span><br><span class="line">    <span class="string">&#x27;guidetopharmacology&#x27;</span>: <span class="literal">None</span>, </span><br><span class="line">    <span class="string">&#x27;human_protein_atlas&#x27;</span>: &#123;<span class="string">&#x27;EXXXXXXXXX2&#x27;</span>: <span class="string">&#x27;http://www.XXXX.org/Gene/Summary?g=EXXXXXXXXX2&#x27;</span>, </span><br><span class="line">                            <span class="string">&#x27;EXXXXXXXXX3&#x27;</span>: <span class="string">&#x27;http://www.XXXX.org/Gene/Summary?g=EXXXXXXXXX3&#x27;</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;open_targets&#x27;</span>: &#123;<span class="string">&#x27;EXXXXXXXXX2&#x27;</span>: <span class="string">&#x27;http://www.XXXX.org/Gene/Summary?g=EXXXXXXXXX2&#x27;</span>, </span><br><span class="line">                     <span class="string">&#x27;EXXXXXXXXX3&#x27;</span>: <span class="string">&#x27;http://www.XXXX.org/Gene/Summary?g=EXXXXXXXXX3&#x27;</span>&#125;, </span><br><span class="line">    <span class="string">&#x27;chembl_pharos_url&#x27;</span>: &#123;<span class="string">&#x27;Tclin&#x27;</span>: <span class="string">&#x27;https://XXXX.XXX.gov/idg/targets/QXXXX&#x27;</span>&#125;, </span><br><span class="line">    <span class="string">&#x27;ebi_chembl_url&#x27;</span>: <span class="string">&#x27;https://www.XXXX.uk/chembl/target_report_card/XXXXX/&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;raw_datas&#x27;</span>: &#123;<span class="string">&#x27;_id&#x27;</span>: <span class="string">&#x27;XXXXX&#x27;</span>, <span class="string">&#x27;_index&#x27;</span>: <span class="string">&#x27;cXXXl_XXXX_target&#x27;</span>, <span class="string">&#x27;_primary_term&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;_seq_no&#x27;</span>: <span class="number">179</span>&#125;</span><br><span class="line">    </span><br><span class="line">    dict2sqlDDL(itemDict)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CREATE TABLE `！！！！此处填写表名！！！！` (</span><br><span class="line">  `id` int(25) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;自增id(仅作计数使用不可作为关联依据！)&#x27;,</span><br><span class="line">  `chembl_id` varchar(648) NOT NULL COMMENT &#x27;chembl_id&#x27;,</span><br><span class="line">  `chembl_target_type` varchar(648) NOT NULL COMMENT &#x27;chembl_target_type&#x27;,</span><br><span class="line">  `chembl_target_name` varchar(648) NOT NULL COMMENT &#x27;chembl_target_name&#x27;,</span><br><span class="line">  `chembl_target_alias` json DEFAULT NULL COMMENT &#x27;chembl_target_alias&#x27;,</span><br><span class="line">  `chembl_target_organisim` varchar(648) NOT NULL COMMENT &#x27;chembl_target_organisim&#x27;,</span><br><span class="line">  `chembl_target_classification` json DEFAULT NULL COMMENT &#x27;chembl_target_classification&#x27;,</span><br><span class="line">  `chembl_drug_name` varchar(648) NOT NULL COMMENT &#x27;chembl_drug_name&#x27;,</span><br><span class="line">  `chembl_drug` varchar(648) NOT NULL COMMENT &#x27;chembl_drug&#x27;,</span><br><span class="line">  `guidetopharmacology` varchar(648) NOT NULL COMMENT &#x27;guidetopharmacology&#x27;,</span><br><span class="line">  `human_protein_atlas` json DEFAULT NULL COMMENT &#x27;human_protein_atlas&#x27;,</span><br><span class="line">  `open_targets` json DEFAULT NULL COMMENT &#x27;open_targets&#x27;,</span><br><span class="line">  `chembl_pharos_url` json DEFAULT NULL COMMENT &#x27;chembl_pharos_url&#x27;,</span><br><span class="line">  `ebi_chembl_url` varchar(648) NOT NULL COMMENT &#x27;ebi_chembl_url&#x27;,</span><br><span class="line">  `raw_datas` json DEFAULT NULL COMMENT &#x27;raw_datas&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE,</span><br><span class="line">  UNIQUE KEY `unique_id` (`id`) USING BTREE,</span><br><span class="line">  `update_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#x27;采集时间&#x27;</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;总之就是特别牛逼的一表数据&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接复制下来，放入navicat即可。</p><p><img src= "/customize/img/loading.gif" data-lazy-src="%E9%80%9A%E8%BF%87python%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90mysql%E5%BB%BA%E8%A1%A8sql%E8%AF%AD%E5%8F%A5/984236ce.png"></p><p><img src= "/customize/img/loading.gif" data-lazy-src="%E9%80%9A%E8%BF%87python%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90mysql%E5%BB%BA%E8%A1%A8sql%E8%AF%AD%E5%8F%A5/2d4429c7.png"></p><p>Navicat 运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `test_demo` (</span><br><span class="line">  `id` int(25) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;自增id(仅作计数使用不可作为关联依据！)&#x27;,</span><br><span class="line">  `chembl_id` varchar(648) NOT NULL COMMENT &#x27;chembl_id&#x27;,</span><br><span class="line">  `chembl_target_type` varchar(648) DEFAULT NULL COMMENT &#x27;chembl_target_type&#x27;,</span><br><span class="line">  `chembl_target_name` varchar(648) DEFAULT NULL COMMENT &#x27;chembl_target_name&#x27;,</span><br><span class="line">  `chembl_target_alias` json DEFAULT NULL COMMENT &#x27;chembl_target_alias&#x27;,</span><br><span class="line">  `chembl_target_organisim` varchar(648) DEFAULT NULL COMMENT &#x27;chembl_target_organisim&#x27;,</span><br><span class="line">  `chembl_target_classification` json DEFAULT NULL COMMENT &#x27;chembl_target_classification&#x27;,</span><br><span class="line">  `chembl_drug_name` json DEFAULT NULL COMMENT &#x27;chembl_drug_name&#x27;,</span><br><span class="line">  `chembl_drug` json DEFAULT NULL COMMENT &#x27;chembl_drug&#x27;,</span><br><span class="line">  `guidetopharmacology` json DEFAULT NULL COMMENT &#x27;guidetopharmacology&#x27;,</span><br><span class="line">  `human_protein_atlas` json DEFAULT NULL COMMENT &#x27;human_protein_atlas&#x27;,</span><br><span class="line">  `open_targets` json DEFAULT NULL COMMENT &#x27;open_targets&#x27;,</span><br><span class="line">  `chembl_pharos_url` json DEFAULT NULL COMMENT &#x27;chembl_pharos_url&#x27;,</span><br><span class="line">  `ebi_chembl_url` text COMMENT &#x27;ebi_chembl_url&#x27;,</span><br><span class="line">  `raw_datas` json DEFAULT NULL COMMENT &#x27;raw_datas&#x27;,</span><br><span class="line">  `update_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#x27;采集时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE,</span><br><span class="line">  UNIQUE KEY `unique_id` (`id`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;总之就是特别牛逼的一表数据&#x27;</span><br><span class="line">&gt; OK</span><br><span class="line">&gt; 时间: 0.073s</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>代码总归是写得比较死的，不适合所有的场景，但是生成出来以后，删着改，总比从0开始去写要方便多了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> navicat </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navicat 看历史执行SQL</title>
      <link href="article/2124605906/"/>
      <url>article/2124605906/</url>
      
        <content type="html"><![CDATA[<p>navicat 有些危险操作是没有二次确认的，实施误操作以后如何追述问题，就需要查询历史记录。</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">navicat: 15.0.2  </span><br><span class="line">mysql: 5.7.31</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Navicat 有些危险操作是没有二次确认的，实施误操作以后如何追述问题，就需要查询历史记录。</p><p>Navicat 新建查询写好的sql语句，如果窗口关闭，查询里面的sql语句就会清空（不专门保存文件的话），就需要查询历史记录。</p><h1 id="Navicat-查看操作历史"><a href="#Navicat-查看操作历史" class="headerlink" title="Navicat 查看操作历史"></a>Navicat 查看操作历史</h1><p>按图打开历史记录，或者快捷键 ctr+l</p><p><img src= "/customize/img/loading.gif" data-lazy-src="Navicat%E7%9C%8B%E5%8E%86%E5%8F%B2%E6%89%A7%E8%A1%8CSQL/c7be353a.png"></p><p>翻看历史，查找自己需要的信息，或输入搜索查找相关信息</p><p><img src= "/customize/img/loading.gif" data-lazy-src="Navicat%E7%9C%8B%E5%8E%86%E5%8F%B2%E6%89%A7%E8%A1%8CSQL/67118c65.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> navicat </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL数据库Specified key was too long; max key length is xxx bytes,解决方案</title>
      <link href="article/2646095202/"/>
      <url>article/2646095202/</url>
      
        <content type="html"><![CDATA[<p>给MySql数据库表Varchar类型字段加索引时报错：“Specified key was too long; max key length is xxx bytes”；</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">navicat: 15.0.2  </span><br><span class="line">mysql: 5.7.31</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>scrapy 爬虫采集入库的时候，管道打印了报错日志。</p><p>给MySql数据库表Varchar类型字段加索引时报错：“Specified key was too long; max key length is xxx bytes”；</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“Specified key was too long; max key length is xxx bytes”；</span><br></pre></td></tr></table></figure><h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>采集的时候入库的有关字段是用来存储url链接的，但是采集的数据，惊人的给我返回了3742字节长度的一条url链接。</p><p>这样的长度，确实不是年幼的varchar类型所能承受的(?)。</p><p>应该使用更能适应场景text类型，来存储url。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>修改字段长度，注意编码格式，例如你的字段长度为100（指的是字符数），而编码是utf-8.</p><p>那么最大占用3乘100=300 byte，如果编码是utf8mb4则最大占用4乘100=400 byte。</p><p>所以修改字段长度时要根据报错提示的长度以及你字段的长度和编码来修改；</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 疑难杂症 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql设置自动更新时间&amp;创建时间</title>
      <link href="article/1404601960/"/>
      <url>article/1404601960/</url>
      
        <content type="html"><![CDATA[<p>scrapy item是可以不包含mysql自生成字段的。用sql自带的时间创建，可以省很多事，在数据更新判断上也交由数据库自己来判断。</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">navicat: 15.0.2  </span><br><span class="line">mysql: 5.7.31</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>scrapy item是可以不包含mysql自生成字段的。</p><p>用sql自带的时间创建，可以省很多事，在数据更新判断上也交由数据库自己来判断。</p><p>采集数据的时候，设置创建时间和更新时间，可更方便的定位数据的生产信息。</p><h1 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h1><p>假设建表包括如下字段：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id：自增主键ID</span><br><span class="line">create_time: 创建时间</span><br><span class="line">update_time: 修改时间</span><br></pre></td></tr></table></figure><p>需求：</p><p>如何创建table可以使得，</p><p>在插入记录时create_time、update_time默认为当前时间；</p><p>在修改记录时update_time自动更新为当前时间？</p><h1 id="sql-建表法"><a href="#sql-建表法" class="headerlink" title="sql 建表法"></a>sql 建表法</h1><p>sql建表语句：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `time_test` (</span><br><span class="line">  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;主键ID&#x27;,</span><br><span class="line">  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;time_test&#x27;;</span><br></pre></td></tr></table></figure><h1 id="navicat-设置法"><a href="#navicat-设置法" class="headerlink" title="navicat 设置法"></a>navicat 设置法</h1><p>选择对应数据表，右键菜单设计表：<br><img src= "/customize/img/loading.gif" data-lazy-src="Mysql%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E6%97%B6%E9%97%B4&%E5%88%9B%E5%BB%BA%E6%97%B6%E9%97%B4/915c8385.png"></p><p>找到相应字段，按照图设置即可<br><img src= "/customize/img/loading.gif" data-lazy-src="Mysql%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E6%97%B6%E9%97%B4&%E5%88%9B%E5%BB%BA%E6%97%B6%E9%97%B4/5f2c3319.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>烂笔头系列，是简单的操作，但是自己记一轮下来就是自己的东西了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> navicat </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql中ERROR 1364 (HY000): Field &#39;xxxx&#39; doesn&#39;t have a default value的解决方案</title>
      <link href="article/2414690755/"/>
      <url>article/2414690755/</url>
      
        <content type="html"><![CDATA[<p>开发了一个自动生成建表语句的python小程序，用生成好的数据表插入数据，发现了问题。</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">navicat: 15.0.2  </span><br><span class="line">mysql: 5.7.31</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>scrapy 爬虫采集入库的时候，管道打印了报错日志。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1364 (HY000): Field &#x27;chembl_id&#x27; doesn&#x27;t have a default value</span><br></pre></td></tr></table></figure><h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>建表的sql语句中，chembl_id字段设置NOT NULL，不能为空，也没赋予默认值。</p><p>导致的报错！</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `！！！！此处填写表名！！！！` (</span><br><span class="line">  `id` int(25) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;自增id(仅作计数使用不可作为关联依据！)&#x27;,</span><br><span class="line">  `chembl_id` varchar(648) NOT NULL COMMENT &#x27;chembl_id&#x27;,</span><br><span class="line">  `chembl_target_type` varchar(648) DEFAULT NULL COMMENT &#x27;chembl_target_type&#x27;,</span><br><span class="line">  `chembl_target_name` varchar(648) DEFAULT NULL COMMENT &#x27;chembl_target_name&#x27;,</span><br><span class="line">  `chembl_target_alias` json DEFAULT NULL COMMENT &#x27;chembl_target_alias&#x27;,</span><br><span class="line">  `chembl_target_organisim` varchar(648) DEFAULT NULL COMMENT &#x27;chembl_target_organisim&#x27;,</span><br><span class="line">  `chembl_target_classification` json DEFAULT NULL COMMENT &#x27;chembl_target_classification&#x27;,</span><br><span class="line">  `chembl_drug_name` json DEFAULT NULL COMMENT &#x27;chembl_drug_name&#x27;,</span><br><span class="line">  `chembl_drug` json DEFAULT NULL COMMENT &#x27;chembl_drug&#x27;,</span><br><span class="line">  `guidetopharmacology` json DEFAULT NULL COMMENT &#x27;guidetopharmacology&#x27;,</span><br><span class="line">  `human_protein_atlas` json DEFAULT NULL COMMENT &#x27;human_protein_atlas&#x27;,</span><br><span class="line">  `open_targets` json DEFAULT NULL COMMENT &#x27;open_targets&#x27;,</span><br><span class="line">  `chembl_pharos_url` json DEFAULT NULL COMMENT &#x27;chembl_pharos_url&#x27;,</span><br><span class="line">  `ebi_chembl_url` text COMMENT &#x27;ebi_chembl_url&#x27;,</span><br><span class="line">  `raw_datas` json DEFAULT NULL COMMENT &#x27;raw_datas&#x27;,</span><br><span class="line">  `update_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#x27;采集时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE,</span><br><span class="line">  UNIQUE KEY `unique_id` (`id`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;总之就是特别牛逼的一表数据&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>将对应语句的NOT NULL改为DEFAULT NULL即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`chembl_id` varchar(648) DEFAULT NULL COMMENT <span class="string">&#x27;chembl_id&#x27;</span>,</span><br></pre></td></tr></table></figure><p>但是要结合业务场景，如果是为了建立索引的字段，那就要看具体情况来修改了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 疑难杂症 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL Charset--UTF8和UTF8MB4的区别</title>
      <link href="article/2685378097/"/>
      <url>article/2685378097/</url>
      
        <content type="html"><![CDATA[<p>某日，数据库建表的时候，我开始好奇mysql的charset编码设置参数。uft8和utf8mb4有啥区别呢？</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">navicat: 15.0.2  </span><br><span class="line">mysql: 5.7.31</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>某日，数据库建表的时候，我开始好奇mysql的charset编码设置参数。</p><p>uft8和utf8mb4有啥区别，谁更有优势呢？</p><h1 id="UTF8和UTF8MB4"><a href="#UTF8和UTF8MB4" class="headerlink" title="UTF8和UTF8MB4"></a>UTF8和UTF8MB4</h1><p>在早期MySQL版本中，使用只支持最长三字节的UTF8字符集便可以存放所有Unicode字符。</p><p>随着Unicode的完善，Unicode字符集收录的字符数量越来越多，最新版本的UTF8需要使用1到4个字节来存放Unicode字符，而MySQL为保持版本兼容，</p><p>依旧使用最多3字节的UTF8字符集，并在MySQL 5.5.3版本引入UTF8MB4字符集来支持4字节的Unicode字符。</p><h1 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h1><p>汉字 ‘𤋮’ 和 ‘ 𤋮 ‘ 是异体字，读音均为xi，但两个字的unicode不同：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">𤋮 对应的UNICODE是 \ud850\udeee; </span><br><span class="line">𤋮 对应的UTF8是 &amp;#xD850;&amp;#xDEEE;</span><br><span class="line">𤋮 对应的HEX编码是  %f0%a4%8b%ae</span><br><span class="line">熙 对应的UNICODE是 \u7199 </span><br><span class="line">熙 对应的UTF8是 &amp;#x7199;</span><br><span class="line">熙 对应的HEX编码是 %e7%86%99</span><br></pre></td></tr></table></figure><h1 id="charset-UTF8-测试"><a href="#charset-UTF8-测试" class="headerlink" title="charset UTF8 测试"></a>charset UTF8 测试</h1><p>创建测试表:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `test_table` (</span><br><span class="line">  `ID` INT(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `test1` VARBINARY(100) DEFAULT NULL,</span><br><span class="line">  `test2` VARCHAR(100) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`ID`)</span><br><span class="line">) ENGINE=INNODB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4</span><br></pre></td></tr></table></figure><p>UTF8字符集测试:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SET NAMES utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO test_table(test1,test2)</span><br><span class="line">SELECT &#x27;熙&#x27;,&#x27;熙&#x27;;</span><br><span class="line">INSERT INTO test_table(test1,test2)</span><br><span class="line">SELECT &#x27;𤋮&#x27;,&#x27;𤋮&#x27;;</span><br><span class="line"></span><br><span class="line">SELECT * FROM test_table;</span><br></pre></td></tr></table></figure><p>执行第一条INSERT有警告信息：<br><img src= "/customize/img/loading.gif" data-lazy-src="MySQL%E7%9A%84Charset--UTF8%E5%92%8CUTF8MB4%E7%9A%84%E5%8C%BA%E5%88%AB/3dae1f45.png"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SET NAMES utf8</span><br><span class="line">&gt; OK</span><br><span class="line">&gt; 时间: 0.004s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO test_table(test1,test2)</span><br><span class="line">SELECT &#x27;熙&#x27;,&#x27;熙&#x27;</span><br><span class="line">&gt; Affected rows: 1</span><br><span class="line">&gt; 时间: 0.012s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO test_table(test1,test2)</span><br><span class="line">SELECT &#x27;𤋮&#x27;,&#x27;𤋮&#x27;</span><br><span class="line">&gt; 1366 - Incorrect string value: &#x27;\xF0\xA4\x8B\xAE&#x27; for column &#x27;test2&#x27; at row 1</span><br><span class="line">&gt; 时间: 0.004s</span><br></pre></td></tr></table></figure><p>查询结果：</p><p><img src= "/customize/img/loading.gif" data-lazy-src="MySQL%E7%9A%84Charset--UTF8%E5%92%8CUTF8MB4%E7%9A%84%E5%8C%BA%E5%88%AB/2978cbc2.png"></p><p>异体字那一行数据，写都写球不上去， 在UTF8字符集，VARCHAR类型”无法支持“四字节的”𤋮”，但VARBINARY不受字符集影响。</p><h1 id="charset-UTF8MB4-测试"><a href="#charset-UTF8MB4-测试" class="headerlink" title="charset UTF8MB4 测试:"></a>charset UTF8MB4 测试:</h1><p>UTF8MB4字符集测试:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SET NAMES utf8mb4;</span><br><span class="line"></span><br><span class="line">INSERT INTO test_table(test1,test2)</span><br><span class="line">SELECT &#x27;𤋮&#x27;,&#x27;𤋮&#x27;;</span><br><span class="line"></span><br><span class="line">INSERT INTO test_table(test1,test2)</span><br><span class="line">SELECT &#x27;熙&#x27;,&#x27;熙&#x27;;</span><br><span class="line"></span><br><span class="line">SELECT * FROM test_table;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src= "/customize/img/loading.gif" data-lazy-src="MySQL%E7%9A%84Charset--UTF8%E5%92%8CUTF8MB4%E7%9A%84%E5%8C%BA%E5%88%AB/8e3654c8.png"></p><p>执行顺利，大便通畅.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">SET NAMES utf8mb4</span><br><span class="line">&gt; OK</span><br><span class="line">&gt; 时间: 0.004s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO test_table(test1,test2)</span><br><span class="line">SELECT &#x27;𤋮&#x27;,&#x27;𤋮&#x27;</span><br><span class="line">&gt; Affected rows: 1</span><br><span class="line">&gt; 时间: 0.019s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO test_table(test1,test2)</span><br><span class="line">SELECT &#x27;熙&#x27;,&#x27;熙&#x27;</span><br><span class="line">&gt; Affected rows: 1</span><br><span class="line">&gt; 时间: 0.017s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT * FROM test_table</span><br><span class="line">&gt; OK</span><br><span class="line">&gt; 时间: 0.004s</span><br></pre></td></tr></table></figure><p>查询结果：</p><p><img src= "/customize/img/loading.gif" data-lazy-src="MySQL%E7%9A%84Charset--UTF8%E5%92%8CUTF8MB4%E7%9A%84%E5%8C%BA%E5%88%AB/efb0a27c.png"></p><p>显示结果也不尽如人意。不过至少可以把数据存入数据库当中，而不是前者根本存不进去。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>UTF8MB4适用场景更加大一些，能确保数据能入库。</p><p>但是不管 UTF8MB4还是UTF8 在特殊字符、表情符号、生僻字的话，无论是哪种编码，入库的时候都会存在乱码问题。</p><p>这些类型的数据在入库是要注意躲坑了。</p><p>要保证数据库正常存储4字节的表情符合生僻字，除将数据库相关表和列设置为UTF8MB4外，</p><p>还需要确保操作数据库时使用UTF8MB4，需重点关注以下几个方面：</p><p>1、数据库启动配置参数</p><p>2、应用与数据库连接配置</p><p>3、DBA日常运维操作</p><p>DBA操作过程中，使用mysql客户端连接到数据库执行操作，</p><p>而mysql客户端可能使用默认UTF8字符集(default-character-set)，导出乱码问题。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> navicat </tag>
            
            <tag> Mysql </tag>
            
            <tag> charset </tag>
            
            <tag> utf8mb4 </tag>
            
            <tag> utf8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python如何判断文件是否存在？</title>
      <link href="article/3659666415/"/>
      <url>article/3659666415/</url>
      
        <content type="html"><![CDATA[<p>Python如何判断文件是否存在？</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2021.3.1 x64  </span><br><span class="line">语言: python v3.9.1</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>平时在读写文件之前，需要判断文件或目录是否存在，不然在某些情况下，可能会使程序发生错误。</p><p>所以最好在做任何操作之前，先判断文件是否存在。</p><p>按照使用频率，排个序大概有以下几种方式。</p><h1 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h1><p>os模块中的 <strong>os.path.exists()</strong> 方法用于检验文件或者文件夹是否存在。</p><h2 id="判断文件是否存在"><a href="#判断文件是否存在" class="headerlink" title="判断文件是否存在"></a>判断文件是否存在</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.path.exists(<span class="string">&quot;README.md&quot;</span>)</span><br><span class="line"><span class="comment"># 输出 True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 放入根本不存在的文件名时</span></span><br><span class="line">os.path.exists(<span class="string">&quot;README_XXXXX.md&quot;</span>)</span><br><span class="line"><span class="comment"># 输出 False</span></span><br></pre></td></tr></table></figure><h2 id="判断文件夹是否存在"><a href="#判断文件夹是否存在" class="headerlink" title="判断文件夹是否存在"></a>判断文件夹是否存在</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.path.exists(<span class="string">&quot;test_dir&quot;</span>)</span><br><span class="line"><span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 放入根本不存在的文件夹名称</span></span><br><span class="line">os.path.exists(<span class="string">&quot;None_dir&quot;</span>)</span><br><span class="line"><span class="comment">#False</span></span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><strong>os.path.exists()</strong> 存在误判，</p><p>假设你想检查文件“test_data”是否存在，</p><p>但是当前路径下有个叫“test_data”的文件夹，</p><p>这样就可能出现误判。</p><p>所以，就多一层逻辑，用于检查是否为文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.path.isfile(<span class="string">&quot;README.md&quot;</span>)</span><br><span class="line"><span class="comment"># 输出 True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 放入的是文件夹则</span></span><br><span class="line">os.path.isfile(<span class="string">&quot;test_dir&quot;</span>)</span><br><span class="line"><span class="comment"># 输出 False</span></span><br></pre></td></tr></table></figure><p>通过这个方法，如果文件”test_dir”不存在将返回False，</p><p>反之返回True。</p><p>即是文件存在，你可能还需要判断文件是否可进行读写操作。</p><h2 id="判断文件是否有读写权限"><a href="#判断文件是否有读写权限" class="headerlink" title="判断文件是否有读写权限"></a>判断文件是否有读写权限</h2><p>使用os.access()方法判断文件是否可进行读写操作</p><p>语法:</p><blockquote><p>os.access(path, mode)</p></blockquote><p>path为文件路径,传入参数类型为字符串，mode为操作模式，</p><p>有这么几种:</p><p>os.F_OK: 检查文件是否存在;</p><p>os.R_OK: 检查文件是否可读;</p><p>os.W_OK: 检查文件是否可以写入;</p><p>os.X_OK: 检查文件是否可以执行</p><p>该方法通过判断文件路径是否存在和各种访问模式的权限，</p><p>返回True或者False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">if</span> os.access(<span class="string">&quot;/file/path/foo.txt&quot;</span>, os.F_OK):</span><br><span class="line">    print(<span class="string">&quot;Given file path is exist.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.access(<span class="string">&quot;/file/path/foo.txt&quot;</span>, os.R_OK):</span><br><span class="line">    print(<span class="string">&quot;File is accessible to read&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.access(<span class="string">&quot;/file/path/foo.txt&quot;</span>, os.W_OK):</span><br><span class="line">    print(<span class="string">&quot;File is accessible to write&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.access(<span class="string">&quot;/file/path/foo.txt&quot;</span>, os.X_OK):</span><br><span class="line">    print(<span class="string">&quot;File is accessible to execute&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="Try异常抓取判断"><a href="#Try异常抓取判断" class="headerlink" title="Try异常抓取判断"></a>Try异常抓取判断</h1><p>可以在程序中直接使用open()方法来检查文件是否存在和可读写。</p><p>语法：</p><blockquote><p>open() or with open()</p></blockquote><p>如果你open的文件不存在，程序会抛出错误，</p><p>使用try语句来捕获这个错误。</p><p>程序无法访问文件，可能有很多原因：</p><p>如果你open的文件不存在，将抛出一个FileNotFoundError的异常;</p><p>文件存在，但是没有权限访问，会抛出一个PersmissionError的异常。</p><p>通过异常名称的特点，便可以使用下面的代码来判断文件是否存在:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f =<span class="built_in">open</span>()</span><br><span class="line">    f.close()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;File is not found.&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> PermissionError:</span><br><span class="line">    <span class="built_in">print</span>（<span class="string">&quot;You don&#x27;t have permission to access this file.&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> IOError:</span><br><span class="line">    print(<span class="string">&quot;File is not accessible.&quot;</span>)</span><br></pre></td></tr></table></figure><p>IOError 异常的抓取范围较大，一般放在最后，只要抓到保存，基本说明文件不存在或者不可用了。</p><h1 id="pathlib模块"><a href="#pathlib模块" class="headerlink" title="pathlib模块"></a>pathlib模块</h1><p>pathlib模块在Python3版本中是内建模块，</p><p>但是在Python2中是需要单独安装三方模块。</p><p>使用pathlib需要先使用文件路径来创建path对象。</p><p>此路径可以是文件名或目录路径。</p><h2 id="检查路径是否存在"><a href="#检查路径是否存在" class="headerlink" title="检查路径是否存在"></a>检查路径是否存在</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path = pathlib.Path(<span class="string">&quot;path/file&quot;</span>)</span><br><span class="line">path.exist()</span><br></pre></td></tr></table></figure><h2 id="检查路径是否是文件"><a href="#检查路径是否是文件" class="headerlink" title="检查路径是否是文件"></a>检查路径是否是文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path = pathlib.Path(<span class="string">&quot;path/file&quot;</span>)</span><br><span class="line">path.is_file()</span><br></pre></td></tr></table></figure><p>与OS模块的用法类似。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这其实是个很简单的东西，</p><p>平时开发的时候，</p><p>你也许知道有那么个方法可以去实现这样的功能，</p><p>但是，却不一定记得住具体的方法名叫啥，</p><p>于是就有需要重新查一下。</p><p>那么干脆在自己的博客，留个笔记好了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy全局setting各项配置的说明</title>
      <link href="article/4252984638/"/>
      <url>article/4252984638/</url>
      
        <content type="html"><![CDATA[<p>scrapy全局setting各项配置的说明</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2021.3.1 x64  </span><br><span class="line">语言: python v3.9.1</span><br><span class="line">框架: Scrapy</span><br></pre></td></tr></table></figure><hr><h1 id="AUTOTHROTTLE-START-DELAY"><a href="#AUTOTHROTTLE-START-DELAY" class="headerlink" title="AUTOTHROTTLE_START_DELAY"></a>AUTOTHROTTLE_START_DELAY</h1><pre><code>AUTOTHROTTLE_START_DELAY = 3开始下载时限速并延迟时间</code></pre><h1 id="AUTOTHROTTLE-MAX-DELAY"><a href="#AUTOTHROTTLE-MAX-DELAY" class="headerlink" title="AUTOTHROTTLE_MAX_DELAY"></a>AUTOTHROTTLE_MAX_DELAY</h1><pre><code>AUTOTHROTTLE_MAX_DELAY = 60高并发请求时最大延迟时间</code></pre><h1 id="AWS-ACCESS-KEY-ID"><a href="#AWS-ACCESS-KEY-ID" class="headerlink" title="AWS_ACCESS_KEY_ID"></a>AWS_ACCESS_KEY_ID</h1><pre><code>AWS_ACCESS_KEY_ID它是用于访问亚马逊网络服务。默认值：无</code></pre><h1 id="AWS-SECRET-ACCESS-KEY"><a href="#AWS-SECRET-ACCESS-KEY" class="headerlink" title="AWS_SECRET_ACCESS_KEY"></a>AWS_SECRET_ACCESS_KEY</h1><pre><code>AWS_SECRET_ACCESS_KEY它是用于访问亚马逊网络服务。</code></pre><h1 id="BOT-NAME"><a href="#BOT-NAME" class="headerlink" title="BOT_NAME"></a>BOT_NAME</h1><pre><code>BOT_NAME它是一种可以用于构建用户代理机器人的名称。默认值：“scrapybot”eg:BOT_NAME=“scrapybot”</code></pre><h1 id="CONCURRENT-ITEMS"><a href="#CONCURRENT-ITEMS" class="headerlink" title="CONCURRENT_ITEMS"></a>CONCURRENT_ITEMS</h1><pre><code>CONCURRENT_ITEMS在用来并行地处理所述物品处理器的现有项目的最大数目。默认 Item 并发数：100</code></pre><h1 id="CONCURRENT-REQUESTS"><a href="#CONCURRENT-REQUESTS" class="headerlink" title="CONCURRENT_REQUESTS"></a>CONCURRENT_REQUESTS</h1><pre><code>CONCURRENT_REQUESTS其中Scrapy下载执行现有的最大请求数。默认值：16并发是指scrapy同时处理的request的数量，默认的全局并发限制为16，可增加这个值，增加多少取决于爬虫占CPU多少，设置前最好测试一下，一般占在80-90%为好</code></pre><h1 id="CONCURRENT-REQUESTS-PER-DOMAIN"><a href="#CONCURRENT-REQUESTS-PER-DOMAIN" class="headerlink" title="CONCURRENT_REQUESTS_PER_DOMAIN"></a>CONCURRENT_REQUESTS_PER_DOMAIN</h1><pre><code>CONCURRENT_REQUESTS_PER_DOMAIN现有的最大请求数，对于任何单域同时进行。默认值：8</code></pre><h1 id="CONCURRENT-REQUESTS-PER-IP"><a href="#CONCURRENT-REQUESTS-PER-IP" class="headerlink" title="CONCURRENT_REQUESTS_PER_IP"></a>CONCURRENT_REQUESTS_PER_IP</h1><pre><code>CONCURRENT_REQUESTS_PER_IP现有的请求的最大数量的同时执行任何单一的IP。默认值：0(0表示忽略)</code></pre><h1 id="COOKIES-ENABLED-False"><a href="#COOKIES-ENABLED-False" class="headerlink" title="COOKIES_ENABLED = False"></a>COOKIES_ENABLED = False</h1><pre><code>COOKIES_ENABLED = False禁止cookies，有些站点会从cookies中判断是否为爬虫</code></pre><h1 id="DEFAULT-ITEM-CLASS"><a href="#DEFAULT-ITEM-CLASS" class="headerlink" title="DEFAULT_ITEM_CLASS"></a>DEFAULT_ITEM_CLASS</h1><pre><code>DEFAULT_ITEM_CLASS它是用来表示一个数据单项。默认值：“scrapy.item.Item”</code></pre><h1 id="DEFAULT-REQUEST-HEADERS"><a href="#DEFAULT-REQUEST-HEADERS" class="headerlink" title="DEFAULT_REQUEST_HEADERS"></a>DEFAULT_REQUEST_HEADERS</h1><pre><code>DEFAULT_REQUEST_HEADERS它是用于Scrapy的HTTP请求的默认标题。默认值：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>:<span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="DEPTH-LIMIT"><a href="#DEPTH-LIMIT" class="headerlink" title="DEPTH_LIMIT"></a>DEPTH_LIMIT</h1><pre><code>因为蜘蛛的最大深度抓取任何网站。默认值：0爬取网站最大允许的深度(depth)值。如果为0，则没有限制</code></pre><h1 id="DEPTH-PRIORITY"><a href="#DEPTH-PRIORITY" class="headerlink" title="DEPTH_PRIORITY"></a>DEPTH_PRIORITY</h1><pre><code>整数值。用于根据深度调整request优先级。如果为0，则不根据深度进行优先级调整。默认值：0</code></pre><h1 id="DEPTH-STATS"><a href="#DEPTH-STATS" class="headerlink" title="DEPTH_STATS"></a>DEPTH_STATS</h1><pre><code>它指出是否收集详细的统计资料与否。默认值：True</code></pre><h1 id="DEPTH-STATS-VERBOSE"><a href="#DEPTH-STATS-VERBOSE" class="headerlink" title="DEPTH_STATS_VERBOSE"></a>DEPTH_STATS_VERBOSE</h1><pre><code>当启用此设置，请求数统计中的每个详细深入的收集。默认值：False</code></pre><h1 id="DNSCACHE-ENABLED"><a href="#DNSCACHE-ENABLED" class="headerlink" title="DNSCACHE_ENABLED"></a>DNSCACHE_ENABLED</h1><pre><code>它是用来启用内存缓存DNS。默认值：True</code></pre><h1 id="DNSCACHE-SIZE"><a href="#DNSCACHE-SIZE" class="headerlink" title="DNSCACHE_SIZE"></a>DNSCACHE_SIZE</h1><pre><code>它定义了在内存中缓存DNS的大小。默认值：10000</code></pre><h1 id="DNS-TIMEOUT"><a href="#DNS-TIMEOUT" class="headerlink" title="DNS_TIMEOUT"></a>DNS_TIMEOUT</h1><pre><code>它是用来设置超时DNS处理的查询。默认值：60</code></pre><h1 id="DOWNLOADER"><a href="#DOWNLOADER" class="headerlink" title="DOWNLOADER"></a>DOWNLOADER</h1><pre><code>它是用来抓取过程中下载。默认值：“scrapy.core.downloader.Downloader”</code></pre><h1 id="DOWNLOADER-MIDDLEWARES"><a href="#DOWNLOADER-MIDDLEWARES" class="headerlink" title="DOWNLOADER_MIDDLEWARES"></a>DOWNLOADER_MIDDLEWARES</h1><pre><code>这是字典类型，保存下载中间件及其运行先后顺序。默认值： &#123;&#125;它是用于Scrapy的HTTP请求的默认标题。默认值：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&#x27;scrapy.downloadermiddlewares.robotstxt.RobotsTxtMiddleware&#x27;</span>: <span class="number">100</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.downloadermiddlewares.httpauth.HttpAuthMiddleware&#x27;</span>: <span class="number">300</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.downloadermiddlewares.downloadtimeout.DownloadTimeoutMiddleware&#x27;</span>: <span class="number">350</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.downloadermiddlewares.useragent.UserAgentMiddleware&#x27;</span>: <span class="number">400</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.downloadermiddlewares.retry.RetryMiddleware&#x27;</span>: <span class="number">500</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware&#x27;</span>: <span class="number">550</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.downloadermiddlewares.redirect.MetaRefreshMiddleware&#x27;</span>: <span class="number">580</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware&#x27;</span>: <span class="number">590</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.downloadermiddlewares.redirect.RedirectMiddleware&#x27;</span>: <span class="number">600</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.downloadermiddlewares.cookies.CookiesMiddleware&#x27;</span>: <span class="number">700</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware&#x27;</span>: <span class="number">750</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.downloadermiddlewares.chunked.ChunkedTransferMiddleware&#x27;</span>: <span class="number">830</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.downloadermiddlewares.stats.DownloaderStats&#x27;</span>: <span class="number">850</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.downloadermiddlewares.httpcache.HttpCacheMiddleware&#x27;</span>: <span class="number">900</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="DOWNLOADER-STATS"><a href="#DOWNLOADER-STATS" class="headerlink" title="DOWNLOADER_STATS"></a>DOWNLOADER_STATS</h1><pre><code>此设置用于启用下载统计。默认值：True</code></pre><h1 id="DOWNLOAD-DELAY"><a href="#DOWNLOAD-DELAY" class="headerlink" title="DOWNLOAD_DELAY"></a>DOWNLOAD_DELAY</h1><pre><code>它定义的总时间下载它从下载网站的网页之前。默认值：0下载器在下载同一个网站下一个页面前需要等待的时间。该选项可以用来限制爬取速度， 减轻服务器压力。同时也支持小数。默认情况下，Scrapy在两个请求间不等待一个固定的值， 而是使用0.5到1.5之间的一个随机值结果作为等待 DOWNLOAD_DELAY 间隔。</code></pre><h1 id="DOWNLOAD-HANDLERS"><a href="#DOWNLOAD-HANDLERS" class="headerlink" title="DOWNLOAD_HANDLERS"></a>DOWNLOAD_HANDLERS</h1><pre><code>它与下载处理程序的字典。默认值： &#123;&#125;</code></pre><h1 id="DOWNLOAD-HANDLERS-BASE"><a href="#DOWNLOAD-HANDLERS-BASE" class="headerlink" title="DOWNLOAD_HANDLERS_BASE"></a>DOWNLOAD_HANDLERS_BASE</h1><pre><code>它与默认情况下启用下载处理程序的字典。默认值：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&#x27;file&#x27;</span>: <span class="string">&#x27;scrapy.core.downloader.handlers.file.FileDownloadHandler&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;scrapy.core.downloader.handlers.http.HttpDownloadHandler&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;scrapy.core.downloader.handlers.http.HttpDownloadHandler&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;s3&#x27;</span>: <span class="string">&#x27;scrapy.core.downloader.handlers.s3.S3DownloadHandler&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="DOWNLOAD-TIMEOUT"><a href="#DOWNLOAD-TIMEOUT" class="headerlink" title="DOWNLOAD_TIMEOUT"></a>DOWNLOAD_TIMEOUT</h1><pre><code>它的总时间下载到之前等待超时。默认值：180</code></pre><h1 id="DOWNLOAD-MAXSIZE"><a href="#DOWNLOAD-MAXSIZE" class="headerlink" title="DOWNLOAD_MAXSIZE"></a>DOWNLOAD_MAXSIZE</h1><pre><code>这是响应的下载器下载的最大尺寸。默认值：1073741824 (1024MB)</code></pre><h1 id="DOWNLOAD-WARNSIZE"><a href="#DOWNLOAD-WARNSIZE" class="headerlink" title="DOWNLOAD_WARNSIZE"></a>DOWNLOAD_WARNSIZE</h1><pre><code>它定义为响应下载警告的大小。默认值：33554432 (32MB)</code></pre><h1 id="DUPEFILTER-CLASS"><a href="#DUPEFILTER-CLASS" class="headerlink" title="DUPEFILTER_CLASS"></a>DUPEFILTER_CLASS</h1><pre><code>这是用于检测和是重复的请求的滤波的类。默认值：“scrapy.dupefilters.RFPDupeFilter”</code></pre><h1 id="DUPEFILTER-DEBUG"><a href="#DUPEFILTER-DEBUG" class="headerlink" title="DUPEFILTER_DEBUG"></a>DUPEFILTER_DEBUG</h1><pre><code>当设置为true此设置记录所有重复的过滤器。默认值：False</code></pre><h1 id="EDITOR"><a href="#EDITOR" class="headerlink" title="EDITOR"></a>EDITOR</h1><pre><code>它是用来编辑使用编辑命令蜘蛛。默认值：取决于环境</code></pre><h1 id="EXTENSIONS"><a href="#EXTENSIONS" class="headerlink" title="EXTENSIONS"></a>EXTENSIONS</h1><pre><code>它是具有在项目中启用的扩展字典。默认值： &#123;&#125;</code></pre><h1 id="EXTENSIONS-BASE"><a href="#EXTENSIONS-BASE" class="headerlink" title="EXTENSIONS_BASE"></a>EXTENSIONS_BASE</h1><pre><code>它是具有内置的扩展字典。默认值：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&#x27;scrapy.extensions.corestats.CoreStats&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.telnet.TelnetConsole&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.extensions.memusage.MemoryUsage&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.extensions.memdebug.MemoryDebugger&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.extensions.closespider.CloseSpider&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.extensions.feedexport.FeedExporter&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.extensions.logstats.LogStats&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.extensions.spiderstate.SpiderState&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.extensions.throttle.AutoThrottle&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="FEED-TEMPDIR"><a href="#FEED-TEMPDIR" class="headerlink" title="FEED_TEMPDIR"></a>FEED_TEMPDIR</h1><pre><code>它是用来设置，其中履带临时文件可以存储自定义文件夹的目录。</code></pre><h1 id="ITEM-PIPELINES"><a href="#ITEM-PIPELINES" class="headerlink" title="ITEM_PIPELINES"></a>ITEM_PIPELINES</h1><pre><code>它是具有管线的字典。默认值： &#123;&#125;</code></pre><h1 id="ITEM-PIPELINES-BASE"><a href="#ITEM-PIPELINES-BASE" class="headerlink" title="ITEM_PIPELINES_BASE"></a>ITEM_PIPELINES_BASE</h1><pre><code>默认: &#123;&#125;保存项目中默认启用的pipeline的字典。 永远不要在项目中修改该设定，而是修改 ITEM_PIPELINES。</code></pre><h1 id="LOG-ENABLED"><a href="#LOG-ENABLED" class="headerlink" title="LOG_ENABLED"></a>LOG_ENABLED</h1><pre><code>它定义如果日志被启用。默认值：True</code></pre><h1 id="LOG-ENCODING"><a href="#LOG-ENCODING" class="headerlink" title="LOG_ENCODING"></a>LOG_ENCODING</h1><pre><code>它定义了将用于记录的编码类型。默认值： ‘UTF-8’</code></pre><h1 id="LOG-FILE"><a href="#LOG-FILE" class="headerlink" title="LOG_FILE"></a>LOG_FILE</h1><pre><code>它是用于记录的输出文件的名称。logging输出的文件名。如果为None，则使用标准错误输出(standard error)。默认值：无</code></pre><h1 id="LOG-FORMAT"><a href="#LOG-FORMAT" class="headerlink" title="LOG_FORMAT"></a>LOG_FORMAT</h1><pre><code>它是利用它的日志信息可以被格式化的字符串。默认值：’%(asctime)s [%(name)s] %(levelname)s: %(message)s’</code></pre><h1 id="LOG-DATEFORMAT"><a href="#LOG-DATEFORMAT" class="headerlink" title="LOG_DATEFORMAT"></a>LOG_DATEFORMAT</h1><pre><code>它是利用它的日期/时间可以格式化字符串。默认值： ‘%Y-%m-%d %H:%M:%S’</code></pre><h1 id="LOG-LEVEL"><a href="#LOG-LEVEL" class="headerlink" title="LOG_LEVEL"></a>LOG_LEVEL</h1><pre><code>它定义最低日志级别。默认值：“DEBUG”</code></pre><p>log的最低级别。可选的级别有: CRITICAL、 ERROR、WARNING、INFO、DEBUG 。</p><h1 id="LOG-STDOUT"><a href="#LOG-STDOUT" class="headerlink" title="LOG_STDOUT"></a>LOG_STDOUT</h1><pre><code>此设置如果设置为true ，所有侑过程输出会出现在日志中。默认值：False</code></pre><h1 id="MEMDEBUG-ENABLED"><a href="#MEMDEBUG-ENABLED" class="headerlink" title="MEMDEBUG_ENABLED"></a>MEMDEBUG_ENABLED</h1><pre><code>它定义如果内存调试启用。默认值：False</code></pre><h1 id="MEMDEBUG-NOTIFY"><a href="#MEMDEBUG-NOTIFY" class="headerlink" title="MEMDEBUG_NOTIFY"></a>MEMDEBUG_NOTIFY</h1><pre><code>它定义启用内存调试时，发送到特定地址的内存报告。默认值： []</code></pre><h1 id="MEMUSAGE-ENABLED"><a href="#MEMUSAGE-ENABLED" class="headerlink" title="MEMUSAGE_ENABLED"></a>MEMUSAGE_ENABLED</h1><pre><code>它定义如果存储器使用是当scrapy过程超过存储器限制被启用。默认值：False</code></pre><h1 id="MEMUSAGE-LIMIT-MB"><a href="#MEMUSAGE-LIMIT-MB" class="headerlink" title="MEMUSAGE_LIMIT_MB"></a>MEMUSAGE_LIMIT_MB</h1><pre><code>如果定义了存储器的最大限制(in megabytes)被允许。在关闭Scrapy之前所允许的最大内存数(单位: MB)(如果 MEMUSAGE_ENABLED为True)。 如果为0，将不做限制。默认值：0</code></pre><h1 id="MEMUSAGE-CHECK-INTERVAL-SECONDS"><a href="#MEMUSAGE-CHECK-INTERVAL-SECONDS" class="headerlink" title="MEMUSAGE_CHECK_INTERVAL_SECONDS"></a>MEMUSAGE_CHECK_INTERVAL_SECONDS</h1><pre><code>它用于通过设置间隔的长度，以检查本内存使用情况。默认值：60.0</code></pre><h1 id="MEMUSAGE-NOTIFY-MAIL"><a href="#MEMUSAGE-NOTIFY-MAIL" class="headerlink" title="MEMUSAGE_NOTIFY_MAIL"></a>MEMUSAGE_NOTIFY_MAIL</h1><pre><code>它是用来当内存达到极限与电子邮件列表通知。默认值：False</code></pre><h1 id="MEMUSAGE-REPORT"><a href="#MEMUSAGE-REPORT" class="headerlink" title="MEMUSAGE_REPORT"></a>MEMUSAGE_REPORT</h1><pre><code>它定义如果内存使用情况报告要在关闭每个蜘蛛发送。默认值：False</code></pre><h1 id="MEMUSAGE-WARNING-MB"><a href="#MEMUSAGE-WARNING-MB" class="headerlink" title="MEMUSAGE_WARNING_MB"></a>MEMUSAGE_WARNING_MB</h1><pre><code>它定义被发送警告之前被允许的总存储。默认值：0</code></pre><h1 id="NEWSPIDER-MODULE"><a href="#NEWSPIDER-MODULE" class="headerlink" title="NEWSPIDER_MODULE"></a>NEWSPIDER_MODULE</h1><pre><code>这是其中使用创造了新的蜘蛛模块genspider命令。默认值： ‘’</code></pre><h1 id="RANDOMIZE-DOWNLOAD-DELAY"><a href="#RANDOMIZE-DOWNLOAD-DELAY" class="headerlink" title="RANDOMIZE_DOWNLOAD_DELAY"></a>RANDOMIZE_DOWNLOAD_DELAY</h1><pre><code>它定义的时候了Scrapy等待下载的同时从网站上请求一个随机量。如果启用，当从相同的网站获取数据时，Scrapy将会等待一个随机的值 (0.5到1.5之间的一个随机值 * DOWNLOAD_DELAY默认值：True</code></pre><h1 id="REACTOR-THREADPOOL-MAXSIZE"><a href="#REACTOR-THREADPOOL-MAXSIZE" class="headerlink" title="REACTOR_THREADPOOL_MAXSIZE"></a>REACTOR_THREADPOOL_MAXSIZE</h1><pre><code>它定义为在反应器线程池的最大尺寸。默认值：10</code></pre><h1 id="REDIRECT-MAX-TIMES"><a href="#REDIRECT-MAX-TIMES" class="headerlink" title="REDIRECT_MAX_TIMES"></a>REDIRECT_MAX_TIMES</h1><pre><code>它定义了一个请求多少次可以重定向。默认值：20</code></pre><h1 id="REDIRECT-PRIORITY-ADJUST"><a href="#REDIRECT-PRIORITY-ADJUST" class="headerlink" title="REDIRECT_PRIORITY_ADJUST"></a>REDIRECT_PRIORITY_ADJUST</h1><pre><code>设置时，该设置，调整的请求重定向优先级。修改重定向请求相对于原始请求的优先级。 负数意味着更多优先级默认值：+2</code></pre><h1 id="RETRY-PRIORITY-ADJUST"><a href="#RETRY-PRIORITY-ADJUST" class="headerlink" title="RETRY_PRIORITY_ADJUST"></a>RETRY_PRIORITY_ADJUST</h1><pre><code>设置时，该设置，调整请求重试的优先权。默认值：-1</code></pre><h1 id="RETRY-ENABLED-False"><a href="#RETRY-ENABLED-False" class="headerlink" title="RETRY_ENABLED = False"></a>RETRY_ENABLED = False</h1><pre><code>对于失败的HTTP请求(如超时)进行重试会降低爬取效率，当爬取目标基数很大时，舍弃部分数据不影响大局，提高效率</code></pre><h1 id="ROBOTSTXT-OBEY"><a href="#ROBOTSTXT-OBEY" class="headerlink" title="ROBOTSTXT_OBEY"></a>ROBOTSTXT_OBEY</h1><pre><code>当设置为Scrapy遵循robots.txt政策true 。默认值：Falserobots.txt 是遵循 Robot协议 的一个文件，它保存在网站的服务器中，它的作用是，告诉搜索引擎爬虫，本网站哪些目录下的网页 不希望 你进行爬取收录。在Scrapy启动后，会在第一时间访问网站的 robots.txt 文件，然后决定该网站的爬取范围。</code></pre><h1 id="SCHEDULER"><a href="#SCHEDULER" class="headerlink" title="SCHEDULER"></a>SCHEDULER</h1><pre><code>它定义了用于抓取目的调度。默认值：“scrapy.core.scheduler.Scheduler”</code></pre><h1 id="SPIDER-CONTRACTS"><a href="#SPIDER-CONTRACTS" class="headerlink" title="SPIDER_CONTRACTS"></a>SPIDER_CONTRACTS</h1><pre><code>它是在有项目蜘蛛合同测试蜘蛛的字典。默认值： &#123;&#125;</code></pre><h1 id="SPIDER-CONTRACTS-BASE"><a href="#SPIDER-CONTRACTS-BASE" class="headerlink" title="SPIDER_CONTRACTS_BASE"></a>SPIDER_CONTRACTS_BASE</h1><pre><code>这是保持其在Scrapy默认启用Scrapy合同的字典。默认值：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&#x27;scrapy.contracts.default.UrlContract&#x27;</span> : <span class="number">1</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.contracts.default.ReturnsContract&#x27;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.contracts.default.ScrapesContract&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="SPIDER-LOADER-CLASS"><a href="#SPIDER-LOADER-CLASS" class="headerlink" title="SPIDER_LOADER_CLASS"></a>SPIDER_LOADER_CLASS</h1><pre><code>它定义了实现一个类SpiderLoader API来加载 爬虫。默认值：“scrapy.spiderloader.SpiderLoader”SPIDER_MIDDLEWARES这是设置蜘蛛中间件的字典。默认值： &#123;&#125;</code></pre><h1 id="SPIDER-MIDDLEWARES-BASE"><a href="#SPIDER-MIDDLEWARES-BASE" class="headerlink" title="SPIDER_MIDDLEWARES_BASE"></a>SPIDER_MIDDLEWARES_BASE</h1><pre><code>这是在Scrapy默认启用一个字典保存 爬虫 中间件。默认值：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&#x27;scrapy.spidermiddlewares.httperror.HttpErrorMiddleware&#x27;</span>: <span class="number">50</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.spidermiddlewares.offsite.OffsiteMiddleware&#x27;</span>: <span class="number">500</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.spidermiddlewares.referer.RefererMiddleware&#x27;</span>: <span class="number">700</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.spidermiddlewares.urllength.UrlLengthMiddleware&#x27;</span>: <span class="number">800</span>,</span><br><span class="line"><span class="string">&#x27;scrapy.spidermiddlewares.depth.DepthMiddleware&#x27;</span>: <span class="number">900</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="SPIDER-MODULES"><a href="#SPIDER-MODULES" class="headerlink" title="SPIDER_MODULES"></a>SPIDER_MODULES</h1><pre><code>它是一种含有蜘蛛其中Scrapy将寻找模块列表。默认值： []</code></pre><h1 id="STATS-CLASS"><a href="#STATS-CLASS" class="headerlink" title="STATS_CLASS"></a>STATS_CLASS</h1><pre><code>这是实现一类Stats Collector API来收集统计信息。默认值：“scrapy.statscollectors.MemoryStatsCollector”</code></pre><h1 id="STATS-DUMP"><a href="#STATS-DUMP" class="headerlink" title="STATS_DUMP"></a>STATS_DUMP</h1><pre><code>当设置此设置true ，转储统计到日志中。默认值：True</code></pre><h1 id="STATSMAILER-RCPTS"><a href="#STATSMAILER-RCPTS" class="headerlink" title="STATSMAILER_RCPTS"></a>STATSMAILER_RCPTS</h1><pre><code>一旦蜘蛛刮完毕，Scrapy使用此设置发送统计数据。默认值： []</code></pre><h1 id="TELNETCONSOLE-ENABLED"><a href="#TELNETCONSOLE-ENABLED" class="headerlink" title="TELNETCONSOLE_ENABLED"></a>TELNETCONSOLE_ENABLED</h1><pre><code>它定义是否启用telnetconsole。默认值：True</code></pre><h1 id="TELNETCONSOLE-PORT"><a href="#TELNETCONSOLE-PORT" class="headerlink" title="TELNETCONSOLE_PORT"></a>TELNETCONSOLE_PORT</h1><pre><code>它定义了Telnet控制台端口。默认值：[6023，6073]</code></pre><h1 id="TEMPLATES-DIR"><a href="#TEMPLATES-DIR" class="headerlink" title="TEMPLATES_DIR"></a>TEMPLATES_DIR</h1><pre><code>它是包含可以在创建新的项目中使用的模板目录。默认值： templates scrapy模块内部目录</code></pre><h1 id="URLLENGTH-LIMIT"><a href="#URLLENGTH-LIMIT" class="headerlink" title="URLLENGTH_LIMIT"></a>URLLENGTH_LIMIT</h1><pre><code>它定义了将被允许抓取的网址的长度为URL的最大极限。默认值：2083</code></pre><h1 id="USER-AGENT"><a href="#USER-AGENT" class="headerlink" title="USER_AGENT"></a>USER_AGENT</h1><pre><code>它定义了在抓取网站所使用的用户代理。默认值： “Scrapy / VERSION“</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中如何判断sql语句操作成功？</title>
      <link href="article/1241896087/"/>
      <url>article/1241896087/</url>
      
        <content type="html"><![CDATA[<p>python中如何判断sql语句操作成功？</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2021.3.1 x64  </span><br><span class="line">语言: python v3.9.1</span><br><span class="line">模块: Pymysql</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>老话说，石头丢到水里，怎么说也能听个响声。</p><p>这其实就是一种交互以后得到反馈的过程。</p><p>那么，python是用mysql数据库入库以后，我要如何得知自己的入库情况呢？</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>mysql 无论是 插入数据 或者 更新插入 或者 替换插入 等方式，它们最终都会影响到数据的变动，而mysql会反馈发生数据变动的行数。</p><ul><li><p>插入数据</p><p>  通常只有一行数据发生了变化，返回一般是 1 行</p></li><li><p>更新插入&amp;替换插入</p><p>  一般返回的是 2 行，即删除1行，添加1行的操作</p><p>  但是碰到数据实际上无变化那就无需更新，mysql就会略过插入操作，返回的行数变动数量就会是 0</p></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>部分代码如下（pymysql如何链接数据库总不用写了吧..)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># import pymysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># conn = pymysql.connect(host=&#x27;127.0.0.1&#x27;, port=3306, user=&#x27;root&#x27;, passwd=&#x27;你的数据库密码&#x27;, db=&#x27;mydb&#x27;, charset=&#x27;utf8&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cursor = conn.cursor()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用变量接收</span></span><br><span class="line">data_add_status = cursor.execute(sql, vs)</span><br><span class="line"><span class="comment"># 入库状态响应</span></span><br><span class="line"><span class="keyword">if</span> data_add_status:</span><br><span class="line">    print(<span class="string">&quot;入库操作 ： rows = &#123;&#125; 行发生变动&quot;</span>.<span class="built_in">format</span>(cursor.rowcount))</span><br><span class="line">    <span class="keyword">if</span> data_add_status == <span class="number">2</span>:</span><br><span class="line">        print(<span class="string">f&quot;数据表: <span class="subst">&#123;table_name&#125;</span>&quot;</span>, data_add_status, item_sign, <span class="string">&quot;旧数据 更新入库完成！&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> data_add_status == <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">f&quot;数据表: <span class="subst">&#123;table_name&#125;</span>&quot;</span>, data_add_status, item_sign, <span class="string">&quot;新数据 新增入库完成！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">f&quot;行数变动:<span class="subst">&#123;data_add_status&#125;</span> <span class="subst">&#123;table_name&#125;</span> <span class="subst">&#123;item_sign&#125;</span> 入库失败! 可能是数据重复，无需入库！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>重点是对 cursor 游标对象里rowcount方法的使用，</p><p>获取到数据库变动的行数来大致的推断数据的入库情况。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> mysql </tag>
            
            <tag> 数据 </tag>
            
            <tag> pymysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pymysql批量插入方法executemany的使用</title>
      <link href="article/2058542617/"/>
      <url>article/2058542617/</url>
      
        <content type="html"><![CDATA[<p>Pymysql批量插入方法executemany的使用</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2021.3.1 x64  </span><br><span class="line">语言: python v3.9.1</span><br><span class="line">模块: Pymysql</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>python使用mysql，进行大数据导入导出操作时，免不了要使用批量入库的操作。</p><p>在使用pymysql模块操作批量入库时，碰到部分使用上的问题，以此做一个简单使用笔记。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>在写sql语句时，不管字段为什么类型，占位符统一使用%s,且不能加上引号<blockquote><p>sql=”insert into tablename (id,name) values (%s,%s)”</p></blockquote></li></ol><ol start="2"><li><p>添加的数据的格式必须为 list[tuple(),tuple(),tuple()] 或者 tuple(tuple(),tuple(),tuple())</p><blockquote><p>values=[(1,”zhangsan”),(2,”lisi”)]</p></blockquote><p> or</p><blockquote><p>values=((1,”zhangsan”),(2,”lisi”))</p></blockquote></li><li><p>最后,再通过executemany插入</p><blockquote><p>cursor.executemany(sql,values)</p></blockquote></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用过程中，还发现了一些问题。</p><p>Pymysql executemany 的方法，实际上是 伪批量插，性能上比真正批量插入还是有点差距，</p><p>如果要使用真正的批量插入还是还要直接在sql语句上直接实现批量插入，效果更好。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> mysql </tag>
            
            <tag> 数据 </tag>
            
            <tag> pymysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫：Scrapy使用adbapi提高存储数据库效率</title>
      <link href="article/3104511781/"/>
      <url>article/3104511781/</url>
      
        <content type="html"><![CDATA[<p>Python爬虫：Scrapy使用adbapi提高存储数据库效率</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2021.3.1 x64  </span><br><span class="line">语言: python v3.9.1</span><br><span class="line">框架: Scrapy</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Scrapy 是一个高性能的异步采集框架，采集速度非常快，但是数据库入库受限于数据库本身的原因，一直是个瓶颈。</p><p>在某些爬虫项目下，我们需要每次执行一条插入语句，就立即调用commit方法更新数据库。</p><p>如果爬取时间太长，中途可能被迫中断，这样程序就不能执行close_spider中的commit。</p><p>但如果在insert_db中直接加入commit，又会使程序执行变得很慢。</p><p>这里就可以使用Twisted中提供的以异步方式多线程访问数据库的模块adbapi，可以显著提供程序访问数据库的效率。</p><h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul><li><p><strong>adbapi.ConnectionPool方法</strong></p><p>  可以创建一个数据库连接池对象，其中包括多个连接对象，每个连接对象在独立的线程中工作。</p><p>  adbapi只是提供了异步访问数据库的编程框架，再其内部依然使MySQLdb这样的库访问数据库。</p></li><li><p><strong>dbpool.runInteraction(insert_db,item)</strong></p><p>  以异步方式调用insert_db函数，dbpool会选择连接池中的一个连接对象在独立线程中调用insert_db，</p><p>  其中参数item会被传给insert_db的第二个参数，传给insert_db的第一个参数是一个Transaction对象，</p><p>  其接口与Cursoru游标对象类似，</p><p>  可以调用execute方法执行SQL语句，insert_db执行后，连接对象会自动调用commit方法</p></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"><span class="keyword">from</span> twisted.enterprise <span class="keyword">import</span> adbapi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlSpiderBasePipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, dbpool, item_tabla_map</span>):</span></span><br><span class="line">        self.dbpool = dbpool</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span>(<span class="params">cls, cralwer</span>):</span></span><br><span class="line">        db_parmars = &#123;</span><br><span class="line">            <span class="string">&#x27;host&#x27;</span>: cralwer.settings[<span class="string">&#x27;MYSQL_HOST&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;user&#x27;</span>: cralwer.settings[<span class="string">&#x27;MYSQL_USER&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;passwd&#x27;</span>: cralwer.settings[<span class="string">&#x27;MYSQL_PWD&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;db&#x27;</span>: cralwer.settings[<span class="string">&#x27;MYSQL_DB&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;port&#x27;</span>: cralwer.settings[<span class="string">&#x27;MYSQL_PORT&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;charset&#x27;</span>: cralwer.settings[<span class="string">&#x27;MYSQL_CHARSET&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        dbpool = adbapi.ConnectionPool(<span class="string">&#x27;pymysql&#x27;</span>, **db_parmars)</span><br><span class="line">        <span class="keyword">return</span> cls(dbpool)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="comment"># 入库</span></span><br><span class="line">        query = self.dbpool.runInteraction(</span><br><span class="line">            self.insert_data_to_mysql,</span><br><span class="line">            item</span><br><span class="line">        )</span><br><span class="line">        query.addErrback(</span><br><span class="line">            self.insert_err,</span><br><span class="line">            item</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_err</span>(<span class="params">self, failure, item</span>):</span></span><br><span class="line">        print(failure, <span class="string">&#x27;失败&#x27;</span>)  <span class="comment"># , item)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_data_to_mysql</span>(<span class="params">self, cursor, item</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承   MysqlSpiderBasePipeline 类 然后重写insert_data_to_mysql方法来实现具体的入库逻辑即可。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderPipeline</span>(<span class="params">MysqlSpiderBasePipeline</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_data_to_mysql</span>(<span class="params">self, cursor, item</span>):</span></span><br><span class="line">        sql, data = item.get_update_sql()</span><br><span class="line">        cursor.execute(sql, data)</span><br><span class="line">        <span class="comment"># ....</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Scrapy 异步 更新 或 插入， 都能有效提高入库效率。</p><p>但是这对数据库本身的性能也有要求，如果数据库本身性能不行，</p><p>那也是逼着Scrapy”八车道”变成”两车道”,入库时常太长了，</p><p>还可能导致数据库游标cursor超时断开，出现 pymysql.err.InterfaceError: (0, ‘’) 的报错。</p><p><strong>出现的原因是没有连接到数据库，或者数据库在爬虫的过程中断开了。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据清洗：清理字符串中存在的\xa0字符</title>
      <link href="article/382879377/"/>
      <url>article/382879377/</url>
      
        <content type="html"><![CDATA[<p>简介</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2020.3.2 x64  </span><br><span class="line">语言: python v3.9.1</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据 </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> scrapy </tag>
            
            <tag> django </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计字符串中某字符出现的次数</title>
      <link href="article/916779116/"/>
      <url>article/916779116/</url>
      
        <content type="html"><![CDATA[<p>使用python统计一段字符串当中，某一个字符重复出现的次数。</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2020.3.2 x64  </span><br><span class="line">语言: python v3.9.1</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>近日，其他部门提出的采集需求。</p><p>需要使用到公司内部数据库某一字段的值，去目标网站进行检索。</p><p>目标网站搜索词的联想词排序情况复杂，所以需要对搜索词进行切割穷举组合，再分别拿去搜索的。</p><p>切割成多少段，是根据特定连接符号决定的，但是由于切割段数过多，穷举数量就会爆炸增长。</p><p>在此，需要统计字符串中存在多少个连接符号，来决定是穷举搜索，还是舍弃该词的搜索操作。</p><h1 id="方法说明"><a href="#方法说明" class="headerlink" title="方法说明"></a>方法说明</h1><p>(str).count()</p><p>count(str[,start][,end])</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">判断字符串中，</span><br><span class="line"></span><br><span class="line">从start开始的下标到字符串的结尾end中出现了多少个str （给定字符）</span><br><span class="line"></span><br><span class="line">如果 start到end 没写 默认 从头到尾字符串中出现str出现的次数</span><br></pre></td></tr></table></figure><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 依据 &amp; 符号切割</span></span><br><span class="line"></span><br><span class="line">temp_str = <span class="string">&quot;Neomycin Sulfate &amp; Polymyxin B Sulfate &amp; Estradiol Valerate &amp; Testosterone Enanthate&quot;</span></span><br><span class="line"></span><br><span class="line">print(temp_str.count(<span class="string">&quot;&amp;&quot;</span>))</span><br><span class="line"><span class="comment">#(输出)3 表示从字符串左到右 有 3 个 &amp; 符号</span></span><br><span class="line"></span><br><span class="line">print(temp_str.count(<span class="string">&quot;&amp;&quot;</span>,<span class="number">21</span>,<span class="built_in">len</span>(temp_str)))     <span class="comment">#就是从下标8以后开始</span></span><br><span class="line"><span class="comment">#(输出)2 表示从字符串左到右的第20个字符开始 有 2 个 &amp; 符号</span></span><br><span class="line"></span><br><span class="line">print(temp_str.count(<span class="string">&quot;&amp;&quot;</span>,<span class="number">41</span>,<span class="built_in">len</span>(temp_str)))  <span class="comment">#就是从下标9以后开始</span></span><br><span class="line"><span class="comment">#(输出)1 表示从字符串左到右的第 41 个字符开始 有 1 个 &amp; 符号</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>字符串处理，统计某些特殊字符的数量，可以作为逻辑的判断依据。</p><p>又可做某些简单的词频统计。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> str </tag>
            
            <tag> 字符串 </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据清洗：获取指定字符前面或者后面的所有字符</title>
      <link href="article/4160305074/"/>
      <url>article/4160305074/</url>
      
        <content type="html"><![CDATA[<p>获取指定字符前面的所有字符，获取指定字符后面的所有字符。</p><p>关系到字符串的处理。</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2021.3.2 x64  </span><br><span class="line">语言: python v3.9.1</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>数据采集过程中，通过解析库拿到的字符串，是需要清洗的。</p><p>偶尔需要截取某特定符号后的字符串。</p><p>例如： “Tree Number(s): C15.378.100.100, C16.320.099” 获取“:”符号后的字符串。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="采用split方法"><a href="#采用split方法" class="headerlink" title="采用split方法"></a>采用split方法</h2><pre><code>根据特定符号，将目标字符串切割，然后使用join方法再将需要的那一部分字符串取出。但是如果目标字符串为None时，split方法会报错。</code></pre><h2 id="采用rfind-切片方法"><a href="#采用rfind-切片方法" class="headerlink" title="采用rfind+切片方法"></a>采用rfind+切片方法</h2><pre><code>Python rfind() 返回字符串最后一次出现的位置，如果没有匹配项则返回 -1。根据特定符号，查找目标字符串该符号，然后使用切片法截取需要的字符串。1. 顺序取法（从前往后取）2. 逆序取法（从后往前取）</code></pre><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="split方法"><a href="#split方法" class="headerlink" title="split方法"></a>split方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">temp_str = <span class="string">&quot;Tree Number(s): C15.378.100.100, C16.320.099&quot;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;&quot;</span>.join(temp_str.split(<span class="string">&quot;:&quot;</span>)[-<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取到的结果：C15.378.100.100, C16.320.099</span></span><br></pre></td></tr></table></figure><h2 id="rfind-切片"><a href="#rfind-切片" class="headerlink" title="rfind+切片"></a>rfind+切片</h2><ol><li>顺序取法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">temp_str = <span class="string">&quot;Tree Number(s): C15.378.100.100, C16.320.099&quot;</span></span><br><span class="line"></span><br><span class="line">print(temp_str[<span class="number">0</span>:temp_str.rfind(<span class="string">&#x27;:&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取到的结果：Tree Number(s)</span></span><br></pre></td></tr></table></figure><ol start="2"><li>逆序取法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">temp_str = <span class="string">&quot;Tree Number(s): C15.378.100.100, C16.320.099&quot;</span></span><br><span class="line"></span><br><span class="line">print(temp_str[temp_str.rfind(<span class="string">&#x27;:&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取到的结果：C15.378.100.100, C16.320.099</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>活用python对字符串处理的自带方法，性能更优异。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 数据清洗 </tag>
            
            <tag> rfind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单粗暴的让mysql主键id重新排序</title>
      <link href="article/2073581741/"/>
      <url>article/2073581741/</url>
      
        <content type="html"><![CDATA[<p>简单粗暴的让mysql主键id重新排序</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2021.3.1 x64  </span><br><span class="line">语言: python v3.8</span><br><span class="line">框架: xxx</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>简单粗暴的让mysql主键id重新排序。</p><p>采集数据入库的时候，偶尔会出现数据入库失败，导致事务回滚的情况。</p><p>当mysql表中存在自增id字段，就会出现id断续的情况。</p><p>强迫症看着难受。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>使用SQL语句，备份表，删除id自增键，重新创建id自增键。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol><li>备份表结构</li></ol><blockquote><p>create table table_bak like table_name;</p></blockquote><ol start="2"><li>备份表数据</li></ol><blockquote><p>insert into table_bak select * from table_name;</p></blockquote><ol start="3"><li>删除原来主键字段(如id)</li></ol><blockquote><p>alter table table_name drop id;</p></blockquote><ol start="4"><li>添加主键，自增，放在第一位</li></ol><blockquote><p>alter table table_name add id int(11) primary key auto_increment first;</p></blockquote><ol start="5"><li>检查没问题的话，即可清理备份表</li></ol><blockquote><p>drop table table_name;</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一般在生产，当中任何删除操作都是有风险的。</p><p>必须确保其它业务表，不会与该表的自增字段有关联。</p><p>如果是表中数据量达到千万级以上，这样的做法是不推荐的。</p><p>但是，目前我处理的数据还只是数十万级，且表是独立的没有外部关联，还算hold得住。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> MYSQL </tag>
            
            <tag> Mysql </tag>
            
            <tag> sql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据清洗：通过Python从字符串中提取数字</title>
      <link href="article/3539572553/"/>
      <url>article/3539572553/</url>
      
        <content type="html"><![CDATA[<p>根据业务需求进行数据清洗，通过Python从字符串中提取数字。</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2020.3.2 x64  </span><br><span class="line">语言: python v3.9.1</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>某日，根据公司业务需求采集某药品信息的网站。</p><p>获取其自定的itemID时，发现它id是一段纯数字，且塞在某个HTML标签的value参数中。</p><p>而且，无其他数字造成干扰。</p><p>于是开发了一个通用python函数方法。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>采用正则表达式为解决需求的核心。</p><h2 id="常用正则表达式概要"><a href="#常用正则表达式概要" class="headerlink" title="常用正则表达式概要"></a>常用正则表达式概要</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">## 总结</span><br><span class="line">## ^ 匹配字符串的开始。</span><br><span class="line">## $ 匹配字符串的结尾。</span><br><span class="line">## \b 匹配一个单词的边界。</span><br><span class="line">## \d 匹配任意数字。</span><br><span class="line">## \D 匹配任意非数字字符。</span><br><span class="line">## x? 匹配一个可选的 x 字符 (换言之，它匹配 1 次或者 0 次 x 字符)。</span><br><span class="line">## x* 匹配0次或者多次 x 字符。</span><br><span class="line">## x+ 匹配1次或者多次 x 字符。</span><br><span class="line">## x&#123;n,m&#125; 匹配 x 字符，至少 n 次，至多 m 次。</span><br><span class="line">## (a|b|c) 要么匹配 a，要么匹配 b，要么匹配 c。</span><br><span class="line">## (x) 一般情况下表示一个记忆组 (remembered group)。你可以利用 re.search 函数返回对象的 groups() 函数获取它的值。</span><br><span class="line">## 正则表达式中的点号通常意味着 “匹配任意单字符”</span><br></pre></td></tr></table></figure><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="将提取到的数字合并成一串长数字"><a href="#将提取到的数字合并成一串长数字" class="headerlink" title="将提取到的数字合并成一串长数字"></a>将提取到的数字合并成一串长数字</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pick_up_numeral</span>(<span class="params">temp_str</span>) -&gt; str:</span></span><br><span class="line">     <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">     提取字符串中的数字</span></span><br><span class="line"><span class="string">     :param temp_str:str, 待提取数字的字符串</span></span><br><span class="line"><span class="string">     :return:str</span></span><br><span class="line"><span class="string">     &quot;&quot;&quot;</span></span><br><span class="line">     <span class="keyword">import</span> re</span><br><span class="line">     num_str = re.findall(<span class="string">r&#x27;\d&#x27;</span>, temp_str)  <span class="comment"># 在字符串中找到正则表达式所匹配的所有数字，num_str是一个list</span></span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(num_str)</span><br></pre></td></tr></table></figure><h2 id="提取数字-分割成列表"><a href="#提取数字-分割成列表" class="headerlink" title="提取数字(分割成列表)"></a>提取数字(分割成列表)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pick_up_numeral</span>(<span class="params">temp_str</span>) -&gt; list:</span></span><br><span class="line">     <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">     提取字符串中的数字</span></span><br><span class="line"><span class="string">     :param temp_str:str, 待提取数字的字符串</span></span><br><span class="line"><span class="string">     :return:str</span></span><br><span class="line"><span class="string">     &quot;&quot;&quot;</span></span><br><span class="line">     <span class="keyword">import</span> re</span><br><span class="line">     num_str = re.findall(<span class="string">r&#x27;\d&#x27;</span>, temp_str)  <span class="comment"># 在字符串中找到正则表达式所匹配的所有数字，num_str是一个list</span></span><br><span class="line">     <span class="keyword">return</span> num_str</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">temp_str = <span class="string">&quot;01234_blog.raxianch.moe_56789&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一种函数运行结果</span></span><br><span class="line"><span class="comment"># 0123456789</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种函数运行结果</span></span><br><span class="line"><span class="comment"># [&quot;01234&quot;,&quot;56789&quot;]</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>既然是提取数字，那么数字的形式一般是：整数，小数，整数加小数；</p><p>所以一般是形如：—-.—–；</p><p>根据上述正则表达式的含义，可写出如下的表达式：”\d+.?\d*”；</p><p>\d+ 匹配1次或者多次数字，注意这里不要写成*，因为即便是小数，小数点之前也得有一个数字；</p><p>.? 这个是匹配小数点的，可能有，也可能没有；</p><p>\d* 这个是匹配小数点之后的数字的，所以是0个或者多个；</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据清洗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navicat界面下如何用SQL语句给Mysql创建表？</title>
      <link href="article/3554193979/"/>
      <url>article/3554193979/</url>
      
        <content type="html"><![CDATA[<p>Navicat界面下如何用SQL语句给Mysql创建表?</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">开发工具： Navicat 15</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>由于公司建立数据仓库的业务需求，所以灵活的使用navicat进行数据库操作是不错的选择。</p><p>本文仅作为基础的使用笔记。</p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><blockquote><p>选择一个数据库，点击“查询”，在右侧点击“创建查询”，输入SQL语句，点击“保存”即可。</p></blockquote><p><img src= "/customize/img/loading.gif" data-lazy-src="Navicat%E7%95%8C%E9%9D%A2%E4%B8%8B%E5%A6%82%E4%BD%95%E7%94%A8SQL%E8%AF%AD%E5%8F%A5%E7%BB%99Mysql%E5%88%9B%E5%BB%BA%E8%A1%A8%EF%BC%9F/677019bc.png" alt="步骤-1"></p><p><img src= "/customize/img/loading.gif" data-lazy-src="Navicat%E7%95%8C%E9%9D%A2%E4%B8%8B%E5%A6%82%E4%BD%95%E7%94%A8SQL%E8%AF%AD%E5%8F%A5%E7%BB%99Mysql%E5%88%9B%E5%BB%BA%E8%A1%A8%EF%BC%9F/ee22b295.png" alt="步骤-2"></p><p>选择要操作的mysql连接和数据库，输入创表的sql语句，然后点击保存。</p><p>示例创表SQL:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `ods_cxy_adis_drug_t` (</span><br><span class="line">  `id` int(25) NOT NULL AUTO_INCREMENT COMMENT &#x27;自增id&#x27;,</span><br><span class="line">  `name` varchar(1024) DEFAULT NULL COMMENT &#x27;药物名称&#x27;,</span><br><span class="line">  `keyword_name` varchar(1024) DEFAULT NULL COMMENT &#x27;搜索药物名称用的关键词&#x27;,</span><br><span class="line">  `alternative_names` json DEFAULT NULL COMMENT &#x27;药物曾用名&#x27;,</span><br><span class="line">  `url` varchar(1024) DEFAULT NULL COMMENT &#x27;url连接&#x27;,</span><br><span class="line">  `adis_id` varchar(255) DEFAULT NULL COMMENT &#x27;adis_url_id&#x27;,</span><br><span class="line">  `update_date` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `id` (`id`) USING BTREE COMMENT &#x27;id&#x27;,</span><br><span class="line">  UNIQUE KEY `adis_id` (`adis_id`) USING BTREE COMMENT &#x27;adis药物详情页url上的id&#x27;</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4;</span><br></pre></td></tr></table></figure><p><img src= "/customize/img/loading.gif" data-lazy-src="Navicat%E7%95%8C%E9%9D%A2%E4%B8%8B%E5%A6%82%E4%BD%95%E7%94%A8SQL%E8%AF%AD%E5%8F%A5%E7%BB%99Mysql%E5%88%9B%E5%BB%BA%E8%A1%A8%EF%BC%9F/5b01d9cb.png" alt="步骤-3"></p><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><h2 id="通过navicat的DDL快速创建有相同类型的表"><a href="#通过navicat的DDL快速创建有相同类型的表" class="headerlink" title="通过navicat的DDL快速创建有相同类型的表"></a>通过navicat的DDL快速创建有相同类型的表</h2><p>navicat 是可以对已有表生成创表sql语句的。</p><p>选择需要查看创表sql语句的数据表，如图所示获得创表的sql语句。</p><p><img src= "/customize/img/loading.gif" data-lazy-src="Navicat%E7%95%8C%E9%9D%A2%E4%B8%8B%E5%A6%82%E4%BD%95%E7%94%A8SQL%E8%AF%AD%E5%8F%A5%E7%BB%99Mysql%E5%88%9B%E5%BB%BA%E8%A1%A8%EF%BC%9F/8a07da3e.png" alt="拓展"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>快速创建数据表，进行数据操作和测试。<br>创表sql语句的备份，也利于数据仓库的快速建立和备份。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> navicat </tag>
            
            <tag> Navicat </tag>
            
            <tag> MYSQL </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git设置代理</title>
      <link href="article/3411637534/"/>
      <url>article/3411637534/</url>
      
        <content type="html"><![CDATA[<p>简介</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: pycharm 2021.3.1 x64  </span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>入职的新公司，对github的连接速度，实在是差得令人发指。</p><p>有时候想方便在公司写一些技术总结的文章，都面临无法提交的问题。</p><p>拷贝代码或者是工具安装包都非常困难。</p><h1 id="Github-ssr-实现代理访问"><a href="#Github-ssr-实现代理访问" class="headerlink" title="Github + ssr 实现代理访问"></a>Github + ssr 实现代理访问</h1><p>由于博主使用的的ssr作为代理，默认代理端口为1080。</p><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><p>应用场景：不想在本地clone仓库内容来处理，而是直接操作网页完成同步操作。</p><ol><li><p>http || https 设置代理</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> //设置全局代理</span><br><span class="line"> //http</span><br><span class="line"> git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line"> //https</span><br><span class="line"> git config --global https.proxy https://127.0.0.1:1080</span><br><span class="line"> </span><br><span class="line">//使用socks5代理的 例如ss，ssr 1080是windows下ss的默认代理端口,mac下不同，或者有自定义的，根据自己的改</span><br><span class="line"> git config --global http.proxy socks5://127.0.0.1:1080</span><br><span class="line"> git config --global https.proxy socks5://127.0.0.1:1080</span><br><span class="line"> </span><br><span class="line"> //只对github.com使用代理，其他仓库不走代理</span><br><span class="line"> git config --global http.https://github.com.proxy socks5://127.0.0.1:1080</span><br><span class="line"> git config --global https.https://github.com.proxy socks5://127.0.0.1:1080</span><br><span class="line"> </span><br><span class="line">//取消github代理</span><br><span class="line"> git config --global --unset http.https://github.com.proxy</span><br><span class="line"> git config --global --unset https.https://github.com.proxy</span><br><span class="line"> </span><br><span class="line"> //取消全局代理</span><br><span class="line"> git config --global --unset http.proxy</span><br><span class="line"> git config --global --unset https.proxy</span><br></pre></td></tr></table></figure></li><li><p>SSH （Linux 系统场景下）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//对于使用git@协议的，可以配置socks5代理</span><br><span class="line">//在~/.ssh/config 文件后面添加几行，没有可以新建一个</span><br><span class="line">//socks5</span><br><span class="line">Host github.com</span><br><span class="line">User git</span><br><span class="line">ProxyCommand connect -S 127.0.0.1:1080 %h %p</span><br><span class="line"></span><br><span class="line">//http || https</span><br><span class="line">Host github.com</span><br><span class="line">User git</span><br><span class="line">ProxyCommand connect -H 127.0.0.1:1080 %h %p</span><br></pre></td></tr></table></figure></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>大体能解决，中途各种错误断开造成克隆项目失败，</p><p>但是终究还是要看代理质量。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用timeit测试Python小代码片段的执行时间</title>
      <link href="article/2429170349/"/>
      <url>article/2429170349/</url>
      
        <content type="html"><![CDATA[<p>简单的测试python代码，可以采用timeit方法。</p><p>该模块提供了一种简单的方法来计算一小段 Python 代码的耗时。</p><p>它有 命令行界面 以及一个 可调用 方法。</p><p>它避免了许多用于测量执行时间的常见陷阱。</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: webStrom 2021.3.1 x64  </span><br><span class="line">语言: Python 3.9.1</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>开发过程中，时而需要优化运行效率，提高代码整体的质量。</p><p>代码段运行时间，是优化代码的一个直观指标。</p><p>大段的代码运行时间测试，可以采用python的装饰器特性，</p><p>但是如果是小段的代码，可以使用原生的timeit模块，来达到快速测试的目的。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试使用三种方式进行同一种for循环的耗时对比</span></span><br><span class="line"></span><br><span class="line">timeit.timeit(<span class="string">&#x27;&quot;-&quot;.join(str(n) for n in range(100))&#x27;</span>, number=<span class="number">10000</span>)</span><br><span class="line"><span class="comment"># 0.3018611848820001</span></span><br><span class="line"></span><br><span class="line">timeit.timeit(<span class="string">&#x27;&quot;-&quot;.join([str(n) for n in range(100)])&#x27;</span>, number=<span class="number">10000</span>)</span><br><span class="line"><span class="comment"># 0.2727368790656328</span></span><br><span class="line"></span><br><span class="line">timeit.timeit(<span class="string">&#x27;&quot;-&quot;.join(map(str, range(100)))&#x27;</span>, number=<span class="number">10000</span>)</span><br><span class="line"><span class="comment"># 0.23702679807320237</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多行字符串示例</span></span><br><span class="line">example = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">temp = &quot;&quot;</span></span><br><span class="line"><span class="string">for i in range(100):</span></span><br><span class="line"><span class="string">    temp +=i+&quot;-&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多项传参示例</span></span><br><span class="line">timeit.timeit(<span class="string">&quot;filter(None, your_list)&quot;</span>, <span class="string">&#x27;your_list= 10*[&quot;a&quot;, &quot;b&quot;, &quot;&quot;, &quot;&quot;, &quot;c&quot;, &quot;&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;&quot;, &quot;g&quot;]&#x27;</span>, number = <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一，第二参数都要用字符串，这要注意的。</span></span><br><span class="line"><span class="comment"># 第二个参数，是setup，也就是准备的数据。</span></span><br><span class="line"><span class="comment"># 第三个参数，number 表示执行 number 次其 timeit() 方法</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以字符串书写python代码，并给timeit方法传值。</p><p>如果是多行的代码，可以采用python多行字符串来传值即可</p><p>从测试结果，也可以看出各类for循环的性能。</p><p>map函数 优于 列表生成式 优于 普通for循环。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python优雅去除list中空字符串</title>
      <link href="article/2500387955/"/>
      <url>article/2500387955/</url>
      
        <content type="html"><![CDATA[<p>简介</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: webStrom 2021.3.1 x64  </span><br><span class="line">语言: Python 3.9.1</span><br></pre></td></tr></table></figure><hr><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>今日，因公司爬虫采集需要，做数据湖初步清洗时，经常会碰到一类问题。</p><p>需要给去除python列表中那些空的元素，比如：None,””,’’等等</p><p>处理方式，确实多种多样，很多都是for循环直接完事儿。</p><p>不过，我有一妙法与诸位分享。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>假如存在一个列表：</p><blockquote><p>your_list = [1,2,41,41,51,51,””,None,’’]</p></blockquote><p>执行如下语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">filter</span>(<span class="literal">None</span>, your_list)</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>空字符串 会被程序判定为 False</p><p>filter(None, your_list)， None代表不输入函数，也就是</p><p>[x for x in your_list if x]</p><p>利用Python的原生函数filter，可以轻松实现对列表元素的过滤。</p><p>亦可以结合lambda函数，进行较复杂的处理。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python列表中删除重复的字典</title>
      <link href="article/2750680698/"/>
      <url>article/2750680698/</url>
      
        <content type="html"><![CDATA[<p>我有一个字典列表，我想删除具有相同键和值对的字典。<br>Python列表中删除重复的字典，记录一下解决办法。</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: webStrom 2021.3.1 x64  </span><br><span class="line">语言: Python 3.9.1</span><br></pre></td></tr></table></figure><hr><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>某日，在B站直播间，采集黑名单的名录，保存的时候，有了一个需求。</p><p>黑名单禁言时间是有时间限制的，禁言到期以后，黑名单就会自动消失。</p><p>那定时采集黑名单保存更新的时候就必然会出现名单重复的情况。</p><p>所以，为列表中重复的字典进行去重。</p><h1 id="需求示例"><a href="#需求示例" class="headerlink" title="需求示例"></a>需求示例</h1><p>列表:[{‘a’: 123}, {‘b’: 123}, {‘a’: 123}]</p><p>希望达到的效果:[{‘a’: 123}, {‘b’: 123}]</p><p>另一个例子:</p><p>列表:[{‘a’: 123, ‘b’: 1234}, {‘a’: 3222, ‘b’: 1234}, {‘a’: 123, ‘b’: 1234}]</p><p>希望达到的效果:[{‘a’: 123, ‘b’: 1234}, {‘a’: 3222, ‘b’: 1234}]</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>试过，都说好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">dict</span>(t) <span class="keyword">for</span> t <span class="keyword">in</span> &#123;<span class="built_in">tuple</span>(d.items()) <span class="keyword">for</span> d <span class="keyword">in</span> l&#125;]</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>该方法，主要是将字典列表转换为元组列表，其中元组包含字典的键值对。</p><p>判断元组是否已经存在即可。</p><p>执行比较难理解的点主要是列表生成式中for循环的嵌套，其实也没什么了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：meta标签的拓展</title>
      <link href="article/54558/"/>
      <url>article/54558/</url>
      
        <content type="html"><![CDATA[<p>最近通过meta标签控制referrer策略的应用后，想深入了解meta标签</p><meta> 元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。<meta> 标签位于文档的头部，不包含任何内容。<meta> 标签的属性定义了与文档相关联的名称/值对。<span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: webStrom 2021.3.1 x64  </span><br><span class="line">语言: HTML</span><br></pre></td></tr></table></figure><hr><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><meta> 元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。<meta> 标签位于文档的头部，不包含任何内容。<meta> 标签的属性定义了与文档相关联的名称/值对。<hr><h1 id="HTML-与-XHTML-之间的差异"><a href="#HTML-与-XHTML-之间的差异" class="headerlink" title="HTML 与 XHTML 之间的差异"></a>HTML 与 XHTML 之间的差异</h1><p>在 HTML 中，<meta> 标签没有结束标签。</p><p>在 XHTML 中，<meta> 标签必须被正确地关闭。即:<meta></meta></p><hr><h1 id="提示和注释"><a href="#提示和注释" class="headerlink" title="提示和注释"></a>提示和注释</h1><p>注释：<meta> 标签永远位于 head 元素内部。</p><p>注释：元数据总是以名称/值的形式被成对传递的。</p><hr><h1 id="属性和值的用法"><a href="#属性和值的用法" class="headerlink" title="属性和值的用法"></a>属性和值的用法</h1><h2 id="必须属性"><a href="#必须属性" class="headerlink" title="必须属性"></a>必须属性</h2><h3 id="name-属性"><a href="#name-属性" class="headerlink" title="name 属性"></a>name 属性</h3><p>name 属性提供了名称/值对中的名称。HTML 和 XHTML 标签都没有指定任何预先定义的 <meta> 名称。通常情况下，您可以自由使用对自己和源文档的读者来说富有意义的名称。</p><p>“keywords” 是一个经常被用到的名称。它为文档定义了一组关键字。某些搜索引擎在遇到这些关键字时，会用这些关键字对文档进行分类。</p><p>类似这样的 meta 标签可能对于进入搜索引擎的索引有帮助：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML,ASP,PHP,SQL&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果没有提供 name 属性，那么名称/值对中的名称会采用 http-equiv 属性的值。</p><h2 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h2><h3 id="http-equiv-属性"><a href="#http-equiv-属性" class="headerlink" title="http-equiv 属性"></a>http-equiv 属性</h3><p>http-equiv 属性为名称/值对提供了名称。并指示服务器在发送实际的文档之前先在要传送给浏览器的 MIME 文档头部包含名称/值对。</p><p>当服务器向浏览器发送文档时，会先发送许多名称/值对。虽然有些服务器会发送许多这种名称/值对，但是所有服务器都至少要发送一个：content-type:text/html。这将告诉浏览器准备接受一个 HTML 文档。</p><p>使用带有 http-equiv 属性的 <meta> 标签时，服务器将把名称/值对添加到发送给浏览器的内容头部。例如，添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-referrer|no-referrer-when-downgrade|origin|origin-when-crossorigin|unsafe-url&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;charset&quot;</span> <span class="attr">content</span>=<span class="string">&quot;iso-8859-1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;expires&quot;</span> <span class="attr">content</span>=<span class="string">&quot;31 Dec 2008&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样发送到浏览器的头部就应该包含：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">content-type: text/html</span><br><span class="line">charset:iso-8859-1</span><br><span class="line">expires:31 Dec 2008</span><br></pre></td></tr></table></figure><p>当然，只有浏览器可以接受这些附加的头部字段，并能以适当的方式使用它们时，这些字段才有意义。</p><h3 id="content-属性"><a href="#content-属性" class="headerlink" title="content 属性"></a>content 属性</h3><p>content 属性提供了名称/值对中的值。该值可以是任何有效的字符串。</p><p>content 属性始终要和 name 属性或 http-equiv 属性一起使用。</p><h3 id="scheme-属性"><a href="#scheme-属性" class="headerlink" title="scheme 属性"></a>scheme 属性</h3><p>scheme 属性用于指定要用来翻译属性值的方案。</p><p>此方案应该在由 <head> 标签的 profile 属性指定的概况文件中进行了定义。</p><hr><h1 id="常用方法示例"><a href="#常用方法示例" class="headerlink" title="常用方法示例"></a>常用方法示例</h1><ol><li>&lt;meta name=”参数” content=”具体的描述”&gt;</li></ol><ul><li>keywords：网页关键字</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;otaku,sex&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>description：网站内容的描述，网站主要内容</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;holy shit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>viewport：移动端视口，仅供移动设备使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>robots：搜索引擎爬虫的索引方式，content不填默认为all</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;all|none|index|noindex|follow|nofollow&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>none : 搜索引擎将忽略此网页，等价于noindex，nofollow</p><p>noindex : 搜索引擎不索引此网页</p><p>nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页</p><p>all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow</p><p>index : 搜索引擎索引此网页</p><p>follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页</p><ul><li><p>author：作者</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Sheldon&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>author：作者</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Sheldon&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>revisit-after：搜索引擎爬虫重访时间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;revisit-after&quot;</span> <span class="attr">content</span>=<span class="string">&quot;one week&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure></li><li><p>copyright：标注版权信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;copyright&quot;</span> <span class="attr">content</span>=<span class="string">&quot;RaXianch&quot;</span>&gt;</span> //代表该网站为RaXianch版权所有</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>&lt;meta http-equiv=”参数” content=”具体的描述”&gt;</li></ol><ul><li><p>content-Type：声明字符编码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span>  // H5新增，推荐使用</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span> //旧的HTML</span><br></pre></td></tr></table></figure></li><li><p>cache-control：指定请求和响应遵循的缓存机制</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;cache-control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>content的值：</p><p>no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存</p><p>no-store: 不允许缓存，每次都要去服务器上，下载完整的响应</p><p>public : 缓存所有响应，但并非必须。因为max-age也可以做到相同效果</p><p>private : 只为单个用户缓存，因此不允许任何中继进行缓存</p><p>maxage : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60表示响应可以再缓存和重用 60 秒。</p><p>no-siteapp：禁止百度自动转码</p></li><li><p>expires：网页到期时间，到期后网页必须到服务器上重新传输。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;expires&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Sunday 26 October 2018 10:00 GMT&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>refresh：自动刷新并指向某页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;2; URL=http://www.sina.com/&quot;</span>&gt;</span> //意思是2秒后跳转新浪</span><br></pre></td></tr></table></figure></li><li><p>X-UA-Compatible：浏览器采取何种版本渲染当前页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span> //指定IE和Chrome使用最新版本渲染当前页面</span><br></pre></td></tr></table></figure></li><li><p>Set-Cookie：为页面定义cookie<br>如果网页过期，那么这个网页存在本地的cookies也会被自动删除。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Set-Cookie&quot;</span> <span class="attr">content</span>=<span class="string">&quot;name, date&quot;</span>&gt;</span> //格式</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web前端 </category>
          
          <category> html </category>
          
          <category> 小技能GET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> web </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> html </tag>
            
            <tag> meta </tag>
            
            <tag> referrer </tag>
            
            <tag> 防盗链 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：referrer策略的认识</title>
      <link href="article/46153/"/>
      <url>article/46153/</url>
      
        <content type="html"><![CDATA[<p>爬虫采集中，请求头字段，对它较为熟悉，但是在html的meta标签中，亦不知道Referrer如何应用。</p><p>Referrer,是一种引用策略，可以用来防止图片或视频被盗。</p><p>它的原理是：http 协议中，如果从一个网页跳到另一个网页，http 头字段里面会带个 Referrer。</p><p>图片服务器通过检测 Referrer 是否来自规定域名，来进行防盗链。</p><p>如果没有设置referrer，那就可以直接绕过防盗链机制，直接使用或盗取。</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: webStrom 2021.3.1 x64  </span><br><span class="line">语言: HTML</span><br></pre></td></tr></table></figure><hr><h1 id="referrer-的值"><a href="#referrer-的值" class="headerlink" title="referrer 的值"></a>referrer 的值</h1><ol><li><p>no-referrer：所有请求不发送 referrer。</p></li><li><p>no-referrer-when-downgrade（默认值）：当请求安全级别下降时不发送 referrer。目前，只有一种情况会发生安全级别下降，即从 HTTPS 到 HTTP。HTTPS 到 HTTP 的资源引用和链接跳转都不会发送 referrer。</p></li><li><p>same-origin：对于同源的链接和引用，会发送referrer，其他的不会。</p></li><li><p>origin：在任何情况下仅发送源信息作为引用地址。源信息包括访问协议和域名。</p></li><li><p>strict-origin：在安全级别下降时不发送 referrer；而在同等安全级别的情况下仅发送源信息。注意：这个是新加的标准，有些浏览器可能还不支持。</p></li><li><p>origin-when-cross-origin：同源的链接和引用，会发送完全的 referrer 信息；但非同源链接和引用时，只发送源信息。</p></li><li><p>strict-origin-when-cross-origin：同源的链接和引用，会发送 referrer。安全级别下降时不发送 referrer。其它情况下发送源信息。注意：这个是新加的标准，有些浏览器可能还不支持。</p></li><li><p>unsafe-url：无论是否发生协议降级，无论是本站链接还是站外链接，统统都发送 Referrer 信息。正如其名，这是最宽松而最不安全的策略。</p></li></ol><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><blockquote><p>Referrer-Policy: no-referrer</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-referrer&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Referrer-Policy-设置方法"><a href="#Referrer-Policy-设置方法" class="headerlink" title="Referrer Policy 设置方法"></a>Referrer Policy 设置方法</h1><p>1.CSP（Content Security Policy）<br>CSP（Content Security Policy），是一个跟页面内容安全有关的规范。</p><p>在 HTTP 中通过响应头中的 Content-Security-Policy 字段来告诉浏览器当前页面要使用何种 CSP 策略。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: referrer no-referrer|no-referrer-when-downgrade|origin|origin-when-cross-origin|unsafe-url;</span><br></pre></td></tr></table></figure><p>CSP 的指令和指令值之间以空格分割，多个指令之间用英文分号分割。</p><ol start="2"><li><p>html <meta> 标签<br>如果 content 属性不是合法的取值，浏览器会自动选择 no-referrer 这种最严格的策略。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-referrer|no-referrer-when-downgrade|origin|origin-when-crossorigin|unsafe-url&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过a、area、link元素的 referrer属性</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a href=&quot;http://www.baidu.com&quot; referrer=&quot;no-referrer|origin|unsafe-url&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> web </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> html </tag>
            
            <tag> meta </tag>
            
            <tag> referrer </tag>
            
            <tag> 防盗链 </tag>
            
            <tag> css </tag>
            
            <tag> refer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：如何提高网页的加载速度？</title>
      <link href="article/52952/"/>
      <url>article/52952/</url>
      
        <content type="html"><![CDATA[<p>更换掉了用了三年的hexo主题，</p><p>处于某些美观强迫症，会加一堆图片。</p><p>导致网页加载速度，慢过预期。</p><p>此时，又想起之前尝试用ffmpeg切片加快在线视频播放的事情，</p><p>于是，就想好好去查查资料，整理一下关于如何优化网页加载速度的方案。</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10   </span><br></pre></td></tr></table></figure><hr><h1 id="运维层面"><a href="#运维层面" class="headerlink" title="运维层面"></a>运维层面</h1><ul><li>尽可能的将html,js,css部署到cbn服务器上</li><li>开启etag或者过期时间，以便浏览器端尽可能的使用缓存</li><li>开启http的gzip压缩</li><li>开启http/2开启HSTS以便让上一条总是生效</li><li>开启 http concat静态资源使用不同的域名，以便减少cookie体积</li></ul><h1 id="web前端开发层面的优化"><a href="#web前端开发层面的优化" class="headerlink" title="web前端开发层面的优化"></a>web前端开发层面的优化</h1><ul><li>代码丑化（压缩）</li><li>图片矢量化，比如icon font，svg等</li><li>js和css的http请求合并。（注意开启了http/2的时候，不要滥用，让浏览器充分发挥它的缓存特性）</li><li>雪碧图(精灵)</li><li>调整加载顺序，先html，后css，最后js使用服务器端预渲染技术</li><li>图片懒加载</li><li>内容分页加载或懒加载</li></ul><p>最后四条优化的是用户感知层面上的速度，其中最后三条甚至会增加网络传输的总数据量，但会让用户觉得反而速度快了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疑难杂症：解决Hexo博客引用网络图片无法显示</title>
      <link href="article/18895/"/>
      <url>article/18895/</url>
      
        <content type="html"><![CDATA[<p>某日，更新博客主题，为了优化图片的加载速度。</p><p>决定使用B站作为图床，通过引用图片链接的方式，</p><p>来达到优化博客图片的目的。</p><p>结果发现图片无法显示。</p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: webStrom 2021.3.1 x64  </span><br><span class="line">语言: nodeJs v14.15.4</span><br><span class="line">框架: hexo &quot;5.3.0&quot;</span><br><span class="line">theme: [Butterfly  &quot;3.6.1&quot;]</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p><a target="_blank" rel="noopener" href="https://www.bilibili.com/">bilibili</a>上的图片地址，都是以此域名开头</p><blockquote><p><a target="_blank" rel="noopener" href="https://i0.hdslb.com/">https://i0.hdslb.com</a></p></blockquote><p>按F12，通过浏览器开发工具可以看出。</p><p>在外链引用图片链接的时候，凡是这个地址的图片都会403。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://i0.hdslb.com/bfs/album/89cad6a27ea92985a463342334b0933be8d843e2.jpg</span><br></pre></td></tr></table></figure><p>但是使用其他图床的图片地址，图片能够正常显示。</p><h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>经过对比，初步认定<a target="_blank" rel="noopener" href="https://www.bilibili.com/">bilibili</a>的图床做了防盗链。</p><p>Hexo 博客在引用图片链接的时候可能携带了refer的请求头。</p><p>照着这个思路，寻找解决办法。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法 1"></a>方法 1</h2><blockquote><meta name="referrer" content="no-referrer"/></blockquote><p>将这一行html,写到自己博文的前面，即可。<br>markdown 语法在渲染时，会直接将该html语句加到博文页面上。</p><h2 id="方法-2"><a href="#方法-2" class="headerlink" title="方法 2"></a>方法 2</h2><p>该方法比较复杂，但是原理与 方法 1 相同。</p><p>某些hexo主题支持直接给所有页面添加特定代码段的设置。</p><p>例如: butterfly</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">  <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class="line">   - &lt;meta name=<span class="string">&quot;referrer&quot;</span> content=<span class="string">&quot;same-origin&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">  bottom:</span><br><span class="line">  <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>如果自己使用的主题，没有相关设置。<br>可以直接进入主题文件中修改与_post生成相关的文件。<br>由于各个主题差异很大，就不便明说了。<br>适合高玩。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疑难杂症：nodejs警告：found 3 vulnerabilities (2 low, 1 high)</title>
      <link href="article/41407/"/>
      <url>article/41407/</url>
      
        <content type="html"><![CDATA[<h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: webStrom 2021.3.1 x64  </span><br><span class="line">语言: nodeJs v14.15.4</span><br><span class="line">框架: hexo &quot;5.3.0&quot;</span><br><span class="line">theme: [Butterfly  &quot;3.6.1&quot;]</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>提示警告</p><blockquote><p>found 3 vulnerabilities (2 low, 1 high)</p></blockquote><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>主要看最后的信息提示</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">found 3 vulnerabilities (2 low, 1 high)</span><br><span class="line">  run `npm audit fix` to fix them, or `npm audit` for details</span><br></pre></td></tr></table></figure><p>按照提示输入命令</p><blockquote><p>npm audit fix</p></blockquote><blockquote><p>npm audit fix –force</p></blockquote><blockquote><p>npm audit</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：使用Rclone挂载GoogleDriver团队盘到Ubuntu</title>
      <link href="article/60373/"/>
      <url>article/60373/</url>
      
        <content type="html"><![CDATA[<p>想搞一份大盘机!Rclone是真的牛辟！</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： ubuntu18.04  </span><br><span class="line">IDE: JetBrains Pycharm 2019.2.4 x64  </span><br><span class="line">语言: Python 3.7.4</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>想把申请到的googleDriver团队盘挂载到自己的VPS上去，达到扩容的和文件管理的目的。</p><p>全文唯一的难点只有Rclone创建remote,只是步骤多一点，但是并不复杂和难。</p><p>像我这种浮躁又怕麻烦的人都能搞定，相信很多人都能搞定。</p><h1 id="安装Rclone"><a href="#安装Rclone" class="headerlink" title="安装Rclone"></a>安装Rclone</h1><p>使用官方的安装脚本文件</p><blockquote><p>curl <a target="_blank" rel="noopener" href="https://rclone.org/install.sh">https://rclone.org/install.sh</a> | bash</p></blockquote><p>输入命令，测试安装是否成功</p><blockquote><p>rclone</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  rclone [flags]</span><br><span class="line">  rclone [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  about           Get quota information from the remote.</span><br><span class="line">  authorize       Remote authorization.</span><br><span class="line">  cachestats      Print cache stats for a remote</span><br><span class="line">  cat             Concatenates any files and sends them to stdout.</span><br><span class="line">  check           Checks the files in the source and destination match.</span><br><span class="line">  cleanup         Clean up the remote if possible</span><br><span class="line">  config          Enter an interactive configuration session.</span><br><span class="line">  copy            Copy files from source to dest, skipping already copied</span><br><span class="line">  copyto          Copy files from source to dest, skipping already copied</span><br><span class="line">  copyurl         Copy url content to dest.</span><br><span class="line">  cryptcheck      Cryptcheck checks the integrity of a crypted remote.</span><br><span class="line">  cryptdecode     Cryptdecode returns unencrypted file names.</span><br><span class="line">  dbhashsum       Produces a Dropbox hash file for all the objects in the path.</span><br><span class="line">  dedupe          Interactively find duplicate files and delete/rename them.</span><br><span class="line">  delete          Remove the contents of path.</span><br><span class="line">  deletefile      Remove a single file from remote.</span><br><span class="line">  genautocomplete Output completion script for a given shell.</span><br><span class="line">  gendocs         Output markdown docs for rclone to the directory supplied.</span><br><span class="line">  hashsum         Produces an hashsum file for all the objects in the path.</span><br><span class="line">  help            Show help for rclone commands, flags and backends.</span><br><span class="line">  link            Generate public link to file/folder.</span><br><span class="line">  listremotes     List all the remotes in the config file.</span><br><span class="line">  ls              List the objects in the path with size and path.</span><br><span class="line">  lsd             List all directories/containers/buckets in the path.</span><br><span class="line">  lsf             List directories and objects in remote:path formatted for parsing</span><br><span class="line">  lsjson          List directories and objects in the path in JSON format.</span><br><span class="line">  lsl             List the objects in path with modification time, size and path.</span><br><span class="line">  md5sum          Produces an md5sum file for all the objects in the path.</span><br><span class="line">  mkdir           Make the path if it doesn&#x27;t already exist.</span><br><span class="line">  mount           Mount the remote as file system on a mountpoint.</span><br><span class="line">  move            Move files from source to dest.</span><br><span class="line">  moveto          Move file or directory from source to dest.</span><br><span class="line">  ncdu            Explore a remote with a text based user interface.</span><br><span class="line">  obscure         Obscure password for use in the rclone.conf</span><br><span class="line">  purge           Remove the path and all of its contents.</span><br><span class="line">  rc              Run a command against a running rclone.</span><br><span class="line">  rcat            Copies standard input to file on remote.</span><br><span class="line">  rcd             Run rclone listening to remote control commands only.</span><br><span class="line">  rmdir           Remove the path if empty.</span><br><span class="line">  rmdirs          Remove empty directories under the path.</span><br><span class="line">  serve           Serve a remote over a protocol.</span><br><span class="line">  settier         Changes storage class/tier of objects in remote.</span><br><span class="line">  sha1sum         Produces an sha1sum file for all the objects in the path.</span><br><span class="line">  size            Prints the total size and number of objects in remote:path.</span><br><span class="line">  sync            Make source and dest identical, modifying destination only.</span><br><span class="line">  touch           Create new file or change file modification time.</span><br><span class="line">  tree            List the contents of the remote in a tree like fashion.</span><br><span class="line">  version         Show the version number.</span><br><span class="line"></span><br><span class="line">Use &quot;rclone [command] --help&quot; for more information about a command.</span><br><span class="line">Use &quot;rclone help flags&quot; for to see the global flags.</span><br><span class="line">Use &quot;rclone help backends&quot; for a list of supported services.</span><br></pre></td></tr></table></figure><p>出这么一大溜help信息，说明装好了。</p><h1 id="配置Rclone"><a href="#配置Rclone" class="headerlink" title="配置Rclone"></a>配置Rclone</h1><p>安装完成后，开始添加挂载</p><p>输入rclone config来开始设置</p><p>首先添加一个新的挂载</p><blockquote><p>rclone config</p></blockquote><h2 id="创建remote"><a href="#创建remote" class="headerlink" title="创建remote"></a>创建remote</h2><p>输入 n 回车 ，新建 remote</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n) New remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">n/s/q&gt; n</span><br></pre></td></tr></table></figure><h2 id="设置remote名称"><a href="#设置remote名称" class="headerlink" title="设置remote名称"></a>设置remote名称</h2><p>配置名称，随便填</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name&gt; googleDriverTeam1</span><br></pre></td></tr></table></figure><h2 id="选择remote创建的类型"><a href="#选择remote创建的类型" class="headerlink" title="选择remote创建的类型"></a>选择remote创建的类型</h2><p>因为我是对接谷歌团队盘，所以这里选13，</p><p>看好是选Google Drive这个选项，</p><p>rclone更新以后可能选项的数字会有变化</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">Type of storage to configure.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line"> 1 / 1Fichier</span><br><span class="line">   \ &quot;fichier&quot;</span><br><span class="line"> 2 / Alias for an existing remote</span><br><span class="line">   \ &quot;alias&quot;</span><br><span class="line"> 3 / Amazon Drive</span><br><span class="line">   \ &quot;amazon cloud drive&quot;</span><br><span class="line"> 4 / Amazon S3 Compliant Storage Provider (AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, etc)</span><br><span class="line">   \ &quot;s3&quot;</span><br><span class="line"> 5 / Backblaze B2</span><br><span class="line">   \ &quot;b2&quot;</span><br><span class="line"> 6 / Box</span><br><span class="line">   \ &quot;box&quot;</span><br><span class="line"> 7 / Cache a remote</span><br><span class="line">   \ &quot;cache&quot;</span><br><span class="line"> 8 / Citrix Sharefile</span><br><span class="line">   \ &quot;sharefile&quot;</span><br><span class="line"> 9 / Dropbox</span><br><span class="line">   \ &quot;dropbox&quot;</span><br><span class="line">10 / Encrypt/Decrypt a remote</span><br><span class="line">   \ &quot;crypt&quot;</span><br><span class="line">11 / FTP Connection</span><br><span class="line">   \ &quot;ftp&quot;</span><br><span class="line">12 / Google Cloud Storage (this is not Google Drive)</span><br><span class="line">   \ &quot;google cloud storage&quot;</span><br><span class="line">13 / Google Drive</span><br><span class="line">   \ &quot;drive&quot;</span><br><span class="line">14 / Google Photos</span><br><span class="line">   \ &quot;google photos&quot;</span><br><span class="line">15 / Hubic</span><br><span class="line">   \ &quot;hubic&quot;</span><br><span class="line">16 / In memory object storage system.</span><br><span class="line">   \ &quot;memory&quot;</span><br><span class="line">17 / JottaCloud</span><br><span class="line">   \ &quot;jottacloud&quot;</span><br><span class="line">18 / Koofr</span><br><span class="line">   \ &quot;koofr&quot;</span><br><span class="line">19 / Local Disk</span><br><span class="line">   \ &quot;local&quot;</span><br><span class="line">20 / Mail.ru Cloud</span><br><span class="line">   \ &quot;mailru&quot;</span><br><span class="line">21 / Mega</span><br><span class="line">   \ &quot;mega&quot;</span><br><span class="line">22 / Microsoft Azure Blob Storage</span><br><span class="line">   \ &quot;azureblob&quot;</span><br><span class="line">23 / Microsoft OneDrive</span><br><span class="line">   \ &quot;onedrive&quot;</span><br><span class="line">24 / OpenDrive</span><br><span class="line">   \ &quot;opendrive&quot;</span><br><span class="line">25 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH)</span><br><span class="line">   \ &quot;swift&quot;</span><br><span class="line">26 / Pcloud</span><br><span class="line">   \ &quot;pcloud&quot;</span><br><span class="line">27 / Put.io</span><br><span class="line">   \ &quot;putio&quot;</span><br><span class="line">28 / QingCloud Object Storage</span><br><span class="line">   \ &quot;qingstor&quot;</span><br><span class="line">29 / SSH/SFTP Connection</span><br><span class="line">   \ &quot;sftp&quot;</span><br><span class="line">30 / Sugarsync</span><br><span class="line">   \ &quot;sugarsync&quot;</span><br><span class="line">31 / Transparently chunk/split large files</span><br><span class="line">   \ &quot;chunker&quot;</span><br><span class="line">32 / Union merges the contents of several remotes</span><br><span class="line">   \ &quot;union&quot;</span><br><span class="line">33 / Webdav</span><br><span class="line">   \ &quot;webdav&quot;</span><br><span class="line">34 / Yandex Disk</span><br><span class="line">   \ &quot;yandex&quot;</span><br><span class="line">35 / http Connection</span><br><span class="line">   \ &quot;http&quot;</span><br><span class="line">36 / premiumize.me</span><br><span class="line">   \ &quot;premiumizeme&quot;</span><br><span class="line">Storage&gt; 13 # 选择13，看好是选Google Drive这个选项，rclone更新以后可能选项的数字会有变化</span><br><span class="line">** See help for drive backend at: https://rclone.org/drive/ **</span><br></pre></td></tr></table></figure><h2 id="填写-Client-Id-amp-amp-Client-Secret"><a href="#填写-Client-Id-amp-amp-Client-Secret" class="headerlink" title="填写 Client Id &amp;&amp; Client Secret"></a>填写 Client Id &amp;&amp; Client Secret</h2><p>可以直接回车，使用RCLONE自己的Client Id来生成remote</p><p>但是，这是有弊端的。Rclone官方也说了。</p><p>因为Client Id和Client Secret使用率太高了，很多人都在用。</p><p>谷歌对每一个client应用都是有限流的，一堆人去挤着用，会发生什么呢？自己想象（一天最大流量是750G）</p><p>所以，能够自己注册谷歌client是最好的 <a target="_blank" rel="noopener" href="https://console.developers.google.com/apis/credentials/oauthclient?project=raxianchapi&folder=&organizationId=">googleApi</a>。</p><p>当然如果觉得麻烦就直接回车，反正以后也是可以修改添加的。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Google Application Client Id</span><br><span class="line">Setting your own is recommended.</span><br><span class="line">See https://rclone.org/drive/#making-your-own-client-id for how to create your own.</span><br><span class="line">If you leave this blank, it will use an internal key which is low performance.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">client_id&gt; # 回车</span><br><span class="line">Google Application Client Secret</span><br><span class="line">Setting your own is recommended.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">client_secret&gt; # 回车</span><br></pre></td></tr></table></figure><h2 id="选择操作权限"><a href="#选择操作权限" class="headerlink" title="选择操作权限"></a>选择操作权限</h2><p>都是自己用的话，直接选1，所有权限</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Scope that rclone should use when requesting access from drive.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line"> 1 / Full access all files, excluding Application Data Folder.</span><br><span class="line">   \ &quot;drive&quot;</span><br><span class="line"> 2 / Read-only access to file metadata and file contents.</span><br><span class="line">   \ &quot;drive.readonly&quot;</span><br><span class="line">   / Access to files created by rclone only.</span><br><span class="line"> 3 | These are visible in the drive website.</span><br><span class="line">   | File authorization is revoked when the user deauthorizes the app.</span><br><span class="line">   \ &quot;drive.file&quot;</span><br><span class="line">   / Allows read and write access to the Application Data folder.</span><br><span class="line"> 4 | This is not visible in the drive website.</span><br><span class="line">   \ &quot;drive.appfolder&quot;</span><br><span class="line">   / Allows read-only access to file metadata but</span><br><span class="line"> 5 | does not allow any access to read or download file content.</span><br><span class="line">   \ &quot;drive.metadata.readonly&quot;</span><br><span class="line">scope&gt; 1 # 选1 回车</span><br></pre></td></tr></table></figure><h2 id="根目录设置"><a href="#根目录设置" class="headerlink" title="根目录设置"></a>根目录设置</h2><p>用不到这个设置，直接回车</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ID of the root folder</span><br><span class="line">Leave blank normally.</span><br><span class="line"></span><br><span class="line">Fill in to access &quot;Computers&quot; folders (see docs), or for rclone to use</span><br><span class="line">a non root folder as its starting point.</span><br><span class="line"></span><br><span class="line">Note that if this is blank, the first time rclone runs it will fill it</span><br><span class="line">in with the ID of the root folder.</span><br><span class="line"></span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">root_folder_id&gt; # 回车</span><br><span class="line">Service Account Credentials JSON file path</span><br><span class="line">Leave blank normally.</span><br><span class="line">Needed only if you want use SA instead of interactive login.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">service_account_file&gt; # 回车</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="设置选项"><a href="#设置选项" class="headerlink" title="设置选项"></a>设置选项</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Edit advanced config? (y/n)</span><br><span class="line">y) Yes</span><br><span class="line">n) No (default)</span><br><span class="line">y/n&gt; n # 选n</span><br><span class="line">Remote config</span><br><span class="line">Use auto config?</span><br><span class="line"> * Say Y if not sure</span><br><span class="line"> * Say N if you are working on a remote or headless machine</span><br><span class="line">y) Yes (default)</span><br><span class="line">n) No</span><br><span class="line">y/n&gt; n # 这个auto linux 好像用不了了</span><br></pre></td></tr></table></figure><h2 id="谷歌账号授权"><a href="#谷歌账号授权" class="headerlink" title="谷歌账号授权"></a>谷歌账号授权</h2><p>就是用自己谷歌授权给开发者创建的client应用，授权让它能够连接和操作你的谷歌网盘。正常操作，放心。</p><p>将<a target="_blank" rel="noopener" href="https://accounts.google.com/o/oauth2/auth?XXXXX">https://accounts.google.com/o/oauth2/auth?XXXXX</a> 这一大串地址复制下来，放到网页浏览器里打开</p><p>(首先你要翻墙，然后你要有谷歌账号并且登陆)，点击允许授权，会出现一个授权码，点击复制，粘贴过来。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Please go to the following link: https://accounts.google.com/o/oauth2/auth?access_type=offline&amp;client_id=322604643123-ru3spb69lmg3nmo1gr1uqf1etb32tbs2.apps.googleusercontent.com&amp;redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&amp;response_type=code&amp;scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive&amp;state=tvtLIvwU8axrPSDxWXbIpg</span><br><span class="line">Log in and authorize rclone for access</span><br><span class="line">Enter verification code&gt; # 授权码每个人都不一样，following link 也不一样。</span><br></pre></td></tr></table></figure><h2 id="是否是谷歌团队盘"><a href="#是否是谷歌团队盘" class="headerlink" title="是否是谷歌团队盘"></a>是否是谷歌团队盘</h2><p>因为使用的是团队盘，当然选y</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Log in and authorize rclone for access</span><br><span class="line">Enter verification code&gt; 4/0AGPbXQ9thkw4XynGuNP91QxL4g9Mz7Rubv7M_lajOCwd8GqHuTlOzI</span><br><span class="line">Configure this as a team drive?</span><br><span class="line">y) Yes</span><br><span class="line">n) No (default)</span><br><span class="line">y/n&gt; y</span><br></pre></td></tr></table></figure><h2 id="选择要挂载的团队盘"><a href="#选择要挂载的团队盘" class="headerlink" title="选择要挂载的团队盘"></a>选择要挂载的团队盘</h2><p>团队盘就是谷歌共享盘下的一个文件夹，一个文件夹算一个团队盘。</p><p>因为我有两个团队盘，并且命名了ZIO-X，，</p><p>所以，这里能看到两个选项，一个remote只能绑定一个团队盘。</p><p>以后多创几个remote里挂载这些团队盘就好。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Fetching team drive list...</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line"> 1 / ZIO-1</span><br><span class="line">   \ &quot;xxxx&quot;</span><br><span class="line"> 2 / ZIO-2</span><br><span class="line">   \ &quot;xxxx&quot;</span><br><span class="line">Enter a Team Drive ID&gt; # 每个人都不一样，根据自己需求选择要绑定哪一个团队盘</span><br></pre></td></tr></table></figure><h2 id="信息核实"><a href="#信息核实" class="headerlink" title="信息核实"></a>信息核实</h2><p>最后核实一下remote的各项参数，确认就敲个y就行</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--------------------</span><br><span class="line">[ZIO-2]</span><br><span class="line">type = drive</span><br><span class="line">client_id = XXX</span><br><span class="line">client_secret = XXX</span><br><span class="line">scope = drive</span><br><span class="line">token = XXX</span><br><span class="line">team_drive = XXX</span><br><span class="line">--------------------</span><br><span class="line">y) Yes this is OK (default)</span><br><span class="line">e) Edit this remote</span><br><span class="line">d) Delete this remote</span><br><span class="line">y/e/d&gt; y</span><br></pre></td></tr></table></figure><h2 id="romete列表"><a href="#romete列表" class="headerlink" title="romete列表"></a>romete列表</h2><p>会显示当前机器上保存的romete的列表，看看就好，敲q退出</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Current remotes:</span><br><span class="line"></span><br><span class="line">Name                 Type</span><br><span class="line">====                 ====</span><br><span class="line">ZIO-2                drive</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e/n/d/r/c/s/q&gt; q</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>到这里，rclone 配置完成。</p><h1 id="映射谷歌网盘到文件夹"><a href="#映射谷歌网盘到文件夹" class="headerlink" title="映射谷歌网盘到文件夹"></a>映射谷歌网盘到文件夹</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"># 找个舒适的位置创建空文件夹,mkdir 命令会用吧？不用教吧？</span><br><span class="line"># 新建本地文件夹，路径自己定，即下面的LocalFolder</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">mkdir /home/gdDisk/ZIO-2</span><br><span class="line"></span><br><span class="line"># 挂载为磁盘，下面的DriveName、Folder、LocalFolder参数根据说明自行替换</span><br><span class="line">rclone mount DriveName:Folder LocalFolder --copy-links --no-gzip-encoding</span><br><span class="line"></span><br><span class="line"># 例如：</span><br><span class="line">rclone mount ZIO-2:RXFiles /home/gdDisk/ZIO-2 \</span><br><span class="line"> --no-check-certificate \</span><br><span class="line"> --no-gzip-encoding \</span><br><span class="line"> --copy-links \</span><br><span class="line"> --umask 0000 \</span><br><span class="line"> --default-permissions \</span><br><span class="line"> --allow-non-empty \</span><br><span class="line"> --allow-other \</span><br><span class="line"> --transfers 1 \</span><br><span class="line"> --buffer-size 64M \</span><br><span class="line"> --low-level-retries 200 \</span><br><span class="line"> --dir-cache-time 12h \</span><br><span class="line"> --vfs-read-chunk-size 32M \</span><br><span class="line"> --vfs-read-chunk-size-limit 1G</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 对部分参数解释一下</span><br><span class="line">DriveName：就是之前用rclone创建remote的名称</span><br><span class="line">Folder：自己定，也可以不改。凡是rclone上传的文件都会在该谷歌团队盘的下一个名为“Folder”的文件夹里</span><br><span class="line">LocalFolder：本地的绝对路径 比如 /home/gdDisk/ZIO-2</span><br><span class="line"></span><br><span class="line"># 如果涉及到读取使用，比如使用H5等在线播放，就在后面多加上以下三条参数</span><br><span class="line">--dir-cache-time 12h</span><br><span class="line">--vfs-read-chunk-size 32M</span><br><span class="line">--vfs-read-chunk-size-limit 1G</span><br><span class="line"></span><br><span class="line"># 优化参数</span><br><span class="line">--transfers：该参数是最大同时传输任务数量，如果经常传输大文件，或CPU性能不佳，建议设置为单线程，也就是设置为“1”</span><br><span class="line">--buffer-size：该参数为读取每个文件时的内存缓冲区大小，控制rclone上传和挂载的时候的内存占用</span><br><span class="line">--low-level-retries：该参数为传输文件没速度的时候重试次数，没速度的时候，单个会自动睡眠10ms起，然后再重试</span><br><span class="line">-n = --dry-run - 测试运行，用来查看 rclone 在实际运行中会进行哪些操作。</span><br><span class="line">-P = --progress - 显示实时传输进度，500mS 刷新一次，否则默认 1 分钟刷新一次。</span><br><span class="line">--cache-chunk-size SizeSuffi - 块的大小，默认5M，理论上是越大上传速度越快，同时占用内存也越多。如果设置得太大，可能会导致进程中断。</span><br><span class="line">--cache-chunk-total-size SizeSuffix - 块可以在本地磁盘上占用的总大小，默认10G。</span><br><span class="line">--transfers=N - 并行文件数，默认为4。在比较小的内存的VPS上建议调小这个参数，比如128M的小鸡上使用建议设置为1。</span><br><span class="line">--config string - 指定配置文件路径，string为配置文件路径。</span><br><span class="line">--ignore-errors - 跳过错误。比如 OneDrive 在传了某些特殊文件后会提示Failed to copy: failed to open source object: malwareDetected: Malware detected，这会导致后续的传输任务被终止掉，此时就可以加上这个参数跳过错误。但需要注意 RCLONE 的退出状态码不会为0。</span><br></pre></td></tr></table></figure><p>将挂载命令输入终端回车以后，很多人以为是卡住了。</p><p>其实不是的，这因为挂载程序跑在前台了。</p><p>这时候另开一个终端或者ssh输入命令查询是否映射成功</p><blockquote><p>df -h</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@RaXianch:/home# df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            462M     0  462M   0% /dev</span><br><span class="line">tmpfs            99M  7.6M   91M   8% /run</span><br><span class="line">/dev/vda2        99G   15G   81G  15% /</span><br><span class="line">tmpfs           493M   44K  493M   1% /dev/shm</span><br><span class="line">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class="line">tmpfs           493M     0  493M   0% /sys/fs/cgroup</span><br><span class="line">/dev/loop0       92M   92M     0 100% /snap/core/8689</span><br><span class="line">/dev/loop1       94M   94M     0 100% /snap/core/9066</span><br><span class="line">tmpfs            99M     0   99M   0% /run/user/0</span><br><span class="line">ZIO-1:RXFiles   1.0P     0  1.0P   0% /home/gdDisk/ZIO-1</span><br><span class="line">ZIO-2:RXFiles   1.0P     0  1.0P   0% /home/gdDisk/ZIO-2</span><br></pre></td></tr></table></figure><p>就能看到自己挂载的硬盘了，而且大小1PB!</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">### 文件上传</span><br><span class="line">rclone copy /home/backup gdrive:backup  # 本地路径 配置名字:网盘文件夹路径</span><br><span class="line">### 文件下载</span><br><span class="line">rclone copy gdrive:backup /home/backup  # 配置名字:网盘文件夹路径 本地路径</span><br><span class="line">### 新建文件夹</span><br><span class="line">rclone mkdir gdrive:backup              # 配置名字:网盘文件夹路径</span><br><span class="line">### 获取文件夹大小</span><br><span class="line">rclone size gdrive:backup               # 配置名字:网盘文件夹路径</span><br><span class="line"></span><br><span class="line">### 列表</span><br><span class="line">rclone ls gdrive:backup</span><br><span class="line">rclone lsl gdrive:backup # 比上面多一个显示上传时间</span><br><span class="line">rclone lsd gdrive:backup # 只显示文件夹</span><br><span class="line">### 挂载</span><br><span class="line">rclone mount gdrive:mm /root/mm &amp;</span><br><span class="line">### 卸载</span><br><span class="line">fusermount -u  /root/mm</span><br><span class="line"></span><br><span class="line">#### 其他 ####</span><br><span class="line">rclone config - 以控制会话的形式添加rclone的配置，配置保存在.rclone.conf文件中。</span><br><span class="line">rclone copy - 将文件从源复制到目的地址，跳过已复制完成的。</span><br><span class="line">rclone sync - 将源数据同步到目的地址，只更新目的地址的数据。   –dry-run标志来检查要复制、删除的数据</span><br><span class="line">rclone move - 将源数据移动到目的地址,如果要在移动后删除空源目录，请加上 --delete-empty-src-d</span><br><span class="line">rclone delete - 删除指定路径下的文件内容。</span><br><span class="line">rclone purge - 清空指定路径下所有文件数据。</span><br><span class="line">rclone mkdir - 创建一个新目录。</span><br><span class="line">rclone rmdir - 删除空目录。</span><br><span class="line">rclone rmdirs - 删除指定灵境下的空目录。如果加上 --leave-root 参数，则不会删除根目录。</span><br><span class="line">rclone check - 检查源和目的地址数据是否匹配。</span><br><span class="line">rclone ls - 列出指定路径下所有的文件以及文件大小和路径。</span><br><span class="line">rclone lsd - 列出指定路径下所有的目录/容器/桶。</span><br><span class="line">rclone lsl - 列出指定路径下所有文件以及修改时间、文件大小和路径。</span><br><span class="line">rclone lsf - 列出指定路径下所有文件和目录</span><br><span class="line">rclone md5sum - 为指定路径下的所有文件产生一个md5sum文件。</span><br><span class="line">rclone sha1sum - 为指定路径下的所有文件产生一个sha1sum文件。</span><br><span class="line">rclone size - 获取指定路径下，文件内容的总大小。.</span><br><span class="line">rclone version - 查看当前版本。</span><br><span class="line">rclone cleanup - 清空remote。</span><br><span class="line">rclone dedupe - 交互式查找重复文件，进行删除/重命名操作。</span><br><span class="line">fusermount -qzu 挂载网盘的文件夹绝对路径 - 取消挂载网盘，不用了以后一定要取消哦。</span><br></pre></td></tr></table></figure><h1 id="后台运行Rclone挂载网盘"><a href="#后台运行Rclone挂载网盘" class="headerlink" title="后台运行Rclone挂载网盘"></a>后台运行Rclone挂载网盘</h1><p>凡是能后台运行的方法都可以</p><ol><li><p>supervisor</p><p> supervisor 牛逼坏了，复杂但是强大。<br> 实在嫌麻烦也容易，就两个字 宝塔！</p></li><li><p>nohup</p><p> 搜索nphup的用法，满街都是</p><blockquote><p>nohup # 后接填写需要执行的命令，注意前后有空格 &amp;</p></blockquote></li><li><p>screen</p><p> 一般的linux系统都会自带screen,如果没有安装的话，使用</p><blockquote><p>sudo apt-get install screen</p></blockquote><p> 或 centos</p><blockquote><p>sudo yum install screen</p></blockquote><p> 新建一个名字为zio-1的窗口，并在窗口中执行命令</p><blockquote><p>screen -S zio-1 rclone mount ZIO-2:RXFiles /home/gdDisk/ZIO-2 # 巴拉巴拉后面一堆参数</p></blockquote><p> 建议创建一个sh文件来管理screen,这个拓展就不赘述了。</p></li><li><p>systemctl</p><p> 新建一个rclone.server文件，</p><p> Ubuntu 18.04中：</p><blockquote><p>vim /lib/systemd/system/rclone.service</p></blockquote><p> 写入以下内容：</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#### https://www.yoursite.cn/2019/11/03/vps-gua-zai-onedrive-deng-wang-pan/</span><br><span class="line">[Unit]</span><br><span class="line">Description=rclone</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/usr/bin/rclone mount DriveName:RemoteFolder LocalFolder --allow-other --allow-non-empty --vfs-cache-mode writes --config /home/br/.config/rclone/rclone.conf</span><br><span class="line">Restart=on-abort</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">注意修改DriveName、RemoteFolder和LocalFolder的值</span><br><span class="line">然后重载daemon，使新的服务生效：</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">设置开机启动</span><br><span class="line"></span><br><span class="line">rclone启动：</span><br><span class="line">systemctl start rclone</span><br><span class="line">开机启动：</span><br><span class="line">systemctl enable rclon</span><br></pre></td></tr></table></figure></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上传速度还不错的，本来还想着要要一个大盘鸡的，现在1PB的挂载网盘，好像可以省点钱不用买了。</p><p>本来要写短篇博客的，结果rclone创建remote配置信息就一大堆。</p><p>不过只是看着多，但都是自动生成的选项，选择一下就好。</p><p>步骤多只是为了写得详细些，而是因为太复杂，静下心看就好。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - 运行维护 - Ubuntu - Linux - Rclone - GoogleDriver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：使用urllib.parse操作和解析URL</title>
      <link href="article/49792/"/>
      <url>article/49792/</url>
      
        <content type="html"><![CDATA[<p>URL就是个字符串，用正则处理是个不错的方案，但是urllib.parse使用起来可以更加简洁快速..</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: JetBrains Pycharm 2020.2.4 x64  </span><br><span class="line">语言: Python 3.7.4</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>爬虫里面要处理URL以便发出新的请求，web后端开发也要对URL处理类似跳转，入库等，总会用得着。</p><p>URL就是个字符串，用正则处理是个不错的方案，但是urllib.parse使用起来可以更加简洁快速..</p><p>快速的对URL拼接、拆分，组装，甚至判定URL是否合法等。</p><h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><p>在输入的 URL 中如果有用户名和密码，</p><p>则可以用属性名 username 和 password 来获取它们，</p><p>如果没有，那么相应的属性的取值为 None 。</p><p> 属性 hostname 的值与属性 netloc 的值相同，</p><p> 只不过去掉了端口号，并且都是小写形式。</p><p> 如果还有端口，</p><p> 则属性 port 的值被转换为一个整数，</p><p> 如果没有，属性的值就是 None 。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from urllib.parse import urlparse</span><br><span class="line"></span><br><span class="line">url = &#x27;http://RaXianch:DeSireFire@github:80/path;param?query=holyshit#commit&#x27;</span><br><span class="line">parsed = urlparse(url)</span><br><span class="line">print(&#x27;scheme  :&#x27;, parsed.scheme)</span><br><span class="line">print(&#x27;netloc  :&#x27;, parsed.netloc)</span><br><span class="line">print(&#x27;path    :&#x27;, parsed.path)</span><br><span class="line">print(&#x27;params  :&#x27;, parsed.params)</span><br><span class="line">print(&#x27;query   :&#x27;, parsed.query)</span><br><span class="line">print(&#x27;fragment:&#x27;, parsed.fragment)</span><br><span class="line">print(&#x27;username:&#x27;, parsed.username)</span><br><span class="line">print(&#x27;password:&#x27;, parsed.password)</span><br><span class="line">print(&#x27;hostname:&#x27;, parsed.hostname)</span><br><span class="line">print(&#x27;port    :&#x27;, parsed.port)</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scheme  : http</span><br><span class="line">netloc  : RaXianch:DeSireFire@github:80</span><br><span class="line">path    : /path</span><br><span class="line">params  : param</span><br><span class="line">query   : query=holyshit</span><br><span class="line">fragment: commit</span><br><span class="line">username: user</span><br><span class="line">password: DeSireFire</span><br><span class="line">hostname: DeSireFire</span><br><span class="line">port    : 80</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然说处理字符串方法真的很多，但是python 解析 url 的方法更加方便</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Web后端 </tag>
            
            <tag> urllib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：正则表达式非获取匹配的用法</title>
      <link href="article/27779/"/>
      <url>article/27779/</url>
      
        <content type="html"><![CDATA[<p>别再瞎（.*?）了,活用一下正则吧</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">操作系统： win10  </span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>进来在开发爬虫的时候，使用正则清洗部分数据时，</p><p>有些数据不需要匹配，但是它却会一定的变化，影响某些需要的数据的匹配。</p><p>于是，又深入了一下正则表达式</p><h1 id="非获取匹配的用法"><a href="#非获取匹配的用法" class="headerlink" title="非获取匹配的用法"></a>非获取匹配的用法</h1><table><thead><tr><th>RE</th><th>描述</th></tr></thead><tbody><tr><td>(?:pattern)</td><td>非获取匹配，匹配pattern但不获取匹配结果，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分是很有用。例如“industr(?:y|ies)”就是一个比“industry|industries”更简略的表达式。</td></tr><tr><td>(?=pattern)</td><td>非获取匹配，正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如，“Windows(?=95|98|NT|2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td>(?!pattern)</td><td>非获取匹配，正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如“Windows(?!95|98|NT|2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。</td></tr><tr><td>(?&lt;=pattern)</td><td>非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反。例如，“(?&lt;=95|98|NT|2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。</td></tr><tr><td>(?&lt;!pattern)</td><td>非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反。例如“(?&lt;!95|98|NT|2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。这个地方不正确，有问题</td></tr></tbody></table><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在某些微小变化的字符串，需要匹配但是不需要获取的部分就可以用该方法处理。</p><p>也算是数据清洗的利器</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - 正则表达式 - RE - 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：处理HTML转义字符的5种方式</title>
      <link href="article/32707/"/>
      <url>article/32707/</url>
      
        <content type="html"><![CDATA[<p>整理网页数据的时候必然存在特殊含义符号的转义问题。</p><p>对某些数据清理操作造成了影响。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: JetBrains Pycharm 2020.2.4 x64  </span><br><span class="line">语言: Python 3.7.4</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>整理网页数据的时候必然存在特殊含义符号的转义问题。</p><p>对某些数据清理操作造成了影响。</p><p>写爬虫是一个发送请求，提取数据，清洗数据，存储数据的过程。</p><p>在这个过程中，不同的数据源返回的数据格式各不相同，</p><p>有 JSON 格式，有 XML 文档，不过大部分还是 HTML 文档，HTML 经常会混杂有转移字符，</p><p>这些字符我们需要把它转义成真正的字符。</p><h1 id="什么是转义字符"><a href="#什么是转义字符" class="headerlink" title="什么是转义字符"></a>什么是转义字符</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在 HTML 中 &lt;、&gt;、&amp; 等字符有特殊含义（&lt;，&gt; 用于标签中，&amp; 用于转义），</span><br><span class="line">它们不能在 HTML 代码中直接使用，如果要在网页中显示这些符号，</span><br><span class="line">就需要使用 HTML 的转义字符串（Escape Sequence），</span><br><span class="line">例如 &lt; 的转义字符是 &amp;lt;，浏览器渲染 HTML 页面时，会自动把转移字符串换成真实字符。</span><br></pre></td></tr></table></figure><h1 id="Python-反转义字符串"><a href="#Python-反转义字符串" class="headerlink" title="Python 反转义字符串"></a>Python 反转义字符串</h1><ul><li><p>python2</p><p>  用 Python 来处理转义字符串有多种方式，而且 py2 和 py3 中处理方式不一样，<br>  在 python2 中，反转义串的模块是 HTMLParser。<br>  什么年代了还用python2,转行吧</p>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import HTMLParser</span><br><span class="line">HTMLParser().unescape(&#x27;&amp;amp;dn=&#x27;)</span><br><span class="line"></span><br><span class="line">&#x27;&amp;dn=&#x27;</span><br></pre></td></tr></table></figure></li><li><p>python3</p><p>  Python3 把 HTMLParser 模块迁移到 html.parser</p>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from html.parser import HTMLParser</span><br><span class="line">HTMLParser().unescape(&#x27;&amp;amp;dn=&#x27;)</span><br><span class="line"></span><br><span class="line">&#x27;&amp;dn=&#x27;</span><br></pre></td></tr></table></figure><p>  到 python3.4 之后的版本，在 html 模块新增了 unescape 方法</p>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import html</span><br><span class="line">html.unescape(&#x27;&amp;amp;dn=&#x27;)</span><br><span class="line"></span><br><span class="line">&#x27;&amp;dn=&#x27;</span><br></pre></td></tr></table></figure><p>  推荐最后一种写法，<br>  因为 HTMLParser.unescape 方法在 Python3.4 就已经被废弃掉不推荐使用，<br>  意味着之后的版本有可能会被彻底移除。</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>html处理前先把转义符处理一下，就能尽可能少的避免一些清洗错误。</p><p>正则表达式也精简了。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web后端：Nginx+pure-ftpd搭建简易的文件共享</title>
      <link href="article/44004/"/>
      <url>article/44004/</url>
      
        <content type="html"><![CDATA[<p>帮朋友在华为云服务器上搭建一个nginx+ftp,做个记录</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Centos 8  &amp;&amp; ubuntu 18.04LTS</span><br><span class="line">python : 3.6.8</span><br><span class="line">nginx : 1.16</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>今天帮个朋友搭建个nginx + pure-ftpd简易的文件分享。</p><p>因为这家伙，要用来搭建图床的cdn加速，也可以说是做存储吧。</p><p>嘛，具体情况不知道他怎么弄。反正我就先把这个ftp弄好就成，死懒鬼。</p><h1 id="安装pure-ftpd"><a href="#安装pure-ftpd" class="headerlink" title="安装pure-ftpd"></a>安装pure-ftpd</h1><ul><li><p>Centos 8 :</p><p>  默认的 yum 源没有提供 pure-ftpd，<br>  需要先安装 epel 扩展源,<br>  如果装过了，跳过这条命令</p><blockquote><p>yum install epel-release</p></blockquote><p>  然后使用 yum 命令安装Pure-ftpd：</p><blockquote><p>yum install pure-ftpd</p></blockquote></li><li><p>ubuntu 18.04Lts</p><p>  更新apt</p><blockquote><p>sudo apt-get update</p></blockquote><p>  装Pure-ftpd：</p><blockquote><p>sudo apt-get install pure-ftpd -y</p></blockquote></li><li><p>源包安装太low,Pass.</p></li></ul><h1 id="配置pure-ftpd"><a href="#配置pure-ftpd" class="headerlink" title="配置pure-ftpd"></a>配置pure-ftpd</h1><ul><li><p>启动pure-ftpd</p><blockquote><p>pure-ftpd /etc/pure-ftpd/pure-ftpd.conf </p></blockquote></li><li><p>查看进程是否启动成功</p><blockquote><p>ps -aux | grep pure</p></blockquote>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-11-ubuntu:/etc/nginx$ ps -aux | grep pure</span><br><span class="line">root      3086  0.0  0.0  29548   428 ?        Ss   14:38   0:00 pure-ftpd (SERVER)</span><br><span class="line">ubuntu    3444  0.0  0.0  13772  1076 pts/0    S+   14:51   0:00 grep --color=auto pure</span><br></pre></td></tr></table></figure></li><li><p>创建用户</p><blockquote><p>sudo useradd ftp-user</p></blockquote></li><li><p>创建用户所属组</p><blockquote><p>sudo groupadd ftp-group</p></blockquote><blockquote><p>sudo usermod -a -G ftp-group ftp-user</p></blockquote><blockquote><p>sudo id ftp-user</p></blockquote>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">centos 8:</span><br><span class="line">[root@localhost ~]# sudo useradd ftp-user</span><br><span class="line">[root@localhost ~]# sudo groupadd ftp-group</span><br><span class="line">[root@localhost ~]# sudo usermod -a -G ftp-group ftp-user</span><br><span class="line">[root@localhost ~]# sudo id ftp-user</span><br><span class="line">uid=1008(ftp-user) gid=1009(ftp-user) 组=1009(ftp-user),1010(ftp-group)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ubuntu 18.04LTS:</span><br><span class="line">ubuntu@VM-0-11-ubuntu:/etc/nginx$ sudo useradd ftp-user</span><br><span class="line">ubuntu@VM-0-11-ubuntu:/etc/nginx$ sudo groupadd ftp-group</span><br><span class="line">ubuntu@VM-0-11-ubuntu:/etc/nginx$ sudo usermod -a -G ftp-group ftp-user</span><br><span class="line">ubuntu@VM-0-11-ubuntu:/etc/nginx$ sudo id ftp-user</span><br><span class="line">uid=1000(ftp-user) gid=1000(ftp-user) groups=1000(ftp-user),1001(ftp-group)</span><br></pre></td></tr></table></figure></li><li><p>创建一个用来存储ftp文件的目录</p><blockquote><p>sudo mkdir /home/upload_dir</p></blockquote><blockquote><p>cd /home/upload_dir</p></blockquote><blockquote><p>pwd</p></blockquote>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">centos 8 和 ubuntu18.04 在这里的提示都差不多，不分别贴出了    </span><br><span class="line"></span><br><span class="line">ubuntu@VM-0-11-ubuntu:/home$ sudo mkdir /home/upload_dir</span><br><span class="line">ubuntu@VM-0-11-ubuntu:/home$ cd /home/upload_dir/</span><br><span class="line">ubuntu@VM-0-11-ubuntu:/home/upload_dir$ pwd</span><br><span class="line">/home/upload_dir</span><br></pre></td></tr></table></figure><p>  创建目录并得到路径</p></li><li><p>修改用户所属组<br>  将之前路径写上</p><blockquote><p>sudo chown -R ftp-user:ftp-group /home/upload_dir/</p></blockquote></li><li><p>创建ftp用户，注意ftp用户是虚拟用户，我设置的用户是RaXianch（自己定！），密码 自己定！</p><blockquote><p> sudo pure-pw useradd RaXianch -u ftp-user -d /home/upload_dir/</p></blockquote>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ubuntu@VM-0-11-ubuntu:/home/upload_dir$ sudo chown -R ftp-user:ftp-group /home/upload_dir/</span><br><span class="line">ubuntu@VM-0-11-ubuntu:/home/upload_dir$ sudo pure-pw useradd RaXianch -u ftp-user -d /home/upload_dir/</span><br><span class="line">Password:</span><br><span class="line">Enter it again:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  部分说明：</p>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">其中-u选项是将虚拟用户RaXianch与系统用户ftp-user关联在一起，</span><br><span class="line">即使用RaXianch账号登录FTP后，</span><br><span class="line">会以ftp-user的身份来读取和下载文件，</span><br><span class="line">-d选项为RaXianch账户的家目录，</span><br><span class="line">这样可以是RaXianch只能访问/root/hbk/upload_dir</span><br></pre></td></tr></table></figure></li><li><p>创建用户信息数据库文件</p><blockquote><p>sudo pure-pw mkdb</p></blockquote></li><li><p>list显示用户列表</p><blockquote><p>sudo pure-pw list</p></blockquote></li><li><p>删除账号</p><blockquote><p>pure-pw userdel RaXianch(改成你创的名字)</p></blockquote></li></ul><p>至此，purte-ftpd 配置完成，如果要自定义一些设置，自行去了解和修改/etc/pure-ftpd/pure-ftpd.conf </p><h1 id="安装nginx-如果已经安装过跳过此步"><a href="#安装nginx-如果已经安装过跳过此步" class="headerlink" title="安装nginx(如果已经安装过跳过此步)"></a>安装nginx(如果已经安装过跳过此步)</h1><ul><li><p>Centos 8:<br>  没安装过 EPEL，需要运行这个命令。一般来讲都有的，所以看情况略过此条命令。</p><blockquote><p>sudo yum install epel-release</p></blockquote><p>  安装nginx</p><blockquote><p>sudo yum install nginx</p></blockquote></li><li><p>Ubuntu 18.04：<br>  更新apt列表</p><blockquote><p>sudo apt-get update</p></blockquote><p>  安装nginx</p><blockquote><p>apt-get install nginx</p></blockquote><h1 id="使用nginx-如果已经安装过跳过此步"><a href="#使用nginx-如果已经安装过跳过此步" class="headerlink" title="使用nginx(如果已经安装过跳过此步)"></a>使用nginx(如果已经安装过跳过此步)</h1></li><li><p>设置开机启动<br>  Centos 8</p><blockquote><p>sudo systemctl status nginx</p></blockquote><p>  Ubuntu18.04 ubuntu似乎装上去就能自动重启了，如果没有自动重启执行以下操作</p><blockquote><p>sudo systemctl enable nginx</p></blockquote>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">出现类似以下提示：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ubuntu@VM-0-11-ubuntu:~$ sudo systemctl enable nginx</span><br><span class="line">Synchronizing state of nginx.service with SysV service script with /lib/systemd/systemd-sysv-install.</span><br><span class="line">Executing: /lib/systemd/systemd-sysv-install enable nginx</span><br></pre></td></tr></table></figure><p>  使用一下命令即可</p><blockquote><p>sudo /lib/systemd/systemd-sysv-install enable nginx</p></blockquote></li><li><p>检查Nginx状态<br>  Centos 8 和 Ubuntu18.04</p><blockquote><p>sudo systemctl status nginx</p></blockquote>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">看到    active (running) 就说明跑成功了</span><br><span class="line"></span><br><span class="line">Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)</span><br><span class="line">Active: active (running) since Mon 2020-05-11 14:08:56 CST; 1min 2s ago</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>启动（如果上一步确定已经启动，跳过此步）</p><blockquote><p>sudo systemctl start nginx</p></blockquote><p>  or</p><p>  使用whereis查出nginx位置，然后使用绝对路径启动</p><blockquote><p>whereis nginx</p></blockquote>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-kc1-large-2-linux-20200507120604 ~]# whereis nginx</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib64/nginx /etc/nginx /usr/share/nginx /usr/share/man/man8/nginx.8.gz /usr/share/man/man3/nginx.3pm.gz</span><br></pre></td></tr></table></figure><p>  运行这个命令即可,<br>  但是 注意！ 你的服务器上安装nginx的路径跟我不一定相同，根据你自己的来。</p><blockquote><p>sudo /usr/sbin/nginx</p></blockquote><h1 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h1></li></ul><p>找到nginx目录下，默认安装目录centos 8 和 ubuntu18.04 都为 /etc/nginx/</p><blockquote><p>cd /etc/nginx/conf.d<br>vim pure-ftpd.conf</p></blockquote><p>示例中使用的端口是1314，你可以根据自己修改，</p><p>但是如果服务器存在防火墙，记得放通对应的端口，</p><p>输入如下配置信息：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen       1314;</span><br><span class="line">        server_name  _;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">        location / &#123;</span><br><span class="line">                root /home/upload_dir;</span><br><span class="line">                autoindex on;</span><br><span class="line">                autoindex_exact_size off;</span><br><span class="line">                autoindex_localtime on;</span><br><span class="line">                charset utf-8;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重启nginx载入新配置文件</p><blockquote><p>nginx -s reload</p></blockquote><h1 id="访问目录"><a href="#访问目录" class="headerlink" title="访问目录"></a>访问目录</h1><p>打开浏览器，输入[你服务器的外网IP地址]:[你的端口]</p><p><img src= "/customize/img/loading.gif" data-lazy-src="4f0cf6b7.png"></p><p>Ojbk!</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>核心思路是使用pure-ftpd管理文件，nginx location到该文件路径即可。</p><p>做完以后，感觉很简单。</p><p>文章写得多，主要是为了详细，我也不喜欢写长文，读着累。</p><p>根据自己的情况进行跳过。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - Centos - ubuntu - Linux - 运行维护 - Web后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：CentOS7，Python3.6安装pillow</title>
      <link href="article/42220/"/>
      <url>article/42220/</url>
      
        <content type="html"><![CDATA[<p>很多博客都是使用ubuntu安装python项目，但是碰到centos安装python和pillow的博文不怎么多。</p><p>尝试安装项目yobot时里面需要用到pillow包，使用requirements.txt安装依赖时大片错误。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Centos Linux version 4.18.0-147.5.1.el8_1.aarch64 (mockbuild@aarch64-01.mbox.centos.org) (gcc version 8.2.1 20180905 (Red Hat 8.2.1-3) (GCC)) #1 SMP Tue Feb 4 23:44:08 UTC 2020  </span><br><span class="line">IDE ： JetBrains Pycharm 2018.2.4 x64</span><br><span class="line">python : 3.6.8</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>很多博客都是使用ubuntu安装python项目，但是碰到centos安装python和pillow的博文不怎么多。</p><p>尝试安装项目yobot时里面需要用到pillow包，使用requirements.txt安装依赖时大片错误。</p><h1 id="更新pip"><a href="#更新pip" class="headerlink" title="更新pip"></a>更新pip</h1><p>首先确保安装了pip或者pip3,且是最新版</p><blockquote><p>python -m pip install –upgrade pip</p></blockquote><p>or</p><blockquote><p>python3 -m pip3 install –upgrade pip</p></blockquote><h1 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install python-devel</span><br><span class="line">yum install zlib-devel</span><br><span class="line">yum install libjpeg-turbo-devel</span><br></pre></td></tr></table></figure><h1 id="安装pillow"><a href="#安装pillow" class="headerlink" title="安装pillow"></a>安装pillow</h1><p>使用原生源</p><blockquote><p>pip install pillow</p></blockquote><p>使用清华国内pypi源</p><blockquote><p>pip install pillow -i <a target="_blank" rel="noopener" href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p></blockquote><p>or</p><p>使用原生源</p><blockquote><p>pip3 install pillow</p></blockquote><p>使用清华国内pypi源</p><blockquote><p>pip3 install pillow -i <a target="_blank" rel="noopener" href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>要部署python项目,确实还是首选ubuntu,更加方便些。</p><p>也不是说centos不好,毕竟是开发者迁就运行环境,既然非要用centos,那就找出解决办法。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - Centos - Linux - 运行维护 - 疑难杂症 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：VueCli安装normalize.css</title>
      <link href="article/8647/"/>
      <url>article/8647/</url>
      
        <content type="html"><![CDATA[<p>normalize.css是一款优秀的前端css初始化工具！之前没尝试过在VueCli中使用。记录一下..</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10</span><br><span class="line">IDE: JetBrains WebStorm 2018.2.1 x64</span><br><span class="line">浏览器： Google Chrome 版本 67.0.3396.99（正式版本） （64 位）&amp;&amp; FireFox Developer Edition 版本63.0b4  (64位)</span><br><span class="line">VueCli : 3</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Normalize.css只是一个很小的css文件，但它在磨人的HTML元素样式上提供了跨浏览器的高度一致性。</p><p>相比于传统的CSS reset,Normalize.css是一种现代的、为HTML5准备的优质替代方案。</p><p>总之，Normalize.css是一种CSS reset的替代方案。</p><h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><ul><li><p>保护有用的浏览器样式而不是去掉他们；</p></li><li><p>为大部分HTML元素提供一般化的样式；</p></li><li><p>修复浏览器自身的bug并保证各浏览器的一致性；</p></li><li><p>优化css可用性；</p></li><li><p>用注释和详细的文档来解释代码；</p></li><li><p>Normalize支持包括手机浏览器在内的超多浏览器，同时对HTML5元素、排版、列表、嵌入的内容、表单和表哥都进行了一般化；<br>  尽管这个项目基于一般化的原则，但我们还是在合适的地方使用了更实用的默认值。</p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1></li><li><p>安装</p></li></ul><blockquote><p>npm install –save normalize.css </p></blockquote><ul><li>VueCli 下的 main.js 导入</li></ul><blockquote><p>import ‘normalize.css/normalize.css’</p></blockquote><h1 id="若是出现引入报错，可能没有安装css-loader-和style-loader"><a href="#若是出现引入报错，可能没有安装css-loader-和style-loader" class="headerlink" title="若是出现引入报错，可能没有安装css-loader 和style-loader"></a>若是出现引入报错，可能没有安装css-loader 和style-loader</h1><blockquote><p>npm install css-loader style-loader</p></blockquote><h1 id="如果出现-core-js-modules-es-object-to-string-之类的报错"><a href="#如果出现-core-js-modules-es-object-to-string-之类的报错" class="headerlink" title="如果出现 core-js/modules/es.object.to-string 之类的报错"></a>如果出现 core-js/modules/es.object.to-string 之类的报错</h1><blockquote><p>npm install core-js</p></blockquote><p>或者降版本</p><blockquote><p>npm i <a href="mailto:&#99;&#111;&#114;&#x65;&#45;&#x6a;&#115;&#64;&#50;&#x2e;&#x36;&#x2e;&#x35;">&#99;&#111;&#114;&#x65;&#45;&#x6a;&#115;&#64;&#50;&#x2e;&#x36;&#x2e;&#x35;</a> –save</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> VueCli </tag>
            
            <tag> normalize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：vue开发中，父组件添加scoped无法修改子组件样式问题</title>
      <link href="article/21946/"/>
      <url>article/21946/</url>
      
        <content type="html"><![CDATA[<p>修改Element-ui默认样式的时候发现没有效果，绑定了class也没有效果。</p><p>于是，我们应该这么办。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10</span><br><span class="line">IDE: JetBrains WebStorm 2020.2.4 x64</span><br><span class="line">浏览器： Google Chrome 版本 67.0.3396.99（正式版本） （64 位）&amp;&amp; FireFox Developer Edition 版本63.0b4  (64位)</span><br><span class="line">VueCli : 3</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>修改Element-ui默认样式的时候发现没有效果，绑定了class也没有效果。</p><p>在vue的开发中，我们需要引用子组件，包括ui组件（element、iview）。</p><p>但是在父组件中添加scoped之后，在父组件中书写子组件的样式是无效果的。</p><p>去掉scoped之后，样式可以覆盖。</p><p>却会污染全局样式，为了解决这个问题，vue-loader新增书写方式。</p><h1 id="修改input标签样式"><a href="#修改input标签样式" class="headerlink" title="修改input标签样式"></a>修改input标签样式</h1><p>Vue文件中的HTML</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input class=&quot;search-input&quot; clearable autosize v-model=&quot;formInline.kw&quot; placeholder=&quot;搜 索&quot; prefix-icon=&quot;el-icon-search&quot;&gt;&lt;/el-input&gt;</span><br></pre></td></tr></table></figure><p>Vue文件中的style</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">/* 更改element-UI input样式 */</span><br><span class="line">.search-input &gt;&gt;&gt; .el-input__inner &#123;</span><br><span class="line">    -webkit-appearance: none;</span><br><span class="line">    background-color: rgba(153,204,255,0.1);</span><br><span class="line">    border: 1px solid #99CCFF;</span><br><span class="line">    /*border: 1px solid #99CCFF;*/</span><br><span class="line">    background-image: none;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    color: #f5e79e;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    font-size: inherit;</span><br><span class="line">    height: 40px;</span><br><span class="line">    line-height: 40px;</span><br><span class="line">    outline: 0;</span><br><span class="line">    transition: border-color .2s cubic-bezier(.645,.045,.355,1);</span><br><span class="line">    width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.search-input &gt;&gt;&gt; .el-input--prefix &#123;</span><br><span class="line">    padding-left: 30px;</span><br><span class="line">&#125;</span><br><span class="line">/* 修改input 小图标颜色 */</span><br><span class="line">.search-input &gt;&gt;&gt; .el-input__icon &#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">    width: 25px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    transition: all .3s;</span><br><span class="line">    line-height: 40px;</span><br><span class="line">    color: #f5e79e;</span><br><span class="line">&#125;</span><br><span class="line">/* 修改input placeholder文字颜色 */</span><br><span class="line">.search-input &gt;&gt;&gt; .el-input__inner::-webkit-input-placeholder &#123;</span><br><span class="line">    color: #f5e79e;</span><br><span class="line">&#125;</span><br><span class="line">.search-input &gt;&gt;&gt; .el-input__inner:-moz-placeholder &#123;</span><br><span class="line">    color: #f5e79e;</span><br><span class="line">&#125;</span><br><span class="line">.search-input &gt;&gt;&gt; .el-input__inner:-ms-input-placeholder &#123;</span><br><span class="line">    color: #f5e79e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>修改前：</p><p><img src= "/customize/img/loading.gif" data-lazy-src="335429ef.png"></p><p>修改后：</p><p><img src= "/customize/img/loading.gif" data-lazy-src="a4e9d807.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这样的写法既修改了子组件的样式，又不会污染全局样式！</p><p><a href="https://link.zhihu.com/?target=https://vue-loader.vuejs.org/en/features/scoped-css.html">官方文档 Scoped CSS · vue-loader</a></p><p>Tips:此方式从 vue-loader 11.2.0 开始支持</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> Element-ui </tag>
            
            <tag> VueCli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：修改input标签中placeholder文字颜色</title>
      <link href="article/2356/"/>
      <url>article/2356/</url>
      
        <content type="html"><![CDATA[<p>input输入框中有placeholder属性，如果更改input样式的话，placeholder值也需要修改。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10</span><br><span class="line">IDE: JetBrains WebStorm 2020.2.4 x64</span><br><span class="line">浏览器： Google Chrome 版本 67.0.3396.99（正式版本） （64 位）&amp;&amp; FireFox Developer Edition 版本63.0b4  (64位)</span><br><span class="line">VueCli : 3</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>使用ElementUI开发前端页面时，我感觉input标签不够好看，想加入一些自己样式。</p><p>但是更换了input标签背景色以后，导致placeholder属性里的值得字体跟背景色混在一起看清楚了。</p><p>所以要改变placeholder值的样式。</p><p>placeholder是css3中表单元素input的一个占位符，</p><p>适用于高级浏览器或者手机端的输入框的默认提示内容，</p><p>通过下面几行代码就可以设置一个兼容的placeholder文字颜色。</p><h1 id="全局修改"><a href="#全局修改" class="headerlink" title="全局修改"></a>全局修改</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">::-webkit-input-placeholder &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">:-moz-placeholder &#123;/* Firefox 18- */</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">::-moz-placeholder&#123;/* Firefox 19+ */</span><br><span class="line"> color: red;</span><br><span class="line">&#125;</span><br><span class="line">:-ms-input-placeholder &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="局部修改"><a href="#局部修改" class="headerlink" title="局部修改"></a>局部修改</h1><p>推荐使用，然后我展示一下我修改成果</p><p>本文以elementUI为例子，如果是自己使用，el-input__inner改成你对应的class名即可</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* 修改input placeholder文字颜色 */</span><br><span class="line">.el-input__inner::-webkit-input-placeholder &#123;</span><br><span class="line">    color: #f5e79e;</span><br><span class="line">&#125;</span><br><span class="line">.el-input__inner:-moz-placeholder &#123;</span><br><span class="line">    color: #f5e79e;</span><br><span class="line">&#125;</span><br><span class="line">.el-input__inner:-ms-input-placeholder &#123;</span><br><span class="line">    color: #f5e79e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/customize/img/loading.gif" data-lazy-src="1406837c.png"></p><p>可以看到，输入框中的搜索二字已经变了颜色</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>直接了当的解决问题，不用喜欢写长博文。努力走向全栈之路。</p><p>同样的方法对于boostrap和原生 input 也是有效的。 </p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> Element-ui </tag>
            
            <tag> VueCli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：VueCli+ElementUI(button更改按钮默认样式)</title>
      <link href="article/11149/"/>
      <url>article/11149/</url>
      
        <content type="html"><![CDATA[<p>Element-ui+Vue-cli可是说很常见的搭配，但是有写样式，需要根据自身需求进行修改</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10</span><br><span class="line">IDE: JetBrains WebStorm 2020.2.4 x64</span><br><span class="line">浏览器： Google Chrome 版本 67.0.3396.99（正式版本） （64 位）&amp;&amp; FireFox Developer Edition 版本63.0b4  (64位)</span><br><span class="line">VueCli : 3</span><br></pre></td></tr></table></figure><hr><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button type=&quot;primary&quot;&gt;主要按钮&lt;/el-button&gt;</span><br></pre></td></tr></table></figure><p><img src= "/customize/img/loading.gif" data-lazy-src="b13c4abd.png"></p><h1 id="修改默认样式"><a href="#修改默认样式" class="headerlink" title="修改默认样式"></a>修改默认样式</h1><p>改成透明带动画效果的样式</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.el-button--primary &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    background-color: rgba(153,204,255,0.5);</span><br><span class="line">    border: 1px solid #99CCFF;</span><br><span class="line">    transition: all 0.8s;</span><br><span class="line">    -moz-transition: all 0.8s;</span><br><span class="line">    -webkit-transition: all 0.8s;</span><br><span class="line">    -o-transition: all 0.8s;</span><br><span class="line">&#125;</span><br><span class="line">.el-button--primary:hover &#123;</span><br><span class="line">    color: aquamarine;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    background-color: rgba(153,204,255,0.5);</span><br><span class="line">    border: 1px solid #99CCFF;</span><br><span class="line">&#125;</span><br><span class="line">.el-button--primary:focus &#123;</span><br><span class="line">    background-color: rgba(153,204,255,0.5);</span><br><span class="line">    border: 1px solid #99CCFF;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/customize/img/loading.gif" data-lazy-src="0edf1692.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>由于vue文件里面 style 标签中带有scoped。表示 添加“作用域”属性以将CSS仅限于此组件 。</p><p>所以不用担心在这个VUE之外的地方会出现样式污染全局的情况。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> Element-ui </tag>
            
            <tag> VueCli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web后端：django_rest_framework_分页出现警告！</title>
      <link href="article/21343/"/>
      <url>article/21343/</url>
      
        <content type="html"><![CDATA[<p>使用DRF全局分页设置时碰到了一个小问题。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04</span><br><span class="line">IDE: JetBrains pycharm 2018.2.4 x64</span><br><span class="line">Python: 3.6</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WARNINGS:</span><br><span class="line">?: (rest_framework.W001) You have specified a default PAGE_SIZE pagination rest_framework setting,without specifying also a DEFAULT_PAGINATION_CLASS.</span><br><span class="line">    HINT: The default for DEFAULT_PAGINATION_CLASS is None. In previous versions this was PageNumberPagination. If you wish to define PAGE_SIZE globally whilst defining pagination_class on a per-view basis you may silence this check.</span><br></pre></td></tr></table></figure><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>修改setting配置文件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    &#x27;DEFAULT_PERMISSION_CLASSES&#x27;: (&#x27;rest_framework.permissions.IsAdminUser&#x27;, ),</span><br><span class="line">    &#x27;DEFAULT_PAGINATION_CLASS&#x27;: &#x27;rest_framework.pagination.PageNumberPagination&#x27;,  # 添加这一行解决，</span><br><span class="line">    &#x27;PAGE_SIZE&#x27;: 10 # 默认page_size</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>drf的全局分页设置简单粗暴，但是规矩中的东西，一样不能少呢。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Web后端 </tag>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> Django </tag>
            
            <tag> django-rest-framework </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：Vue+ElementUI+flex布局达到高度撑满的办法</title>
      <link href="article/25523/"/>
      <url>article/25523/</url>
      
        <content type="html"><![CDATA[<p>flex布局是真的好用，补齐边边角角，甚至是各种东西居中都是很好的解决方案</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10</span><br><span class="line">IDE: JetBrains WebStorm 2020.2.4 x64</span><br><span class="line">浏览器： Google Chrome 版本 67.0.3396.99（正式版本） （64 位）&amp;&amp; FireFox Developer Edition 版本63.0b4  (64位)</span><br><span class="line">VueCli : 3</span><br><span class="line">Element-ui ： 2.13.1</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Element-ui 用起来是开心！快乐写页面的时候，出现没撑满的问题。</p><p><img src= "/customize/img/loading.gif" data-lazy-src="Web%E5%89%8D%E7%AB%AF%EF%BC%9AVue-ElementUI-flex%E5%B8%83%E5%B1%80%E8%BE%BE%E5%88%B0%E9%AB%98%E5%BA%A6%E6%92%91%E6%BB%A1%E7%9A%84%E5%8A%9E%E6%B3%95/e761f62e.png"></p><p>如果碰到那个屏幕高度高的，下面就一片白花花了。</p><p>网上有很多其他的解决方案，我认为flex布局是最终极的办法。</p><h1 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h1><p>在 <a target="_blank" rel="noopener" href="https://codepen.io/pen/">https://codepen.io/pen/</a> 上做演示</p><p>html code 如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;//unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;//unpkg.com/element-ui@2.13.1/lib/index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;el-container&gt;</span><br><span class="line">  &lt;el-header&gt;Header&lt;/el-header&gt;</span><br><span class="line">  &lt;el-main&gt;Main&lt;/el-main&gt;</span><br><span class="line">  &lt;el-footer&gt;Footer&lt;/el-footer&gt;</span><br><span class="line">&lt;/el-container&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>CSS code 如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@import url(&quot;//unpkg.com/element-ui@2.13.1/lib/theme-chalk/index.css&quot;);</span><br><span class="line">.el-header, .el-footer &#123;</span><br><span class="line">    background-color: #B3C0D1;</span><br><span class="line">    color: #333;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 60px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .el-aside &#123;</span><br><span class="line">    background-color: #D3DCE6;</span><br><span class="line">    color: #333;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 200px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .el-main &#123;</span><br><span class="line">    background-color: #E9EEF3;</span><br><span class="line">    color: #333;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 160px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  body &gt; .el-container &#123;</span><br><span class="line">    margin-bottom: 40px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .el-container:nth-child(5) .el-aside,</span><br><span class="line">  .el-container:nth-child(6) .el-aside &#123;</span><br><span class="line">    line-height: 260px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .el-container:nth-child(7) .el-aside &#123;</span><br><span class="line">    line-height: 320px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>JS code 如下：(引入vue的基本操作,使用脚手架的这个js码可以略过)</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new Vue().$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><h1 id="代码修改"><a href="#代码修改" class="headerlink" title="代码修改"></a>代码修改</h1><p>修改 html code 如下：(使用VueCli的话上面script标签的引入可以省去，改用tamplate标签框起来)</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;//unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;//unpkg.com/element-ui@2.13.1/lib/index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;el-container&gt;</span><br><span class="line">  &lt;el-header&gt;Header&lt;/el-header&gt;</span><br><span class="line">  &lt;el-main&gt;Main 我撑满了！&lt;/el-main&gt;</span><br><span class="line">  &lt;el-footer&gt;Footer&lt;/el-footer&gt;</span><br><span class="line">&lt;/el-container&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>CSS code 如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@import url(&quot;//unpkg.com/element-ui@2.13.1/lib/theme-chalk/index.css&quot;);</span><br><span class="line">.el-header, .el-footer &#123;</span><br><span class="line">    background-color: #B3C0D1;</span><br><span class="line">    color: #333;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 60px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">#app &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 100vh;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  .el-main &#123;</span><br><span class="line">    background-color: #E9EEF3;</span><br><span class="line">    color: #333;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 160px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  body &gt; .el-container &#123;</span><br><span class="line">    margin-bottom: 40px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .el-container:nth-child(5) .el-aside,</span><br><span class="line">  .el-container:nth-child(6) .el-aside &#123;</span><br><span class="line">    line-height: 260px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .el-container:nth-child(7) .el-aside &#123;</span><br><span class="line">    line-height: 320px;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>修改后的效果，如下：</p><p><img src= "/customize/img/loading.gif" data-lazy-src="Web%E5%89%8D%E7%AB%AF%EF%BC%9AVue-ElementUI-flex%E5%B8%83%E5%B1%80%E8%BE%BE%E5%88%B0%E9%AB%98%E5%BA%A6%E6%92%91%E6%BB%A1%E7%9A%84%E5%8A%9E%E6%B3%95/5aeb1afa.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">父级盒子(#app)使用flex布局</span><br><span class="line">必须要设置：display: flex;  flex-direction: column;</span><br><span class="line">高度也必须设置：height: 100vh;（注意不是100%）</span><br><span class="line"></span><br><span class="line">即可达到中间主体部分 el-main 标签撑满屏幕高度的目的</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> Element-ui </tag>
            
            <tag> VueCli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：&amp;#x(unicode编码后的汉字)JS转换方法</title>
      <link href="article/54079/"/>
      <url>article/54079/</url>
      
        <content type="html"><![CDATA[<p>使用JS请求网页的时候，发现得到的HTML中文部分都一些奇怪的东西</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10</span><br><span class="line">IDE: JetBrains WebStorm 2020.2.4 x64</span><br><span class="line">浏览器： Google Chrome 版本 67.0.3396.99（正式版本） （64 位）&amp;&amp; FireFox Developer Edition 版本63.0b4  (64位)</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>使用JS请求网页的时候，发现得到的HTML中文部分都一些奇怪的东西。</p><p>里面的汉字的部分都是：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#x6000;&amp;#x6000;</span><br></pre></td></tr></table></figure><p>之类的东西，又不想在后端层极处理这些编码问题占用后端处理时间。<br>于是，寻找在前端处理此类编码的解决办法</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>在使用readability的api提取网页内容的时候点这里看-readability-网页内容提取利器，</p><p>中文内容都是&amp;#x开头的一堆乱码似的东西。但保存成网页文件后，浏览器是可以正常显示的~</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#x6000;&amp;#x6000;</span><br></pre></td></tr></table></figure><p>一串字符是 HTML、XML 等 SGML 类语言的转义序列（escape sequence）。</p><p>它们不是「编码」。</p><p>以 HTML 为例，这三种转义序列都称作 character reference：第一种是 character entity reference，</p><p>后接预先定义的 entity 名称，而 entity 声明了自身指代的字符。</p><p>后两种是 numeric character reference（NCR），</p><p>数字取值为目标字符的 Unicode code point；以「&amp;#」开头的后接十进制数字，</p><p>以「&amp;#x」开头的后接十六进制数字。</p><h1 id="amp-x转汉字"><a href="#amp-x转汉字" class="headerlink" title="&amp;#x转汉字"></a>&amp;#x转汉字</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unescape(&quot;&amp;#x6000;&amp;#x6000;&quot;.replace(/&amp;#x/g,&#x27;%u&#x27;).replace(/;/g,&#x27;&#x27;))  </span><br></pre></td></tr></table></figure><h1 id="汉字转-amp-x"><a href="#汉字转-amp-x" class="headerlink" title="汉字转&amp;#x"></a>汉字转&amp;#x</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;怀怀&quot;.replace(/[^\u0000-\u00FF]/g,function(a)&#123;return escape(a).replace(/(%u)(\w&#123;4&#125;)/gi,&quot;&amp;#x$2;&quot;)&#125;)  </span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>尽量在前端处理此类比较问题，解决后端算力<br>善用unescape和escape等JS方法</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web后端：Django使用DRF的序列化出结果为空的原因，DRF的Serializer和ModelSerializer的区别</title>
      <link href="article/22910/"/>
      <url>article/22910/</url>
      
        <content type="html"><![CDATA[<p>开发的时候使用DRF做数据查询接口，将models交给序列化器出现了问题。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04</span><br><span class="line">IDE: JetBrains pycharm 2019.2.4 x64</span><br><span class="line">Python: 3.6</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><pre><code>开发的时候使用DRF做数据查询接口，将models交给序列化器出现了问题。 数据明明存在数据且查询成功的情况下，经过序列化就为空字典。而且无法通过is_valid验证，于是我就奇了怪。经过对照自己以前开发的代码，发现自己忽略一些细节。之前的开发的序列化器继承于ModelSerializer而非SerializerSerializer是不支持直接fields = &quot;__all__&quot;的，不能自己直接映射models。</code></pre><h1 id="Serializer和ModelSerializer的区别"><a href="#Serializer和ModelSerializer的区别" class="headerlink" title="Serializer和ModelSerializer的区别"></a>Serializer和ModelSerializer的区别</h1><p><img src= "/customize/img/loading.gif" data-lazy-src="f1df3195.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>程序开发切勿急躁呐。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Web后端 </tag>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> Django </tag>
            
            <tag> django-rest-framework </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：fork别人项目后，如何同步更新别人的项目提交</title>
      <link href="article/16393/"/>
      <url>article/16393/</url>
      
        <content type="html"><![CDATA[<p>有些代码仓库，错过了就永远错过了，所以我成为了fork狂魔。<br>但是别人的项目有了更新，我要如何同步自己fork的仓库呢？</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统： win10  </span><br><span class="line">Python: 3.7.4</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>有些代码仓库，错过了就永远错过了，所以我成为了fork狂魔。</p><p>但是别人的项目有了更新，我要如何同步自己fork的仓库呢？</p><p>以这样的需求为背景。</p><h1 id="Github-Web操作更新"><a href="#Github-Web操作更新" class="headerlink" title="Github Web操作更新"></a>Github Web操作更新</h1><p>应用场景：不想在本地clone仓库内容来处理，而是直接操作网页完成同步操作。</p><ol><li><p>打开自己fork仓库，进入code选项卡，点击new pull request 创建</p><p> <img src= "/customize/img/loading.gif" data-lazy-src="f4136f8d.png"></p></li><li><p>更换一下base repository和head repository的仓库和分支，右边是拉取源，左边是被同步。左右别弄错了，不然就是你自己提交到别人那里去了。</p><p> <img src= "/customize/img/loading.gif" data-lazy-src="a5a1b734.png"></p></li><li><p>填写以下创建拉取请求的信息</p><p> <img src= "/customize/img/loading.gif" data-lazy-src="e3f8f81f.png"></p></li><li><p>创建成功以后点击 Merge pull requests,完成合并即可</p><p> <img src= "/customize/img/loading.gif" data-lazy-src="e0ce142e.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>简单几步，即可完成同步别人的仓库提交了。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web后端：CloudFlare_Workers_设置使用自己的域名</title>
      <link href="article/35473/"/>
      <url>article/35473/</url>
      
        <content type="html"><![CDATA[<p>CloudFlare 是全球知名 CDN 解决方案和域名注册解析方案供应商，Workers 是其前不久推出的一款基于其强大的 CDN 全球云网络上的无服务器应用程序。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04</span><br><span class="line">IDE: JetBrains pycharm 2020.2.1 x64</span><br><span class="line">Python: 3.6.9</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Workers创建的域名的比较长（*.*.workers.dev），域名比较长，不适合分享</p><p>这算是个不大不小的东西，故而这里做个记录供参考。</p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>耍小聪明使用CNAME来接入CloudFlare Workers是没用的，会出现各种奇怪的错误。</p><p>自定义的域名必须托管在CloudFlare上，且Name Service也必须是CloudFlare提供的。</p><p>这里不再教如何创建CloudFlare Workers了，只讨论如何给workers设置自定义域名。</p><h1 id="域名托管"><a href="#域名托管" class="headerlink" title="域名托管"></a>域名托管</h1><p>因为博主的域名是在 <a target="_blank" rel="noopener" href="https://www.namesilo.com/">namesilo</a> 上购买的，所以以它为例子。</p><p>对域名解锁，然后点击ChangeNameServers</p><p><img src= "/customize/img/loading.gif" data-lazy-src="fbabb69a.png"></p><p>更改NS内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">doug.ns.cloudflare.com</span><br><span class="line">nelly.ns.cloudflare.com</span><br></pre></td></tr></table></figure><p><img src= "/customize/img/loading.gif" data-lazy-src="4d875264.png"></p><p>进入 <a target="_blank" rel="noopener" href="https://dash.cloudflare.com/">cloudflare</a>，登录并添加站点(没有账号就注册)</p><p><img src= "/customize/img/loading.gif" data-lazy-src="dbb01f12.png"></p><p>进入域名设置，打开DNS设置。</p><p>添加记录-&gt;A记录—&gt;名称你自己定-&gt;内容 2.2.2.2-&gt;保存</p><p><img src= "/customize/img/loading.gif" data-lazy-src="8e180bb1.png"></p><p>进入workers设置-&gt;添加路由-&gt;按照提示填入之前你写的域名，即可</p><p><img src= "/customize/img/loading.gif" data-lazy-src="0c7eff0f.png"></p><p><img src= "/customize/img/loading.gif" data-lazy-src="2f6683b1.png"></p><p>如果，worker为空，说明你根本没创建worker..</p><p>需要创建worker,点击管理Workers进去创建即可。</p><p>没创建过，workers你为啥会看本文…?</p><p>（这里不再教如何创建CloudFlare Workers了，只讨论如何给workers设置自定义域名。）</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>学会使用cloudflare你会发现找到新世界的大门！我是认真的说这话！</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web后端 </tag>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> Workers </tag>
            
            <tag> 小技能 </tag>
            
            <tag> 域名解析 </tag>
            
            <tag> NS </tag>
            
            <tag> CloudFlare </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web后端：Django-rest-framework的使用</title>
      <link href="article/57962/"/>
      <url>article/57962/</url>
      
        <content type="html"><![CDATA[<p>Django DRF 的文档一看过去，就头晕目眩。<br>将实践DRF应用做个记录，方便查阅。  </p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04</span><br><span class="line">IDE: JetBrains pycharm 2019.2.4 x64</span><br><span class="line">Python: 3.6.9</span><br><span class="line">Django: 3.0.5</span><br><span class="line">djangorestframework: 3.11.0</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>使用django开发应用接口，方便做到前后端分离的开发。<br>说真的，现在越来越多有力的框架出来，以后可能django市场份额会不会越来越少呢？<br>比如，现在新兴的fastAPI,我是感觉可以把flask淘汰了。<br>以后有机会要学学这个框架了。</p><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p>Django 怎么开展项目和创建、封装app应用就不赘述了。  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">├── apps</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   └── search</span><br><span class="line">│       ├── admin.py</span><br><span class="line">│       ├── apps.py</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       ├── migrations</span><br><span class="line">│       │   └── __init__.py</span><br><span class="line">│       ├── models.py</span><br><span class="line">│       ├── tests.py</span><br><span class="line">│       ├── urls.py</span><br><span class="line">│       └── views.py</span><br><span class="line">├── fontEnd</span><br><span class="line">│   └── dist</span><br><span class="line">├── LICENSE</span><br><span class="line">├── manage.py</span><br><span class="line">├── moePloy</span><br><span class="line">│   ├── asgi.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h1><ol><li><p>pip命令安装</p><blockquote><p>pip install djangorestframework</p></blockquote></li><li><p>moePloy/settings.py (全局配置文件)</p><p> 在django配置文件settings.py(以具体项目为准)的INSTALLED_APPS中添加’rest_framework’。</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">&#x27;django.contrib.admin&#x27;,</span><br><span class="line">&#x27;django.contrib.auth&#x27;,</span><br><span class="line">&#x27;django.contrib.contenttypes&#x27;,</span><br><span class="line">&#x27;django.contrib.sessions&#x27;,</span><br><span class="line">&#x27;django.contrib.messages&#x27;,</span><br><span class="line">&#x27;django.contrib.staticfiles&#x27;,</span><br><span class="line">&#x27;corsheaders&#x27;,                      # 跨域请求处理</span><br><span class="line">&#x27;rest_framework&#x27;,                   # 添加rest_framework应用</span><br><span class="line">&#x27;search&#x27;,                           # 搜索</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="models-模组-amp-amp-Serializer-序列化器"><a href="#models-模组-amp-amp-Serializer-序列化器" class="headerlink" title="models(模组)&amp;&amp;Serializer(序列化器)"></a>models(模组)&amp;&amp;Serializer(序列化器)</h1></li><li><p>创建models(模组)</p><p> drf主要是为了做数据接口的，既然使用到数据就会用到django models。<br> 修改文件 search/models.py  </p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Create your models here.</span><br><span class="line">class magnetInfo(models.Model):</span><br><span class="line">    mtitle = models.CharField(max_length=255, verbose_name=&#x27;名称&#x27;, unique=True)</span><br><span class="line">    mdate = models.DateField(verbose_name=&#x27;发布日期&#x27;, null=True)</span><br><span class="line">    mpublisher = models.CharField(default=&quot;未知&quot;, verbose_name=&#x27;发布人&#x27;, null=True)</span><br><span class="line">    magnet = models.TextField(verbose_name=&#x27;磁性链接&#x27;, null=True)</span><br><span class="line">    magnetSpare = models.TextField(verbose_name=&#x27;备用磁性链接&#x27;, null=True)</span><br><span class="line">    msize = models.CharField(max_length=255, verbose_name=&#x27;文件大小&#x27;, null=True)</span><br><span class="line">    morigin = models.CharField(max_length=255, verbose_name=&#x27;网站来源&#x27;, null=True)</span><br><span class="line">    murl = models.URLField(verbose_name=&#x27;源链接&#x27;, null=True)</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.mtitle</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &#x27;磁性链接信息&#x27;</span><br><span class="line">        db_table = &quot;magnetInfo&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure></li><li><p>创建Serializer(序列化器)</p><p> models.py 主要是为了让django orm 方便管理数据库表的，<br> 而序列化器是为了把models取到的数据进行一层处理，转成json格式的对象(python字典)，方便作为接口数据返回。<br> apps/search/文件夹下创建serializer.py</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 导入drf</span><br><span class="line">from rest_framework import serializers</span><br><span class="line"># 导入要进行序列化操作的models</span><br><span class="line">from .models import magnetInfo</span><br><span class="line"></span><br><span class="line">class magnetInfoSerializer(serializers.ModelSerializer):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    该类的主要作用是用来对模型进行序列化操作的，</span><br><span class="line">    该类定义的属性、必须在模型中的属性保持一致、可以少、但不允许多</span><br><span class="line">    </span><br><span class="line">    为了让人不觉得太复杂，这里直接使用&quot;__all__&quot;表示所有models字段都做序列化</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    class Meta:</span><br><span class="line">        model = magnetInfo</span><br><span class="line">        </span><br><span class="line">        # 使用&quot;__all__&quot;表示所有models字段都做序列化</span><br><span class="line">        fields = &quot;__all__&quot;</span><br></pre></td></tr></table></figure><h1 id="开发Views-视图"><a href="#开发Views-视图" class="headerlink" title="开发Views(视图)"></a>开发Views(视图)</h1></li></ol><p>DRF 中的类视图非常的强大，在Django原有的类视图基础上又做了一层封装。</p><p>完成常规操作(例如：增删改查)方面，都已经有现成类视图逻辑可以直接使用，节约开发实践。</p><p>相关的类视图源码也非常的好懂，所以不要太纠结自己造轮子的毛病。</p><p>简单来说，  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">如果不会用视图集和扩展类视图，就用DRF最底层的类视图APIVIew来造轮子（DRF所有类视图都基于APIVIew），  </span><br><span class="line"></span><br><span class="line">如果会用通用类视图(GenericAPIView)那就是drf进阶水平，  </span><br><span class="line"></span><br><span class="line">如果会使用(ViewSet)视图集开发，就是个老手了，  </span><br><span class="line"></span><br><span class="line">如果能灵活运用上面三种来做综合开发，是drf大佬。  </span><br><span class="line"></span><br><span class="line">无论是APIVIew、GenericAPIView、ViewSet都可以做到自定义。</span><br></pre></td></tr></table></figure><p>本文例子中，需求是将采集到的入库的信息，通过用户在浏览器输入搜索词，查询数据库信息得到数据列表。</p><p>就直接使用GenericAPIView中的ListAPIView类视图快速通过post请求方式查询数据库列表。</p><ol><li><p>开发视图逻辑<br> 修改 apps/search/Views.py</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># drf 响应&amp;状态</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework import status</span><br><span class="line"></span><br><span class="line"># drf 类视图导入</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.generics import ListAPIView</span><br><span class="line">from rest_framework.viewsets import ModelViewSet</span><br><span class="line"></span><br><span class="line"># 导入模组&amp;&amp;序列化器</span><br><span class="line">from .serialzers import magnetInfo</span><br><span class="line">from .serialzers import magnetInfoSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class List_magnetInfo(ListAPIView):</span><br><span class="line">    # 查询集，默认None</span><br><span class="line">    queryset = magnetInfo.objects.all()</span><br><span class="line">    # 定义该视图序列化器</span><br><span class="line">    serializer_class = magnetInfoSerializer</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        serialized = self.serializer_class(data=request.data)</span><br><span class="line"></span><br><span class="line">        if serialized.is_valid():   # 验证数据是否合法并返回布尔值</span><br><span class="line"></span><br><span class="line">            # 必须使用is_valid方法校验后才能使用.data序列化成字典形式</span><br><span class="line">            print(serialized.data)</span><br><span class="line">            </span><br><span class="line">            if not serialized.data:</span><br><span class="line">                print(&quot;无值&quot;)</span><br><span class="line"></span><br><span class="line">            return Response(serialized.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        else:</span><br><span class="line">            return Response(serialized._errors(), status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure><p> *** 如果出现此类警告 ***</p><p> <img src= "/customize/img/loading.gif" data-lazy-src="93d3443c.png"></p><p> <a href="https://blog.raxianch.moe/2020/04/22/Web%E5%90%8E%E7%AB%AF%EF%BC%9ADjango%E7%9A%84models%E9%87%8C%E7%9A%84objects%E4%BD%BF%E7%94%A8%E6%97%B6%E5%87%BA%E7%8E%B0%E9%BB%84%E8%89%B2%E8%AD%A6%E5%91%8A/">解决办法，点我</a></p></li><li><p>修改路由映射</p><p>全局根路由映射 moePloy/urls.py</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.urls import re_path</span><br><span class="line">from django.urls import include</span><br><span class="line">from django.views.generic import TemplateView</span><br><span class="line"></span><br><span class="line"># 接口路由</span><br><span class="line">apiUrlpatterns = [</span><br><span class="line">    re_path(r&#x27;^api/search&#x27;, include(&#x27;apps.search.urls&#x27;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 前端路由</span><br><span class="line">FEUrlpatterns = [</span><br><span class="line">    re_path(r&#x27;^$&#x27;, TemplateView.as_view(template_name=&quot;index.html&quot;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 根路由</span><br><span class="line">urlpatterns = [</span><br><span class="line">    # path(&#x27;admin/&#x27;, admin.site.urls),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 注意前后顺序</span><br><span class="line">urlpatterns += apiUrlpatterns</span><br><span class="line"># urlpatterns += FEUrlpatterns</span><br></pre></td></tr></table></figure><p>可以看到全局路由里做了路由分离<br>创建子路由映射(应用路由映射) apps/search/urls.py 文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line">from django.urls import include</span><br><span class="line">from django.urls import re_path</span><br><span class="line">from apps.search import views</span><br><span class="line"></span><br><span class="line"># 视图导入</span><br><span class="line"></span><br><span class="line">app_name = &#x27;search&#x27;</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&#x27;&#x27;, views.List_magnetInfo.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>启动测试服务器</p><p> 基本开发已经完成，来启动测试看看。</p><p> 在django项目根目录下，执行命令</p><p> (Django 基础操作)</p><p> 生成models迁移文件</p><blockquote><p>python manage.py makemigrations search</p></blockquote><p> 数据库迁移</p><blockquote><p>python manage.py migrate</p></blockquote><p> 运行测试服务器</p><blockquote><p>python manage.py runserver 你要部署的ip地址:端口</p></blockquote><p> 例如：</p><blockquote><p>python manage.py runserver 192.168.1.68:5360</p></blockquote><p> Django 项目启动完成！</p></li><li><p>浏览器网页测试</p><p> 测试使用的地址是192.168.1.68:5360，以及urls.py中设置的路径，所以：</p><blockquote><p> <a target="_blank" rel="noopener" href="http://192.168.1.68:5360/api/search">http://192.168.1.68:5360/api/search</a></p></blockquote><p> <img src= "/customize/img/loading.gif" data-lazy-src="1bd739a6.png"></p><p> 看到页面说明部署已经成功了！</p><p> 页面的渲染是DRF组件自行渲染的，</p><p> POST按钮就是模拟发送POST请求</p><p> 尝试发送一下请求</p><p> <img src= "/customize/img/loading.gif" data-lazy-src="e9d5cc12.png"></p><p> 响应网页，通过浏览器开发者工具能看到，</p><p> 发送了带有data数据的application/json内容类型的post请求</p><p> <img src= "/customize/img/loading.gif" data-lazy-src="769962dd.png"></p><p> 由于，我们数据还是空的，所以响应了一个空的{}。</p></li></ol><h1 id="未完持续"><a href="#未完持续" class="headerlink" title="未完持续.."></a>未完持续..</h1><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>django 的DRF快速应用入门开发，目前就这样了。</p><p>目的是为了用简短的博文让人快速过一遍DRF开发的瘾，不让读者看到一大串繁杂的介绍丢失了阅读的动力。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Web后端 </tag>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> Django </tag>
            
            <tag> django-rest-framework </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疑难杂症：使用docker_exec_-it_bash的时候报错是什么原因？</title>
      <link href="article/41581/"/>
      <url>article/41581/</url>
      
        <content type="html"><![CDATA[<p>想修改docker 容器里面的文件，使用exec命令的时候莫名的进不去。出现报错！</p><p>OCI runtime exec failed: exec failed: container_linux.go:345: starting container process caused “exec: &quot;bash&quot;: executable file not found in $PATH”: unknown</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04  </span><br><span class="line">IDE: JetBrains Pycharm 2019.2.4 x64  </span><br><span class="line">Python: 3.6.9</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>查询当前docker进程，用来查看容器ID</p><blockquote><p>docker ps </p></blockquote><p>exec 命令进入容器内部进行修改</p><blockquote><p>docker exec -it 容器ID /bin/bash</p></blockquote><p>发生报错</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OCI runtime exec failed: exec failed: container_linux.go:345: starting container process caused &quot;exec: \&quot;bash\&quot;: executable file not found in $PATH&quot;: unknown</span><br></pre></td></tr></table></figure><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>很多镜像底层系统用的精简版的可能没有bash，换成sh。<br>就算精简版的docker镜像一般也会有sh,而bash不一定会有。</p><blockquote><p>docker exec -it 容器ID sh</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>运行exec命令的时候记得加上容器ID别写漏了。<br>命令最后一个bash参数可以在做一些尝试：</p><blockquote><p>/usr/bin/bash</p></blockquote><blockquote><p>/bin/bash</p></blockquote><blockquote><p>bash</p></blockquote><blockquote><p>sh</p></blockquote><p>总会有成功的，因为封装docker的人你并不知道他是怎么封装的，所以就猜呗。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 疑难杂症 - Github - Docker - Ubuntu - Linux - 运行维护 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：小技能GET：xip-io网站的使用</title>
      <link href="article/36167/"/>
      <url>article/36167/</url>
      
        <content type="html"><![CDATA[<p>偶然发现的一个很方便的工具网站，可以方便的将ip地址解析成一个域名。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">操作系统： win10  </span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>因为某些需求，不能使用IP来进行直接访问，又或者想对IP做一层DNS。</p><p>如果对保密性要求上不高且希望降低成本的话，可以使用xip.io网站工具。</p><p>使用 <a target="_blank" rel="noopener" href="http://xip.io/">http://xip.io/</a> 这个网站的功能，使ip变成域名</p><p><a target="_blank" rel="noopener" href="http://www.10.0.0.1.xip.io解析为10.0.0.1/">www.10.0.0.1.xip.io解析为10.0.0.1</a></p><h1 id="网站使用方法"><a href="#网站使用方法" class="headerlink" title="网站使用方法"></a>网站使用方法</h1><p><a target="_blank" rel="noopener" href="http://xip.io/">http://xip.io/</a> 进入查看说明</p><p><img src= "/customize/img/loading.gif" data-lazy-src="ea020656.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于那种有大量服务器IP要维护且对解析没有太高要求的人，这网站工具就非常的方便。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - DNS - NS - 域名解析 - xip.io </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web后端：nginx开启IPV6支持配置</title>
      <link href="article/36545/"/>
      <url>article/36545/</url>
      
        <content type="html"><![CDATA[<p>使用海外服务器，当然要好好利用ipv6了，不用白不用。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04</span><br><span class="line">IDE: JetBrains pycharm 2019.2.4 x64</span><br><span class="line">Python: 3.6.9</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>IPV4日益稀缺，ipv6已经慢慢走上日程，待ipv6在国内普及，使用nginx配置ipv6那是肯定的，如何让nginx支持ipv6以及配置.</p><h1 id="查看nginx是否支持ipv6"><a href="#查看nginx是否支持ipv6" class="headerlink" title="查看nginx是否支持ipv6"></a>查看nginx是否支持ipv6</h1><p>没有出现–with-ipv6,说明当前的nginx不支持ipv6，所以我们需要重新编译nginx，配置里面增加–with-ipv6.</p><p>安装过程就不赘述了。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nginx version: nginx/1.16.1</span><br><span class="line">built by gcc 7.4.0 (Ubuntu 7.4.0-1ubuntu1~18.04.1)</span><br><span class="line">built with OpenSSL 1.1.1b  26 Feb 2019</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --user=www --group=www --prefix=/www/server/nginx --add-module=/www/server/nginx/src/ngx_devel_kit --add-module=/www/server/nginx/src/lua_nginx_module --add-module=/www/server/nginx/src/ngx_cache_purge --add-module=/www/server/nginx/src/nginx-sticky-module --with-openssl=/www/server/nginx/src/openssl --with-pcre=pcre-8.43 --with-http_v2_module --with-stream --with-stream_ssl_module --with-http_stub_status_module --with-http_ssl_module --with-http_image_filter_module --with-http_gzip_static_module --with-http_gunzip_module --with-ipv6 --with-http_sub_module --with-http_flv_module --with-http_addition_module --with-http_realip_module --with-http_mp4_module --with-ld-opt=-Wl,-E --with-cc-opt=-Wno-error --with-ld-opt=-ljemalloc</span><br></pre></td></tr></table></figure><h1 id="同时监听IPV4和IPV6"><a href="#同时监听IPV4和IPV6" class="headerlink" title="同时监听IPV4和IPV6"></a>同时监听IPV4和IPV6</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">.....</span><br><span class="line">listen [::]:80;</span><br><span class="line">.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="只监听IPV6"><a href="#只监听IPV6" class="headerlink" title="只监听IPV6"></a>只监听IPV6</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">....</span><br><span class="line">listen [::]:80 default ipv6only=on;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="监听指定IPV6地址"><a href="#监听指定IPV6地址" class="headerlink" title="监听指定IPV6地址"></a>监听指定IPV6地址</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">....</span><br><span class="line">listen [3608:f0f0:3002:31::1]:80;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h1><blockquote><p>nginx -s reload       # 如果不生效，可以去搜索nginx的重启命令，不同系统不同版本的nginx，重启命令有差异</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Web后端 </tag>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> Django </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疑难杂症：nginx反向代理中无限重定向的解决办法</title>
      <link href="article/28602/"/>
      <url>article/28602/</url>
      
        <content type="html"><![CDATA[<p>感觉碰到这个问题好几次了，原因都一定相同。<br>造成无限重定向这一问题的诱因有挺多种，就再记录下一种。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04  </span><br><span class="line">Python: 3.6.9</span><br><span class="line">nginx：1.16.1</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>我的这个网站使用了多个域名：</p><p>yiwuwuyi.net（主域名）<br>yiwuwuyi.cn（主域名）<br>yiwuwuyi.uk<br>yiwuwuyi.org<br>还有一个旧域名：proj.org.cn</p><p>两个主域名中，yiwuwuyi.net主要服务国外用户、yiwuwuyi.cn主要服务国内用户。而yiwuwuyi.cn是通过反向代理yiwuwuyi.net来提供服务的，再在前面使用腾讯CDN进行加速，减少带宽压力。</p><p>在配置完成后我发现一个问题，我网站中有一些诸如留言框、搜索表单等交互性的功能，在输入内容并提交后可以到达后端服务器，但后端返还的内容却显示为空白页。通过浏览器控制台检查，发现腾讯CDN返还了一个他们自定义的响应码。</p><p>在经过一系列测试后，我可以肯定我的主站（yiwuwuyi.net）是正常的，所以问题出现在国内主站（yiwuwuyi.cn）中。再次使用浏览器的控制台检查，发现提交表单后，后端服务器返还的“Location”值不正确而导致无限重定向。</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>我的站点是强制使用HTTPS的，DNS根据来源IP区分国内然后分别返还设定的IP。</p><p>当用户通过yiwuwuyi.cn给我留言时，留言通过：</p><blockquote><p><a target="_blank" rel="noopener" href="https://yiwuwuyi.cn/wp-comments-post.php">https://yiwuwuyi.cn/wp-comments-post.php</a></p></blockquote><p>传送到我的后端，然后后端跳转到：</p><blockquote><p><a target="_blank" rel="noopener" href="http://yiwuwuyi.net/wp-comments-post.php">http://yiwuwuyi.net/wp-comments-post.php</a></p></blockquote><p>并附带响应头：</p><blockquote><p>Location: <a target="_blank" rel="noopener" href="http://yiwuwuyi.net/2017/01/">http://yiwuwuyi.net/2017/01/</a>… …</p></blockquote><p>就是因为这个响应头，导致了无限重定向。因为我的网站强制使用HTTPS，那么当后端跳转到<a target="_blank" rel="noopener" href="http://yiwuwuyi.net时,服务器会将其重定向到https//yiwuwuyi.cn%E3%80%82%E7%84%B6%E8%80%8C%E5%88%B0%E8%BF%99%E9%87%8C%E5%B9%B6%E6%B2%A1%E6%9C%89%E5%AE%8C%E7%BB%93%EF%BC%8C%E5%9B%A0%E4%B8%BA%E9%93%BE%E6%8E%A5%E5%8F%98%E6%88%90%E4%BA%86%EF%BC%9A">http://yiwuwuyi.net时，服务器会将其重定向到https://yiwuwuyi.cn。然而到这里并没有完结，因为链接变成了：</a></p><blockquote><p><a target="_blank" rel="noopener" href="http://yiwuwuyi.cn/wp-comments-post.php">http://yiwuwuyi.cn/wp-comments-post.php</a></p></blockquote><p>当用户被重定向到上面这个连接时，因为时.php的动态文件，所以要请求后端，然而后端响应的内容和第一次响应的一样。因此再一次地进行上面的重定向过程。由此陷入无限循环。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>问题复杂，但也需要花点时间才能理解，但解决办法却很简单。</p><p>我只需要在我的反向代理服务器中添加一下两行即可：</p><blockquote><p>proxy_redirect <a target="_blank" rel="noopener" href="http://yiwuwuyi.net/">http://yiwuwuyi.net</a> <a target="_blank" rel="noopener" href="https://yiwuwuyi.cn/">https://yiwuwuyi.cn</a>;</p></blockquote><blockquote><p>proxy_redirect <a target="_blank" rel="noopener" href="https://yiwuwuyi.net/">https://yiwuwuyi.net</a> <a target="_blank" rel="noopener" href="https://yiwuwuyi.cn/">https://yiwuwuyi.cn</a>;</p></blockquote><p>以上两行内容的意思是将后端的响应头中Location字段进行替换：</p><blockquote><p>将 <a target="_blank" rel="noopener" href="http://yiwuwuyi.net/">http://yiwuwuyi.net</a> 替换为 <a target="_blank" rel="noopener" href="https://yiwuwuyi.cn/">https://yiwuwuyi.cn</a>;</p></blockquote><blockquote><p>将 <a target="_blank" rel="noopener" href="https://yiwuwuyi.net/">https://yiwuwuyi.net</a> 替换为 <a target="_blank" rel="noopener" href="https://yiwuwuyi.cn/">https://yiwuwuyi.cn</a>;</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一切又再次恢复正常，跳转和链接都工作正常，这样还能减少不必要的跳转。</p><p>这是在服务器上解决问题，如果依然出现，那就要检查一下是否是在NS上出了问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 疑难杂症 - Nginx - Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：练习搭建SSPanel魔改版是碰到的问题</title>
      <link href="article/29522/"/>
      <url>article/29522/</url>
      
        <content type="html"><![CDATA[<p>进来看到某些机殇就像是用一个月饼模子拍出来的一样，就很好奇是怎么来的。<br>因为觉得它的UI写得好好看，好对我胃口，就想研究研究..欸嘿嘿</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Ubuntu 18.04.4 LTS  </span><br><span class="line">php： 7.4  </span><br><span class="line">mysql： 8.0  </span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><pre><code>按照它的说明文档，使用宝塔一顿操作猛如虎。干了兄弟们，然后打开域名地址...出现了各种问题。为此，我还以为是自己操作哪里不对，哪部操作错误了，有重装了两次..还是一样的问题，很是疑惑。在这里，就不赘述安装过程了，只解决问题。</code></pre><h1 id="Failed-opening-required"><a href="#Failed-opening-required" class="headerlink" title="Failed opening required"></a>Failed opening required</h1><p>嗯？警觉！这是什么错误？顺着上面警告的路劲我摸到那个地方。</p><p><img src= "/customize/img/loading.gif" data-lazy-src="ea20a13f.png"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">解决办法：</span><br><span class="line">    找到/www/wwwroot/你的网站文件夹/config/</span><br><span class="line">    把里面appprofile.example.php文件，改名或者复制出appprofile.php文件即可</span><br><span class="line">    这里我是直接cp复制一下</span><br><span class="line">    cp appprofile.example.php appprofile.php</span><br><span class="line">    即可</span><br></pre></td></tr></table></figure><h1 id="404"><a href="#404" class="headerlink" title="404"></a>404</h1><p>确定宝塔已经是在网站运行状态且域名解析正常的情况下，还有这个404问题。</p><p><img src= "/customize/img/loading.gif" data-lazy-src="ae905113.png"></p><p>我被这个卡了很久，结果发现index.php权限居然事644..谜之644，我又没改过。  </p><p><img src= "/customize/img/loading.gif" data-lazy-src="14d7241f.png"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">解决办法：</span><br><span class="line">    找到/www/wwwroot/你的网站文件夹/public/</span><br><span class="line">    检查一下文件权限是不是为755</span><br></pre></td></tr></table></figure><h1 id="ERR-TOO-MANY-REDIRECTS"><a href="#ERR-TOO-MANY-REDIRECTS" class="headerlink" title="ERR_TOO_MANY_REDIRECTS"></a>ERR_TOO_MANY_REDIRECTS</h1><p>使用cloudflare开启SSL/TLS设置<br>使用宝塔申请Let’s Encrypt SSL证书，并强制https<br>出现了重定向的次数过多问题。</p><p><img src= "/customize/img/loading.gif" data-lazy-src="5493e7ef.png"></p><p>因为 cloudflare SSL/TLS 设置的是灵活模式，<br>意思是说浏览器和CF交互的这一段它用HTTPS，但是CF跟服务器用的是HTTP，<br>但是服务器宝塔强制了HTTPS 所以一直在强制跳转CF访问的HTTP到HTTPS，<br>导致出现了重定向环回的问题。</p><p><img src= "/customize/img/loading.gif" data-lazy-src="4e5e9713.png"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">解决办法：</span><br><span class="line">    把cloudflare SSL/TLS 设置成 完全(严格) 或者 完全模式即可。</span><br><span class="line">    这样宝塔强制HTTPS就不会有问题了。</span><br><span class="line">    </span><br><span class="line">    如果是用其他NS做解析应该也有类似的设置。</span><br></pre></td></tr></table></figure><h1 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h1><p><img src= "/customize/img/loading.gif" data-lazy-src="de5d1cfc.png"></p><p>原文档中，这个地方让我掉了一下个不大的坑233<br>可能对于用过php的人一目了然，但是没是弄个php的人..<br>我真的一时不知道是听文档的选择public还是按照配图中选择config<br>但是我又不敢说，怕被大佬捶（</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>折腾了一天，期间磕磕碰碰地尝试。<br>总算是弄好啦..<br>以后部署这类项目一定要先检查好文件权限问题，<br>对NS解析理解也更加透彻了。  </p><p>最后上一张效果图吧！  </p><p><img src= "/customize/img/loading.gif" data-lazy-src="194c7d51.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - 域名解析 - cloudflare - php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：conohaVPS设置开启IPV6</title>
      <link href="article/15847/"/>
      <url>article/15847/</url>
      
        <content type="html"><![CDATA[<p>VPS 用conoha用习惯了，虽然说这一家的VPS性价比真的一般，<br>但是架不住看板娘可爱。 </p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">操作系统： win10  </span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><pre><code>想尝试一下使用IPV6部署网站，IPV4是不是在国内访问有些问题。所以打算使用IPV6来做NS上面AAAA记录</code></pre><h1 id="检查VPS是否已经默认开启IPV6"><a href="#检查VPS是否已经默认开启IPV6" class="headerlink" title="检查VPS是否已经默认开启IPV6"></a>检查VPS是否已经默认开启IPV6</h1><blockquote><p>ifconfig      # 因为部分VPS可能已经默认开启了，所以先用命令看看是否已经开启</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">****@*****:~# ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet *  netmask *  broadcast *</span><br><span class="line">        inet6 *  prefixlen 64  scopeid 0x0&lt;global&gt;              # 这行global的如果存在就代表已经默认开启了</span><br><span class="line">        inet6 *  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether *  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 9556  bytes 709027 (709.0 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 1202  bytes 145858 (145.8 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><h1 id="开启IPV6-上一步如果已经确定开启的，可以跳过此步"><a href="#开启IPV6-上一步如果已经确定开启的，可以跳过此步" class="headerlink" title="开启IPV6(上一步如果已经确定开启的，可以跳过此步)"></a>开启IPV6(上一步如果已经确定开启的，可以跳过此步)</h1><blockquote><p>sudo vim /etc/netplan/10-gmovps.yaml      # 修改ipv6配置文件</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">network:</span><br><span class="line">    ethernets:</span><br><span class="line">        eth0:</span><br><span class="line">            addresses: [&quot;conohaVPS 管理面板中你自己的IPV6地址/64&quot;]</span><br><span class="line">            gateway6: &quot;conohaVPS 管理面板中你自己的IPV6网关&quot;</span><br><span class="line">            dhcp4: true</span><br><span class="line">            dhcp6: true</span><br><span class="line">            accept-ra: true</span><br><span class="line">            optional: true</span><br><span class="line">    version: 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意addresses用双引号圈起来，且ipv6地址后加上“/64”<br><img src= "/customize/img/loading.gif" data-lazy-src="fc0fc667.png"></p><p>查看自己VPS ipv6地址的地方在conoha面板的这些位置，因为安全问题，所以我就打码了，看大概的位置就好<br><img src= "/customize/img/loading.gif" data-lazy-src="d81b8c11.png"></p><p>完成如上配置，最后输入命令重启即可</p><blockquote><p>reboot</p></blockquote><h1 id="NS-配置IPV6域名解析"><a href="#NS-配置IPV6域名解析" class="headerlink" title="NS 配置IPV6域名解析"></a>NS 配置IPV6域名解析</h1><p>我用的是namesilo，在Manage DNS上用VPS的ipv6添加一条AAAA记录即可</p><p><img src= "/customize/img/loading.gif" data-lazy-src="e46981a1.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>配置到这里基本就OK了，<br>如果是用来搭建网站的话，记得在nginx或者apache之类的地方开启IPV6的支持，在这里就不赘述了，搜索一下，答案一大把。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - DNS - NS - 域名解析 - conoha - VPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：管理域名解析时各个资源记录类型</title>
      <link href="article/54606/"/>
      <url>article/54606/</url>
      
        <content type="html"><![CDATA[<p>部署网站的事情嘛..平时也就部署那几次然后能用很久，时间长又得回去查询各种域名解析记录是代表什么意思。<br>为了方便干脆自己做一个简单总结。  </p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">操作系统： win10  </span><br></pre></td></tr></table></figure><hr><h1 id="Manage-DNS"><a href="#Manage-DNS" class="headerlink" title="Manage DNS"></a>Manage DNS</h1><p>许多域名接入商都有提供自己的域名解析服务，这里以nameSilo为例：<br><img src= "/customize/img/loading.gif" data-lazy-src="9a2cdd33.png"><br>上面 A | AAAA | CNAME | MX | TXT/SPF | SRV | CAA 等记录类型</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CNAME:      解析到网址。</span><br><span class="line">A:          解析到ipv4 ip地址。</span><br><span class="line">AAAA:       解析到ipv6 ip地址。</span><br><span class="line">MX:         MX记录就是邮件交换记录，是域名在DNS服务器上的一个记录，告诉那台计算机负责为系统处理邮件。</span><br><span class="line">TXT/SPF:    对发送邮件者的 IP 地址来进行简单的邮件验证的系统，域名的管理员通过 SPF 记录或 TXT 记录来规定这个域名下哪些 IP 地址是「允许」发送邮件的。</span><br><span class="line">SRV:        用来指定服务地址。与常见的A记录、cname不同的是，SRV中除了记录服务器的地址，还记录了服务的端口，并且可以设置每个服务地址的优先级和权重。</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>会常用到的就是CNAME、A、AAAA这三种记录类型，其他的记录类型用上的情况不是太多。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - DNS - NS - 域名解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔：apiherobuy项目总结</title>
      <link href="article/54628/"/>
      <url>article/54628/</url>
      
        <content type="html"><![CDATA[<p>因为新冠肺炎的关系，我所在的公司面临业务转型，所以在电商采集这一块，可能就终止了。<br><a target="_blank" rel="noopener" href="http://api.herobuy.com/">http://api.herobuy.com/</a> 接口项目就做个总结，留个念想。  </p><span id="more"></span><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><pre><code>apiHerobuy项目是用于公司做逆向海淘(海外代购国内商品)业务，主要是通过实时解析国内多个大型电商的商品信息，让海外的用户轻松购买国内的（淘宝、天猫、京东、1688等等的电商大头）商品。但是由于最近的海外 新冠肺炎（英文︰COVID-19）疫情严重，海外的用户购买力下降，加上进出口限制更加严格等问题，导致这方面的业务已经开展不下去了，于是公司代购业务面临转型，而该解析项目也就终止了。于是，就这个项目做一些总结。毕竟，都是我一个人去完成的，就像自己的孩子一样..挺可惜的</code></pre><h1 id="项目展示"><a href="#项目展示" class="headerlink" title="项目展示"></a>项目展示</h1><h2 id="扉页"><a href="#扉页" class="headerlink" title="扉页"></a>扉页</h2><p><img src= "/customize/img/loading.gif" data-lazy-src="%7Bdocument_name%7Def3b19ae.png"></p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p><img src= "/customize/img/loading.gif" data-lazy-src="944e273f.png"></p><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p><img src= "/customize/img/loading.gif" data-lazy-src="3780cdb2.png"></p><h2 id="信息总览"><a href="#信息总览" class="headerlink" title="信息总览"></a>信息总览</h2><p><img src= "/customize/img/loading.gif" data-lazy-src="79cf010e.png"></p><h2 id="菜单总览"><a href="#菜单总览" class="headerlink" title="菜单总览"></a>菜单总览</h2><p><img src= "/customize/img/loading.gif" data-lazy-src="19642816.png"></p><h2 id="爬虫运行管理"><a href="#爬虫运行管理" class="headerlink" title="爬虫运行管理"></a>爬虫运行管理</h2><p><img src= "/customize/img/loading.gif" data-lazy-src="0aad8bdc.png"><br><img src= "/customize/img/loading.gif" data-lazy-src="spiderrun.gif"></p><h2 id="爬虫封装-amp-部署"><a href="#爬虫封装-amp-部署" class="headerlink" title="爬虫封装&amp;部署"></a>爬虫封装&amp;部署</h2><p><img src= "/customize/img/loading.gif" data-lazy-src="30cf0c54.png"></p><h2 id="cookies池，账户信息管理"><a href="#cookies池，账户信息管理" class="headerlink" title="cookies池，账户信息管理"></a>cookies池，账户信息管理</h2><p><img src= "/customize/img/loading.gif" data-lazy-src="b78823ee.png"><br><img src= "/customize/img/loading.gif" data-lazy-src="cookiesPoolUser.gif"></p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>包含但不限于以下技术栈..太多琐碎的了，就列举几个比较大的。</p><ol><li>Django</li><li>Redis</li><li>Mongodb</li><li>Scrapy</li><li>Scrapy-redis</li><li>Scrapyd</li><li>Docker</li><li>uwsgi</li><li>Nginx</li><li>Boostrap4</li><li>JQuery</li><li>AdminLTE</li><li>Pyppeteer</li><li>Requests</li><li>Celery</li><li>DRF</li><li>Linux-Ubuntu18.04</li><li>代理池</li><li>cookies池</li><li>模拟登录</li><li>asyncio</li></ol><h1 id="爬虫包含"><a href="#爬虫包含" class="headerlink" title="爬虫包含"></a>爬虫包含</h1><ol><li><p>京东scrapy:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jdItems:商品详情爬虫</span><br><span class="line">jdShop:商家商品爬虫</span><br><span class="line">jdSearch:商品搜索爬虫</span><br><span class="line">jdSearchm:商品搜索手机版爬虫</span><br><span class="line">兼容：京东大药房、一号店、拍拍等等京东旗下</span><br></pre></td></tr></table></figure></li><li><p>淘宝(天猫)scrapy:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tbItems:商品详情爬虫</span><br><span class="line">tbShop:商家商品爬虫</span><br><span class="line">tbSearch:商品搜索爬虫</span><br></pre></td></tr></table></figure></li><li><p>1688scrapy:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1688Items:商品详情爬虫</span><br><span class="line">1688Shop:商家商品爬虫</span><br><span class="line">1688Search:商品搜索爬虫</span><br></pre></td></tr></table></figure></li></ol><h1 id="代理池"><a href="#代理池" class="headerlink" title="代理池"></a>代理池</h1><ol><li>免费代理<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用 jhao104/proxy_pool 搭建的代理池，主要用于解决代理池从无到有的问题。</span><br><span class="line">算是代理池备用方案，将其内嵌到了apiherobuy中，并作了接口封装转发。</span><br><span class="line">该项目本身也有易扩展的优点，而且支持使用redis,跟apiherobuy技术栈契合。</span><br></pre></td></tr></table></figure></li><li>付费代理阿布云<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">大型采集使用免费代理终归是不够的。</span><br><span class="line">所以还购买了阿布云代理，并开发有关的scrapy中间件，在中间件里面</span><br><span class="line">apiherobuy也做了一层代理接口，方便其他外部项目的调用</span><br></pre></td></tr></table></figure></li></ol><h1 id="cookies池"><a href="#cookies池" class="headerlink" title="cookies池"></a>cookies池</h1><ol><li>pyppeteer 模拟登录 cookies池<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用django+celery+asyncio异步处理的组合来达到使用pyppeteer模拟登录淘宝的目的。</span><br><span class="line">登录成功的cookies会被入库保存，使用的时候通过有关接口调用即可，</span><br><span class="line">支持参数动态切换对应账号cookies。</span><br><span class="line">带有自动和手动cookies有效性检测。</span><br></pre></td></tr></table></figure></li><li>nodeJS Koa服务接口 处理JS逆向<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计划中的东西，但是项目已经终止</span><br></pre></td></tr></table></figure></li></ol><h1 id="工作流程简述"><a href="#工作流程简述" class="headerlink" title="工作流程简述"></a>工作流程简述</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lete/herobuy 电商后端 -&gt; apiherobuy接口(检查mongodb是否已存在或已过时) -&gt; </span><br><span class="line">redis任务队列 —&gt; docker(scrapy) * N 接受任务 —&gt; </span><br><span class="line">入库mongodb + 回调redis —&gt; apiherobuy接口获取数据 —&gt; 发送给 lete/herobuy 电商后端</span><br><span class="line"></span><br><span class="line">apiherobuy接口平台具备web动态管理docker和爬虫部署运行的功能等等</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔心得 </tag>
            
            <tag> 项目总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疑难杂症：pip安装uwsgi报错</title>
      <link href="article/50787/"/>
      <url>article/50787/</url>
      
        <content type="html"><![CDATA[<p>最近在做网站迁移，使用新服务器安装虚拟环境的时候，安装uwsgi报错了。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04  </span><br><span class="line">IDE: JetBrains Pycharm 2018.2.4 x64  </span><br><span class="line">Python: 3.6.9</span><br><span class="line">Django: 3.0.5</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>最近在做网站迁移，使用新服务器安装虚拟环境的时候，uwsgi报错了。<br>使用的是virtualenvwrapper + virtualenv来管理虚拟环境<br>在虚拟环境中pip安装requirements.txt安装不上uwsgi  </p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>退出当前虚拟环境<br>检查服务器主环境是否安装了pip3  </p><blockquote><p>sudo apt-get install python3-pip</p></blockquote><p>再次尝试是否可以安装。    </p><p>如果还是不可以，就需要检查有关的安装依赖是否齐全  </p><ol><li>虚拟环境下的pip是否为最近版本</li><li>python-devel libevent-devel libjpeg-devel 等等安装依赖是否齐全</li><li>python 指向的是什么python版本</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 疑难杂症 - Github - Ubuntu - uWSGI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web后端：Django的models里的objects使用时出现黄色警告</title>
      <link href="article/35497/"/>
      <url>article/35497/</url>
      
        <content type="html"><![CDATA[<p>开发的时候，用django ORM创建好模组model,在视图调用查询的时候，会发现objects报黄。<br>强迫症就无法忍受这样东西了，所以要怎么解决呢？</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04</span><br><span class="line">IDE: JetBrains pycharm 2019.2.4 x64</span><br><span class="line">Python: 3.6.9</span><br></pre></td></tr></table></figure><hr><h1 id="objects-概念"><a href="#objects-概念" class="headerlink" title="objects 概念"></a>objects 概念</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">首先我们先熟悉下objects的大致概念.</span><br><span class="line"></span><br><span class="line">object是模型属性---用于模型对象和数据库交互 .</span><br><span class="line"></span><br><span class="line">objects = Manager（） 是管理器类型的对象 ,是Model和数据库进行查询的接口.</span><br><span class="line"></span><br><span class="line">objects : 管理器对象</span><br><span class="line">是Manager类型的对象，定义在from django.db import models中</span><br><span class="line">用于模型对象和数据库交互</span><br><span class="line">是默认自动生成的属性，但是可以自定义管理器对象</span><br></pre></td></tr></table></figure><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">models.py 文件中</span><br><span class="line">class Students(models.Model):</span><br><span class="line">    name    = models.CharField(max_length=20)</span><br><span class="line">    gender  = models.CharField(max_length=20)</span><br><span class="line">    age     = models.IntegerField()</span><br><span class="line">    contend = models.CharField(max_length=100,null=True,blank=True)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">views.py 文件中</span><br><span class="line">Students.objects.all()</span><br><span class="line"></span><br><span class="line">此时，objects会报出黄色警告，不会影响使用但感觉不太舒服。</span><br></pre></td></tr></table></figure><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">models.py 文件中</span><br><span class="line">class Students(models.Model):</span><br><span class="line">    name    = models.CharField(max_length=20)</span><br><span class="line">    gender  = models.CharField(max_length=20)</span><br><span class="line">    age     = models.IntegerField()</span><br><span class="line">    contend = models.CharField(max_length=100,null=True,blank=True)</span><br><span class="line">    objects=models.Manager()</span><br><span class="line">    </span><br><span class="line">增加一行objects=models.Manager()即可</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Web后端 </tag>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：标准库--IO流</title>
      <link href="article/6647/"/>
      <url>article/6647/</url>
      
        <content type="html"><![CDATA[<p>IO也算是python标准库比较常见的了。<br>平时光用，但没有好好的去理解它。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: JetBrains Pycharm 2019.2.4 x64  </span><br><span class="line">语言: Python 3.7.4</span><br></pre></td></tr></table></figure><hr><h1 id="io流（io-stream）"><a href="#io流（io-stream）" class="headerlink" title="io流（io stream）"></a>io流（io stream）</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    流是一种抽象概念，它代表了数据的无结构化传递。</span><br><span class="line"></span><br><span class="line">    按照流的方式进行输入输出，数据被当成无结构的字节序或字符序列。</span><br><span class="line">从流中取得数据的操作称为提取操作，而向流中添加数据的操作称为插入操作。</span><br><span class="line">用来进行输入输出操作的流就称为IO流。</span><br><span class="line">换句话说，IO流就是以流的方式进行输入输出。</span><br><span class="line"></span><br><span class="line">    输入输出（IO）是指计算机同任何外部设备之间的数据传递。</span><br><span class="line">常见的输入输出设备有文件、键盘、打印机、屏幕等。</span><br><span class="line">数据可以按记录（或称数据块）的方式传递，也可以流的方式传递。</span><br><span class="line">所谓记录，是指有着内部结构的数据块。记录内部除了有需要处理的实际数据之外，还可能包含附加信息，这些附加信息通常是对本记录数据的描述。</span><br></pre></td></tr></table></figure><h1 id="StringIO"><a href="#StringIO" class="headerlink" title="StringIO"></a>StringIO</h1><p>很多时候，数据读写不一定是文件，也可以在内存中读写。</p><p>StringIO顾名思义就是在内存中读写str，也是最常见的一种用法。</p><p>要把str写入StringIO，我们需要先创建一个StringIO，然后，像文件一样写入即可：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from io import StringIO</span><br><span class="line">f = StringIO()</span><br><span class="line">f.write(&#x27;hello&#x27;)            # 返回 5，也即写入的字符数目</span><br><span class="line">f.write(&#x27; &#x27;)</span><br><span class="line">f.write(&#x27;world!&#x27;)</span><br><span class="line">f.getvalue()                # hello world!</span><br></pre></td></tr></table></figure><p>还可以做读取操作，跟文件open读取方法类似</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = StringIO(&#x27;Hello!\nWorld!&#x27;)</span><br><span class="line">while True:</span><br><span class="line">    line = f.readline()</span><br><span class="line">    if line == &#x27;&#x27;:</span><br><span class="line">        break</span><br><span class="line">    print(line.strip())</span><br></pre></td></tr></table></figure><h1 id="BytesIO"><a href="#BytesIO" class="headerlink" title="BytesIO"></a>BytesIO</h1><p>StringIO操作的只能是str，如果要操作二进制数据，就需要使用BytesIO。</p><p>BytesIO实现了在内存中读写bytes，我们创建一个BytesIO，然后写入一些bytes：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from io import BytesIO</span><br><span class="line">f = BytesIO()</span><br><span class="line">f.write(&#x27;中文&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">print(f.getvalue())</span><br><span class="line">运行结果：</span><br><span class="line">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span><br></pre></td></tr></table></figure><p>写入的不是str，而是经过UTF-8编码的bytes。</p><p>和StringIO类似，可以用一个bytes初始化BytesIO，然后，像读文件一样读取：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from io import BytesIO</span><br><span class="line">f = BytesIO(b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;)</span><br><span class="line">f.read()</span><br><span class="line">运行结果：</span><br><span class="line">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>StringIO和BytesIO是在内存中操作str和bytes的方法，使得和读写文件具有一致的接口。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：字符串前面加f是什么意思呢？</title>
      <link href="article/55813/"/>
      <url>article/55813/</url>
      
        <content type="html"><![CDATA[<p>　　python字符串前面加f是怎么回事呢？python相信大家都很熟悉，但是python字符串前面加f是怎么回事呢，下面就让小编带大家一起了解吧。<br>　　python字符串前面加f，其实就是是什么意思，大家可能会很惊讶python怎么会字符串前面加f呢？但事实就是这样，小编也感到非常惊讶。<br>    这就是关于python字符串前面加f的事情了，大家有什么想法呢，欢迎在评论区告诉小编一起讨论哦！</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: JetBrains Pycharm 2019.2.4 x64  </span><br><span class="line">语言: Python 3.7.4</span><br></pre></td></tr></table></figure><hr><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>格式化字符串常量（formatted string literals），<br>是Python3.6新引入的一种字符串格式化方法，<br>该方法源于PEP 498 – Literal String Interpolation，<br>主要目的是使格式化字符串的操作更加简便。<br>f-string在形式上是以 f 或 F 修饰符引领的字符串（f’xxx’ 或 F’xxx’），<br>以大括号 {} 标明被替换的字段；f-string在本质上并不是字符串常量，<br>而是一个在运行时运算求值的表达式。</p><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dc = &#123;&#x27;name&#x27;: &#x27;靓仔&#x27;, &#x27;age&#x27;: 74&#125;</span><br><span class="line">f&quot;The comedian is &#123;dc[&#x27;name&#x27;]&#125;, aged &#123;dc[&#x27;age&#x27;]&#125;.&quot;</span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The comedian is 靓仔, aged 74.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫：如何解决python执行js的bug</title>
      <link href="article/6209/"/>
      <url>article/6209/</url>
      
        <content type="html"><![CDATA[<p>爬虫最烦的就是搞逆向，而逆向其实本身完全可以成为另外一种职业了。<br>做爬虫什么的，太累了。<br>解决pyv8和pyexectjs 出现bug的问题。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: JetBrains Pycharm 2019.2.4 x64  </span><br><span class="line">语言: Python 3.7.4</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>为了吃饭。用文书网做个简单举例。<br>博文主要不是说如何逆向爬取的问题，<br>而是说在python执行JS时出现的问题有什么解决办法。  </p><h1 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h1><ol><li><p>首先，找入口<br><img src= "/customize/img/loading.gif" data-lazy-src="7c12b6cb.png"></p></li><li><p>很容易就找到函数位置<br><img src= "/customize/img/loading.gif" data-lazy-src="af4cb25d.png"></p></li><li><p>复制出来，console执行一波<br><img src= "/customize/img/loading.gif" data-lazy-src="db2ecdd9.png"></p></li><li><p>开始搞js（哪个报错找哪个）<br>可以看出，random没定义，要去找random，修复到堪用就可以<br><img src= "/customize/img/loading.gif" data-lazy-src="d5deb74c.png">  </p></li><li><p>一顿操作猛如虎，放到python里面执行<br>解密完发现，还有令人眼熟的CryptoJS<br>这个百度下，是js的一个加密库<br><img src= "/customize/img/loading.gif" data-lazy-src="4dd2b4ea.png">  </p></li><li><p>nodeJS执行<br>在python的JS执行环境里装一下CryptoJS这个包即可<br><img src= "/customize/img/loading.gif" data-lazy-src="6947ae25.png"><br>然后导入<br><img src= "/customize/img/loading.gif" data-lazy-src="ad383710.png">  </p></li><li><p>或用pyv8等等库去调用CryptoJS源码来使用<br>就像这样，就懒得写那么细了大概意思。<br><img src= "/customize/img/loading.gif" data-lazy-src="a531cde5.png"></p></li><li><p>运行一段时间，你会发现机器cpu100%排查就发现就是这个代码作的孽<br>这是这个库本身的问题，所以最好是用nodejs启动一个服务<br>比如：nodejs koa<br>是nodejs最简单的web框架<br>文书有3个js需要调用，所以你只需要把3个js写成接口调用即可  </p></li><li><p>自建本地web服务 接口逻辑写入js加密文件 然后爬虫调用接口<br>创建文件夹<br><img src= "/customize/img/loading.gif" data-lazy-src="a7231677.png"><br>安装下koa的依赖<br><img src= "/customize/img/loading.gif" data-lazy-src="fb9d61a3.png"><br>每启动一个服务都要安装<br><img src= "/customize/img/loading.gif" data-lazy-src="84b2b936.png"><br>建议去了解一下nodeJS的koa<br>app.js等文件中导入依赖<br>npm i xx 命令，该加的就加上<br><img src= "/customize/img/loading.gif" data-lazy-src="406da279.png"><br><img src= "/customize/img/loading.gif" data-lazy-src="c8ce448f.png"><br><img src= "/customize/img/loading.gif" data-lazy-src="66b9f5ef.png">  </p></li><li><p>把之前逆向好的JS源码拷贝到koa<br><img src= "/customize/img/loading.gif" data-lazy-src="40b68527.png"><br><img src= "/customize/img/loading.gif" data-lazy-src="84635f4e.png"><br>配置路径<br><img src= "/customize/img/loading.gif" data-lazy-src="4e510492.png"><br>输入次级路径<br><img src= "/customize/img/loading.gif" data-lazy-src="79272052.png"><br>就基本把这个小接口完工啦！<br>最后放个全家福！<br><img src= "/customize/img/loading.gif" data-lazy-src="dc19e0b2.png"></p></li><li><p>npm启动接口服务<br>配置路由，导入，完事<br><img src= "/customize/img/loading.gif" data-lazy-src="3119cf52.png"></p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>说真的，这类东西用文字讲不清楚。<br>全当说个思路好了。<br>源码的话，会放到github仓库中了<br><a target="_blank" rel="noopener" href="https://github.com/DeSireFire/wenshuFuwuNodeJSKoa">KOA源码</a></p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 反爬案例 </tag>
            
            <tag> 文书网 </tag>
            
            <tag> JS逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫：记录一次字体反爬的过程</title>
      <link href="article/49267/"/>
      <url>article/49267/</url>
      
        <content type="html"><![CDATA[<p>近期实践对中国供应商网的字体反爬进行一次练习，并写博文作为记录</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: JetBrains Pycharm 2019.2.4 x64  </span><br><span class="line">语言: Python 3.7.4</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>为了吃饭。</p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>从中国供应商网上，将公开的电话号码采集下来</p><blockquote><p><a target="_blank" rel="noopener" href="https://ph0101.cn.china.cn/contact-information/">https://ph0101.cn.china.cn/contact-information/</a></p></blockquote><h1 id="目标网站HTML"><a href="#目标网站HTML" class="headerlink" title="目标网站HTML"></a>目标网站HTML</h1><p>考虑到网站可能会改版，导致博文例子失效，所以把当时网站前端HTML单独保存下来，<br>方便以后即使网站改版也能用旧的HTML来对比理解博文内容。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-cn&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;</span><br><span class="line">&lt;meta charset=&quot;gbk&quot;&gt;</span><br><span class="line">&lt;title&gt;¹ãÖÝÐÂ¼¯ÔË¹ú¼Ê»õÔËÓÐÏÞ¹«Ë¾ÁªÏµ·½Ê½&lt;/title&gt;</span><br><span class="line">&lt;meta name=&quot;keywords&quot; content=&quot;º£ÔË»õÎï,¿ÕÔË¿ìµÝ,¼Ò¾ßÔËÊä,ÈÕ³£Éú»îÓÃÆ·ÔËÊä&quot;/&gt;</span><br><span class="line">&lt;meta name=&quot;description&quot; content=&quot;¹ãÖÝÐÂ¼¯ÔË¹ú¼Ê»õÔËÓÐÏÞ¹«Ë¾¾­ÀíÅíÏÈÉúÁªÏµ·½Ê½&quot;/&gt;</span><br><span class="line">&lt;meta name=&quot;location&quot; content=&quot;province=¹ã¶«;city=¹ãÖÝ&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;applicable-device&quot; content=&quot;pc&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;alternate&quot; media=&quot;only screen and (max-width: 640px)&quot; href=&quot;https://site.china.cn/baiyun/ph0101/contact-information.html&quot;/&gt;</span><br><span class="line">&lt;meta name=&quot;mobile-agent&quot; content=&quot;format=html5; url=https://site.china.cn/baiyun/ph0101/contact-information.html&quot;/&gt;</span><br><span class="line">&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;https://himg.china.cn/css/store_v2/themes/default/main.min.css?t=20190905&quot; /&gt;&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;https://himg.china.cn/css/common/tg.min.css&quot; /&gt;&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;https://himg.china.cn/css/erm/turn2.min.css&quot; /&gt;&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;https://himg.china.cn/css/www/company/common-qy.min.css?t=20190316&quot; /&gt;&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;https://himg.china.cn/css/common/topcss.min.css?t=20190430&quot; /&gt;&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;https://himg.china.cn/css/store_v2/layouts/New/index.min.css?t=20191230&quot; /&gt;&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;https://himg.china.cn/css/store_v2/page.min.css&quot; /&gt; &lt;script src=&quot;https://himg.china.cn/js/common/count/count.js&quot; data-token=&quot;pc-store&quot; id=&quot;token&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!--[if lt IE 9]&gt;</span><br><span class="line">         &lt;script src=&quot;https://himg.china.cn/js/common/html5shiv/3.7.3/html5shiv.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;![endif]--&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;@font-face&#123;font-family:&#x27;icomoon&#x27;;src:url(&#x27;data:application/font-ttf;charset=utf-8;base64,T1RUTwAJAIAAAwAQQ0ZGIArwoK0AAATgAAAErE9TLzJlUd/cAAABAAAAAGBjbWFwACwLIwAABAQAAAC8aGVhZBUka0AAAACcAAAANmhoZWEA3wBcAAAA1AAAACRobXR4CHwAAAAACYwAAAAobWF4cAAKUAAAAAD4AAAABm5hbWUKXYQxAAABYAAAAqNwb3N0AAMAAAAABMAAAAAgAAEAAAABAAC0KjOWXw889QADAQAAAAAA2sWWSgAAAADaxZZKAAT//wB+ALUAAAADAAIAAAAAAAAAAQAAAN3/xQAAAIwAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAoAAFAAAAoAAAADAIAB9AAFAAACigK7AAAAjAKKArsAAAHfADEBAgAAAAAAAAAAAAAAAIAAAAEAAAAAAAAAAAAAAABYWFhYAEAAiQCRAN3/xQAAALUAAQAAAAEAAAAAAG8AtQAAAAAAAAAAACIBngABAAAAAAAAAAEAQgABAAAAAAABAAwAAAABAAAAAAACAAYAJAABAAAAAAADABUAxgABAAAAAAAEABMANgABAAAAAAAFAAsApQABAAAAAAAGABIAbwABAAAAAAAHAAEAQgABAAAAAAAIAAEAQgABAAAAAAAJAAEAQgABAAAAAAAKAAEAQgABAAAAAAALAAEAQgABAAAAAAAMAAEAQgABAAAAAAANAAEAQgABAAAAAAAOAAEAQgABAAAAAAAQAAwAAAABAAAAAAARAAYAJAADAAEECQAAAAIAYQADAAEECQABABgADAADAAEECQACAAwAKgADAAEECQADACoA2wADAAEECQAEACYASQADAAEECQAFABYAsAADAAEECQAGACQAgQADAAEECQAHAAIAYQADAAEECQAIAAIAYQADAAEECQAJAAIAYQADAAEECQAKAAIAYQADAAEECQALAAIAYQADAAEECQAMAAIAYQADAAEECQANAAIAYQADAAEECQAOAAIAYQADAAEECQAQABgADAADAAEECQARAAwAKk9wZW5UeXBlU2FucwBPAHAAZQBuAFQAeQBwAGUAUwBhAG4Ac01lZGl1bQBNAGUAZABpAHUAbU9wZW5UeXBlU2FucyBNZWRpdW0ATwBwAGUAbgBUAHkAcABlAFMAYQBuAHMAIABNAGUAZABpAHUAbU9wZW5UeXBlU2Fuc01lZGl1bQBPAHAAZQBuAFQAeQBwAGUAUwBhAG4AcwBNAGUAZABpAHUAbVZlcnNpb24gMC4xAFYAZQByAHMAaQBvAG4AIAAwAC4AMSA6T3BlblR5cGVTYW5zIE1lZGl1bQAgADoATwBwAGUAbgBUAHkAcABlAFMAYQBuAHMAIABNAGUAZABpAHUAbQAAAAACAAMAAQAAABQAAwAKAAAANAAEACAAAAAEAAQAAQAAAAD//wAAAAD//wAAAAEAAAAAAAwAAAAAAIgAAAAAAAAACgAAAAAAAAAAAAAAAAABAIkAAQCJAAAAAQABAIoAAQCKAAAAAgABAIsAAQCLAAAAAwABAIwAAQCMAAAABAABAI0AAQCNAAAABQABAI4AAQCOAAAABgABAI8AAQCPAAAABwABAJAAAQCQAAAACAABAJEAAQCRAAAACQADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAEAQABAQETT3BlblR5cGVTYW5zTWVkaXVtAAEBAT/4GwD4HAL4HQP4HgSLivdx9yAFHQAAAOkPHQAAAPwRix0AAASsEh4KADkGJf8eDx4PHgoAOQYl/x4PHg8MBwANAQEMHysxOUFJUVlhaXF5VmVyc2lvbiAwLjFPcGVuVHlwZVNhbnMgTWVkaXVtT3BlblR5cGVTYW5zTWVkaXVtdW5pMTAwODl1bmkxMDA4YXVuaTEwMDhidW5pMTAwOGN1bmkxMDA4ZHVuaTEwMDhldW5pMTAwOGZ1bmkxMDA5MHVuaTEwMDkxAAAAAYsBjAGNAY4BjwGQAZEBkgGTAAoCAAEABABLAMUBKQHWAlIChwKcAvYDmPqUDvcS7Y4VR4sFi5IFm4sFkIuOjouSCIuLBYv3GgWLkYmNhogIi4sFe4MFiJMFsqEFkocFi/sxBYuEjoiQiwiLiwWbiwWLhAUO9xLt9zAVUIsFg2cFvYykdoxhCIuLBYhmdXdhiAiLiwV3i4GQipQIi4sFi5OOj5KLCIuLBZCMkYiThAiLiwWThpGIjosIi4sFnIyUmYylCIuLBY2rd5phigiLiwWIi4qNi44Ii4sFmtgF1YsFh3sFi4iJiYiLCIuLBQ73EvXDFZGLBYtWBSOLBYuSBbrCBZyfk6CLogiLiwWLoIOVeosIi4sFfIx+f39zCIuLBYSNBZSvnZ2liwiLiwWniZp7jG0Ii4sFjHmAdnRyCIuLBWRfBb+LBZaKkpWOoQiLiwUO9xLB3hWLiwV7gIN+jHwIi4sFjHSWf6CKCIuLBZ6NlZaMngiLiwWLmn2acJoIkzcVi4sFbI16mYikCIuLBYqdlpyimgiLiwV2mYGbjJ0Ii4sFjaaamaiNCIuLBaaJmn6NcwiLiwWMe4F9dn4Ii4sFpnyYeYp1CIuLBYpuenxqighw9ygVi4sFin2VfaB9CIuLBZqXk5iLmQiLiwWKnYGVeIwIi4sFfIqDgop7CA73EvcD90kVi4sFi4MFYH9ycoRkCIuLBZWUlpCXiwiLiwWoiZt5jWkIi4sFiGh5eGqICIuLBWiMeaKKuAiLiwWQyq2wypcIWTYVi4sFgouCiIKFCIuLBYp/i4KMhAiLiwWMZ5V5nowIi4sFnoyVmoupCIuLBYypgJp1iggO9xLpxxWkiwWLdwVyiwWLYgV3iwWLtAVFiwWLngXZ9w4Fl4sFi/sNBTyLFcaLBYvnBVAvBQ73IPcS6RWLegX7BYsFi5wF9wWLBQ73Esr3QRWLiwV2jIBvi1MIi4sFilGWb6GNCIuLBaGKlqeKxAiLiwWLw4CndooIi5MVi4sFrIeebZBSCIuLBYhSeG1oiAiLiwVojXipicYIi4sFj8SeqayOCA73ErLfFYuLBYmTBaeVmZqKngiLiwWLm4STfosIi4sFfIx9gX53CIuLBYWOBZaqnJuijAiLiwWliph/jHMIi4sFi3yCfnp/CIuLBaSIl3yLcQiLiwWJZHN3XIkIi4sFeYyCkIqUCIuLBYySjo+RjAiLiwWOi5CIkoYIi4sFioyMi42KCIuLBZKGkYmQiwiLiwWejpWZjaQIi4sFjqp6lmaDCA4EAAAAAH4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAIwAAAB+AAAAfgAA&#x27;) format(&#x27;truetype&#x27;);&#125; .secret&#123; font-family: &#x27;icomoon&#x27; !important; &#125;&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;top-bor fl-clr&quot; id=&quot;topaBar&quot; data-type=&quot;shopTemplate&quot;&gt;</span><br><span class="line">&lt;div class=&quot;top_box bw_1190&quot;&gt;</span><br><span class="line">&lt;div class=&quot;account-sign-status&quot;&gt;</span><br><span class="line">&lt;span class=&quot;welcome&quot;&gt;</span><br><span class="line">&lt;span class=&quot;tourist-welcome&quot;&gt;ÄúºÃ£¬»¶Ó­À´µ½ÖÐ¹ú¹©Ó¦ÉÌ£¡&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;account-welcome hide&quot;&gt;ÄúºÃ£¬&lt;em id=&quot;loginname&quot;&gt;&lt;/em&gt;»¶Ó­»ØÀ´&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;logout&quot;&gt;</span><br><span class="line">&lt;a href=&quot;https://my.cn.china.cn/manage.php?op=LoginShowNew&amp;destUrl=https%3A%2F%2Fph0101.cn.china.cn&quot; rel=&quot;nofollow&quot; data-scode=&quot;32071&quot; title=&quot;ÇëµÇÂ¼&quot;&gt;[ÇëµÇÂ¼]&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;https://my.cn.china.cn/manage.php?op=B2BRegisterShow&amp;from=storetop&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot; data-scode=&quot;32072&quot; title=&quot;Ãâ·Ñ×¢²á&quot;&gt;[Ãâ·Ñ×¢²á]&lt;/a&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;login hide&quot;&gt;</span><br><span class="line">&lt;a href=&quot;https://my.cn.china.cn/manage.php?op=AdminIndex&quot; target=&quot;_blank&quot; data-scode=&quot;32073&quot; title=&quot;¹ÜÀíÔ±Èë¿Ú&quot;&gt;[¹ÜÀíÔ±Èë¿Ú]&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;https://my.cn.china.cn/manage.php?op=logout&quot; target=&quot;_blank&quot; data-scode=&quot;32074&quot; rel=&quot;nofollow&quot; title=&quot;ÍË³ö&quot;&gt;[ÍË³ö]&lt;/a&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;topNav&quot;&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;https://cn.china.cn&quot; target=&quot;_blank&quot; data-scode=&quot;32075&quot; title=&quot;ÖÐ¹ú¹©Ó¦ÉÌÊ×Ò³&quot;&gt;ÖÐ¹ú¹©Ó¦ÉÌÊ×Ò³&lt;/a&gt;&lt;span&gt;|&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;quick_nav&quot;&gt;</span><br><span class="line">&lt;div class=&quot;a_wrap&quot;&gt;&lt;a href=&quot;https://my.cn.china.cn/manage.php?op=AdminIndex&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot; data-scode=&quot;32076&quot; title=&quot;ÎÒµÄÖÐ¹©&quot;&gt;ÎÒµÄÖÐ¹©&lt;span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;|&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;nav-hover inc_items&quot; id=&quot;demain&quot;&gt;</span><br><span class="line">&lt;dl id=&quot;buyers&quot;&gt;</span><br><span class="line">&lt;dt&gt;&lt;strong&gt;ÎÒµÄ¹©Ó¦&lt;/strong&gt;&lt;/dt&gt;</span><br><span class="line">&lt;dd&gt;&lt;a href=&quot;https://my.cn.china.cn/manage.php?op=SellInfoCatNew&quot; rel=&quot;nofollow&quot; data-scode=&quot;32076&quot; title=&quot;·¢²¼²úÆ·ÐÅÏ¢&quot;&gt;·¢²¼²úÆ·ÐÅÏ¢&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;&lt;a href=&quot;https://my.cn.china.cn/manage.php?op=SellInfoListNew&quot; rel=&quot;nofollow&quot; data-scode=&quot;32076&quot; title=&quot;¹ÜÀí²úÆ·ÐÅÏ¢&quot;&gt;¹ÜÀí²úÆ·ÐÅÏ¢&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line">&lt;dl&gt;</span><br><span class="line">&lt;dt&gt;&lt;strong&gt;ÎÒµÄ²É¹º&lt;/strong&gt;&lt;/dt&gt;</span><br><span class="line">&lt;dd&gt;&lt;a href=&quot;https://my.cn.china.cn/manage.php?op=BuyInfoShowNew&quot; rel=&quot;nofollow&quot; data-scode=&quot;32076&quot; title=&quot;·¢²¼²É¹ºÐÅÏ¢&quot;&gt;·¢²¼²É¹ºÐÅÏ¢&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;&lt;a href=&quot;https://my.cn.china.cn/manage.php?op=BuyInfoListNew&quot; rel=&quot;nofollow&quot; data-scode=&quot;32076&quot; title=&quot;¹ÜÀí²É¹ºÐÅÏ¢&quot;&gt;¹ÜÀí²É¹ºÐÅÏ¢&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line">&lt;dl class=&quot;bdno&quot;&gt;</span><br><span class="line">&lt;dt&gt;&lt;strong&gt;Ð¡¹¤¾ß&lt;/strong&gt;&lt;/dt&gt;</span><br><span class="line">&lt;dd&gt;&lt;a href=&quot;https://my.cn.china.cn/manage.php?op=NoteListNew&quot; rel=&quot;nofollow&quot; data-scode=&quot;32076&quot; title=&quot;ÏûÏ¢¹ÜÀí&quot;&gt;ÏûÏ¢¹ÜÀí&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;&lt;a href=&quot;https://my.cn.china.cn/manage.php?op=ShopViewAnalysis&quot; rel=&quot;nofollow&quot; data-scode=&quot;32076&quot; title=&quot;ÉÌÆÌÍ³¼Æ&quot;&gt;ÉÌÆÌÍ³¼Æ&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">&lt;dd class=&quot;bdmfno&quot;&gt;&lt;a href=&quot;https://my.cn.china.cn/manage.php?op=TestCenter&quot; rel=&quot;nofollow&quot; data-scode=&quot;32076&quot; title=&quot;¼ì²âÖÐÐÄ&quot;&gt;¼ì²âÖÐÐÄ&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;quick_nav&quot; data-role=&quot;alternate&quot;&gt;</span><br><span class="line">&lt;div class=&quot;a_wrap&quot;&gt;&lt;a href=&quot;https://cn.china.cn/newxmt.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot; data-scode=&quot;32077&quot; title=&quot;ÍøÕ¾ÍÆ¹ã&quot;&gt;ÍøÕ¾ÍÆ¹ã&lt;span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;|&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;nav-hover website_promotion&quot;&gt;</span><br><span class="line">&lt;dl class=&quot;website_dl&quot;&gt;</span><br><span class="line">&lt;dd&gt;</span><br><span class="line">&lt;a href=&quot;https://cn.china.cn/tgt.html&quot; data-scode=&quot;50031&quot; target=&quot;_blank&quot; title=&quot;ÍÆ¹ãÍ¨&quot;&gt;</span><br><span class="line">&lt;div class=&quot;title&quot;&gt;&lt;i class=&quot;i0&quot;&gt;&lt;/i&gt;ÍÆ¹ãÍ¨&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;txt&quot;&gt;Èë×¤°Ù¶È°®²É¹º ¶à¶ËÍ¬²½ÆØ¹âµÄ¸ßÐÔ¼Û±ÈµÄÆóÒµÍÆ¹ã·þÎñ&lt;/div&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;</span><br><span class="line">&lt;a href=&quot;https://cn.china.cn/newxmt.html&quot; data-scode=&quot;32078&quot; target=&quot;_blank&quot; title=&quot;ÐÅÃ³Í¨&quot;&gt;</span><br><span class="line">&lt;div class=&quot;title&quot;&gt;&lt;i class=&quot;i1&quot;&gt;&lt;/i&gt;ÐÅÃ³Í¨&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;txt&quot;&gt;Ò»Õ¾Ê½·þÎñ È«ÍøÓÅ»¯ ÊÕÂ¼¸ßÐ§ ÅÅÃûÇáËÉ ×ã²»³ö»§ ÉúÒâÍ¨ÌìÏÂ&lt;/div&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;</span><br><span class="line">&lt;a href=&quot;https://cn.china.cn/qqt.html&quot; data-scode=&quot;32079&quot; target=&quot;_blank&quot; title=&quot;È«ÇòÍ¨&quot;&gt;</span><br><span class="line">&lt;div class=&quot;title&quot;&gt;&lt;i class=&quot;i2&quot;&gt;&lt;/i&gt;&lt;img src=&quot;https://himg.china.cn/img/common/ex2_wz.png&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;txt&quot;&gt;ÃæÏòÈ«Çò¶þÊ®´óËÑË÷ÒýÇæ¶¨ÏòÍÆ¹ã ¶¨Î»È«Çòº£Á¿Âò¼Ò&lt;/div&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;</span><br><span class="line">&lt;a href=&quot;https://cn.china.cn/keywords.html&quot; data-scode=&quot;32080&quot; target=&quot;_blank&quot; title=&quot;¹Ø¼ü´ÊÓÅ»¯&quot;&gt;</span><br><span class="line">&lt;div class=&quot;title&quot;&gt;&lt;i class=&quot;i3&quot;&gt;&lt;/i&gt;¹Ø¼ü´ÊÓÅ»¯&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;txt&quot;&gt;ËÑË÷ÒýÇæÊ×Ò³ÇáËÉÉÏ&lt;/div&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;</span><br><span class="line">&lt;a href=&quot;https://cn.china.cn/service/&quot; data-scode=&quot;32081&quot; target=&quot;_blank&quot; title=&quot;ÔöÖµ·þÎñ&quot;&gt;</span><br><span class="line">&lt;div class=&quot;title&quot;&gt;&lt;i class=&quot;i4&quot;&gt;&lt;/i&gt;ÔöÖµ·þÎñ&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;txt&quot;&gt;È«·½Î»ÒýÁ÷£¬ÖúÁ¦Ç¿ÊÆÆØ¹â&lt;/div&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;quick_nav&quot;&gt;</span><br><span class="line">&lt;div class=&quot;a_wrap&quot;&gt;&lt;a href=&quot;https://cn.china.cn/service/&quot; target=&quot;_blank&quot; data-scode=&quot;32082&quot; title=&quot;ÔöÖµ·þÎñ&quot;&gt;ÔöÖµ·þÎñ&lt;span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;|&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;nav-hover&quot;&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;https://cn.china.cn/hotkeeper.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot; data-scode=&quot;30071&quot; title=&quot;ÍúÆÌ¹Ü¼Ò&quot;&gt;ÍúÆÌ¹Ü¼Ò&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;https://cn.china.cn/zzt.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot; data-scode=&quot;30071&quot; title=&quot;Õ¾Õ¾Í¨&quot;&gt;Õ¾Õ¾Í¨&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;https://cn.china.cn/e-business/index.html?from=dt&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot; data-scode=&quot;30071&quot; title=&quot;ÖÐ¹©µçÉÌ&quot;&gt;ÖÐ¹©µçÉÌ&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;https://www.china.cn/design/?from=dt&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot; data-scode=&quot;30071&quot; title=&quot;Éè¼Æ·þÎñ&quot;&gt;Éè¼Æ·þÎñ&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;https://cn.china.cn/search360.html?from=dt&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot; data-scode=&quot;30071&quot; title=&quot;360ÍÆ¹ã&quot;&gt;360ÍÆ¹ã&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;https://ph0101.cn.china.cn/contact-information/&quot; target=&quot;_blank&quot; title=&quot;ÁªÏµÂô¼Ò&quot; data-scode=&quot;32083&quot;&gt;ÁªÏµÂô¼Ò&lt;/a&gt;&lt;span&gt;|&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;quick_nav&quot;&gt;</span><br><span class="line">&lt;div class=&quot;a_wrap&quot;&gt;&lt;a href=&quot;https://cn.china.cn/bangzhu.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot; data-scode=&quot;32084&quot; title=&quot;¿Í·þÖÐÐÄ&quot;&gt;¿Í·þÖÐÐÄ&lt;span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;|&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;nav-hover&quot; style=&quot;display: none;&quot;&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;https://cn.china.cn/bangzhu/guide.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot; data-scode=&quot;32084&quot; title=&quot;ÐÂÊÖÈëÃÅ&quot;&gt;ÐÂÊÖÈëÃÅ&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;https://cn.china.cn/bangzhu.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot; data-scode=&quot;32084&quot; title=&quot;×ÔÖúÊ×Ò³&quot;&gt;×ÔÖúÊ×Ò³&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;https://my.cn.china.cn/manage.php?op=B2BForgetInfoShow&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot; data-scode=&quot;32084&quot; title=&quot;ÕÒ»ØÉÌÆÌ&quot;&gt;ÕÒ»ØÉÌÆÌ&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;https://my.cn.china.cn/manage.php?op=resetmembershow&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot; data-scode=&quot;32084&quot; title=&quot;×¢ÏúÉÌÆÌ&quot;&gt;×¢ÏúÉÌÆÌ&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;https://cn.china.cn/aboutus/contact.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot; data-scode=&quot;32084&quot; title=&quot;ÁªÏµ¿Í·þ&quot;&gt;ÁªÏµ¿Í·þ&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;quick_nav&quot;&gt;</span><br><span class="line">&lt;div class=&quot;a_wrap&quot;&gt;&lt;a href=&quot;https://cn.china.cn/map/&quot; rel=&quot;nofollow&quot; data-scode=&quot;32085&quot; target=&quot;_blank&quot; title=&quot;ÍøÕ¾µ¼º½&quot;&gt;ÍøÕ¾µ¼º½&lt;span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;|&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;nav-hover&quot; style=&quot;display: none;&quot;&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;https://www.china.cn/xinzengchanpin/&quot; target=&quot;_blank&quot; data-scode=&quot;32085&quot; title=&quot;×îÐÂ²úÆ·&quot;&gt;×îÐÂ²úÆ·&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;https://www.china.cn/category/chuanbo.html&quot; target=&quot;_blank&quot; data-scode=&quot;32085&quot; title=&quot;ÐÐÒµ²úÆ·&quot;&gt;ÐÐÒµ²úÆ·&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;https://ph0101.cn.china.cn/sitemap/&quot; target=&quot;_blank&quot; data-scode=&quot;32085&quot; title=&quot;²úÆ·µØÍ¼&quot;&gt;²úÆ·µØÍ¼&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;https://www.china.cn/relatedwords/chuanbo.html&quot; target=&quot;_blank&quot; data-scode=&quot;32085&quot; title=&quot;ÓÅÖÊÈÈ´Ê&quot;&gt;ÓÅÖÊÈÈ´Ê&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;https://site.china.cn/baiyun/ph0101/contact-information.html&quot; target=&quot;_blank&quot; data-scode=&quot;32085&quot; title=&quot;¹ãÖÝÐÂ¼¯ÔË¹ú¼Ê»õÔËÓÐÏÞ¹«Ë¾ÒÆ¶¯Õ¾µã&quot;&gt;ÒÆ¶¯Õ¾µã&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;logo_bj&quot;&gt;</span><br><span class="line">&lt;div class=&quot;logo fl-clr&quot;&gt;</span><br><span class="line">&lt;a href=&quot;https://ph0101.cn.china.cn&quot; data-scode=&quot;32017&quot; title=&quot;¹ãÖÝÐÂ¼¯ÔË¹ú¼Ê»õÔËÓÐÏÞ¹«Ë¾&quot;&gt;&lt;img src=&quot;https://img1.fr-trading.com/1/5_174_1672042_490_490.jpg&quot; height=&quot;80&quot; align=&quot;baseline&quot; alt=&quot;¹ãÖÝÐÂ¼¯ÔË¹ú¼Ê»õÔËÓÐÏÞ¹«Ë¾&quot;/&gt;&lt;/a&gt;</span><br><span class="line">&lt;div class=&quot;h1_box&quot;&gt;</span><br><span class="line">&lt;div class=&quot;h1&quot;&gt;</span><br><span class="line">&lt;div class=&quot;merchant-dropdown&quot;&gt;</span><br><span class="line">&lt;h1 data-role=&quot;nameplateA&quot;&gt;</span><br><span class="line">&lt;a href=&quot;https://ph0101.cn.china.cn&quot; data-scode=&quot;32018&quot; title=&quot;¹ãÖÝÐÂ¼¯ÔË¹ú¼Ê»õÔËÓÐÏÞ¹«Ë¾&quot; class=&quot;titlecompany&quot;&gt;¹ãÖÝÐÂ¼¯ÔË¹ú¼Ê»õÔËÓÐÏÞ¹«Ë¾&lt;/a&gt;</span><br><span class="line">&lt;div class=&quot;nameplate_box&quot; data-role=&quot;nameplateB&quot;&gt;</span><br><span class="line">&lt;div class=&quot;title&quot;&gt;</span><br><span class="line">&lt;a href=&quot;https://ph0101.cn.china.cn&quot; title=&quot;¹ãÖÝÐÂ¼¯ÔË¹ú¼Ê»õÔËÓÐÏÞ¹«Ë¾&quot;&gt;¹ãÖÝÐÂ¼¯ÔË¹ú¼Ê»õÔËÓÐÏÞ¹«Ë¾&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;https://ph0101.cn.china.cn/certificates.html&quot; target=&quot;_blank&quot; title=&quot;ÖÐ¹ú¹©Ó¦ÉÌÓÅÖÊÉÌ¼Ò&quot; rel=&quot;nofollow&quot;&gt;&lt;i class=&quot;Member_Id pt&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;nameplate_text fl-clr&quot;&gt;</span><br><span class="line">&lt;div class=&quot;nameplate_l&quot;&gt;</span><br><span class="line">&lt;ul class=&quot;business_xx&quot;&gt;</span><br><span class="line">&lt;li&gt;&lt;span class=&quot;t&quot;&gt;Èë×¤ÖÐ¹©£º&lt;/span&gt;&lt;em&gt;1&lt;/em&gt;Äê&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;span class=&quot;t&quot;&gt;Ëù ÔÚ µØ£º&lt;/span&gt;¹ã¶« ¹ãÖÝ °×ÔÆÇø&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;span class=&quot;t&quot;&gt;Ö÷Óª²úÆ·£º&lt;/span&gt;</span><br><span class="line">&lt;a href=&quot;https://www.china.cn/search/3kkzj.shtml&quot; target=&quot;_blank&quot; title=&quot;º£ÔË»õÎï&quot; data-scode=&quot;&quot;&gt;º£ÔË»õÎï&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;https://www.china.cn/search/4ptpoa.shtml&quot; target=&quot;_blank&quot; title=&quot;¿ÕÔË¿ìµÝ&quot; data-scode=&quot;&quot;&gt;¿ÕÔË¿ìµÝ&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;https://www.china.cn/search/35wd9.shtml&quot; target=&quot;_blank&quot; title=&quot;¼Ò¾ßÔËÊä&quot; data-scode=&quot;&quot;&gt;¼Ò¾ßÔËÊä&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;https://www.china.cn/search/3p2rrsy.shtml&quot; target=&quot;_blank&quot; title=&quot;ÈÕ³£Éú»îÓÃÆ·ÔËÊä&quot; data-scode=&quot;&quot;&gt;ÈÕ³£Éú»îÓÃÆ·ÔËÊä&lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;div class=&quot;bottom&quot;&gt;</span><br><span class="line">&lt;a href=&quot;https://cn.china.cn/tgt.html&quot; target=&quot;_blank&quot;&gt;&lt;span class=&quot;Not_opened&quot;&gt;&lt;em&gt;Î´¿ªÍ¨&lt;/em&gt;&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;https://ph0101.cn.china.cn/message/1.html&quot; target=&quot;_blank&quot; class=&quot;bnt&quot;&gt;Ñ¯ ÅÌ&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;nameplate_r license&quot;&gt;</span><br><span class="line">&lt;a href=&quot;https://ph0101.cn.china.cn/certificates.html&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://himg.china.cn/css/store_v2/layouts/New/img/qualification2019.png&quot; width=&quot;100%&quot;&gt;&lt;span&gt;²é¿´ÓªÒµÖ´ÕÕ&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;span class=&quot;e_code&quot;&gt;</span><br><span class="line">&lt;div class=&quot;pro-qrcode&quot; data-role=&quot;qrcode&quot; data-config=&quot;&#123;&#x27;url&#x27;:&#x27;https://www.china.cn/common/qrcode/corporations/ph0101.png&#x27;,&#x27;width&#x27;:&#x27;107&#x27;,&#x27;height&#x27;:&#x27;107&#x27;,&#x27;txt&#x27;:&#x27;ÊÖ»ú²é¿´#Ò»¼ü´òµç»°¸øÉÌ¼Ò&#x27;,&#x27;pos&#x27;:&#x27;0&#x27;,&#x27;left&#x27;:&#x27;-103&#x27;,&#x27;top&#x27;:&#x27;22&#x27;,&#x27;thumb&#x27;:&#123;&#x27;thumbUrl&#x27;:&#x27;//himg.china.cn/img/common/ioc_he.png&#x27;,&#x27;thumbWidth&#x27;:&#x27;16px&#x27;,&#x27;thumbHeight&#x27;:&#x27;16px&#x27;&#125;&#125;&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;a rel=&quot;Nofollow&quot; role=&quot;button&quot; data-toggle=&quot;modal&quot; href=&quot;#collection&quot; title=&quot;ÊÕ²Ø&quot; data-role=&quot;collectionshop&quot; onClick=&quot;collection()&quot; class=&quot;collection_btn&quot;&gt;&lt;i&gt;&lt;/i&gt;ÊÕ²Ø&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;h2 class=&quot;sale_main fl-clr&quot;&gt;Ö÷Óª²úÆ·£ºº£ÔË»õÎï¡¢¿ÕÔË¿ìµÝ¡¢¼Ò¾ßÔËÊä¡¢ÈÕ³£Éú»îÓÃÆ·ÔËÊä&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;search-warp fl-clr&quot; data-role=&quot;SearchControl&quot; data-type=&quot;4&quot;&gt;</span><br><span class="line">&lt;div class=&quot;serch-bar&quot;&gt;</span><br><span class="line">&lt;div class=&quot;contact_number&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;span class=&quot;secret&quot;&gt;&amp;#x10089;&amp;#x1008a;&amp;#x1008b;-&amp;#x10089;&amp;#x1008c;&amp;#x1008c;&amp;#x1008c;-&amp;#x1008a;&amp;#x1008d;&amp;#x1008d;&amp;#x1008e;&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;input name=&quot;&quot; type=&quot;hidden&quot; id=&quot;contact_number&quot; value=&quot;&amp;#x10089;&amp;#x1008a;&amp;#x1008b;-&amp;#x10089;&amp;#x1008c;&amp;#x1008c;&amp;#x1008c;-&amp;#x1008a;&amp;#x1008d;&amp;#x1008d;&amp;#x1008e;&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;nav_dh&quot;&gt;</span><br><span class="line">&lt;ul class=&quot;nav_ul&quot;&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;https://ph0101.cn.china.cn&quot; data-online=&quot;Conversation&quot; data-scode=&quot;32021&quot; title=&quot;¹«Ë¾Ê×Ò³&quot; class=&quot;a&quot;&gt;¹«Ë¾Ê×Ò³&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li id=&quot;dhxl&quot; class=&quot;second &quot;&gt;&lt;a href=&quot;https://ph0101.cn.china.cn/supply/&quot; class=&quot;a&quot; title=&quot;¹©Ó¦ÐÅÏ¢&quot; data-scode=&quot;32022&quot;&gt;&lt;span&gt;¹©Ó¦ÐÅÏ¢&lt;i&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">&lt;div class=&quot;txt&quot;&gt;</span><br><span class="line">&lt;div class=&quot;second_div&quot;&gt;</span><br><span class="line">&lt;p class=&quot;t&quot;&gt;&lt;a data-scode=&quot;32023&quot; href=&quot;https://ph0101.cn.china.cn/supply/g4482928196_1.html&quot; title=&quot;¼ÓÄÃ´óº£ÔË&quot;&gt;¼ÓÄÃ´óº£ÔË&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;div class=&quot;second_txt&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;second_div&quot;&gt;</span><br><span class="line">&lt;p class=&quot;t&quot;&gt;&lt;a data-scode=&quot;32023&quot; href=&quot;https://ph0101.cn.china.cn/supply/g4482928366_1.html&quot; title=&quot;°ÄÖÞº£ÔË&quot;&gt;°ÄÖÞº£ÔË&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;div class=&quot;second_txt&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;second_div&quot;&gt;</span><br><span class="line">&lt;p class=&quot;t&quot;&gt;&lt;a data-scode=&quot;32023&quot; href=&quot;https://ph0101.cn.china.cn/supply/g4482928550_1.html&quot; title=&quot;Ó¢ÃÀº£ÔË&quot;&gt;Ó¢ÃÀº£ÔË&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;div class=&quot;second_txt&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;aa&quot;&gt;&lt;a href=&quot;https://ph0101.cn.china.cn/supply/&quot; data-scode=&quot;32064&quot; title=&quot;²é¿´È«²¿·ÖÀà&quot;&gt;²é¿´È«²¿·ÖÀà &lt;font&gt;&amp;gt;&amp;gt;&lt;/font&gt;&lt;/a&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;https://ph0101.cn.china.cn/company-information.html&quot; data-scode=&quot;32026&quot; title=&quot;¹«Ë¾½éÉÜ&quot; class=&quot;a&quot;&gt;¹«Ë¾½éÉÜ&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;https://ph0101.cn.china.cn/certificates.html&quot; data-scode=&quot;32027&quot; title=&quot;¹«Ë¾×ÊÖÊ&quot; class=&quot;a&quot;&gt;¹«Ë¾×ÊÖÊ&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;https://ph0101.cn.china.cn/photo-album.html&quot; data-scode=&quot;32031&quot; title=&quot;¹«Ë¾Ïà²á&quot; class=&quot;a&quot;&gt;¹«Ë¾Ïà²á&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;https://ph0101.cn.china.cn/corparticle-leads.html&quot; data-scode=&quot;32030&quot; title=&quot;¹«Ë¾ÐÂÎÅ&quot; class=&quot;a&quot;&gt;¹«Ë¾ÐÂÎÅ&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;a data-scode=&quot;32068&quot; href=&quot;https://ph0101.cn.china.cn/video/&quot; title=&quot;¹«Ë¾ÊÓÆµ&quot; class=&quot;a&quot;&gt;¹«Ë¾ÊÓÆµ&lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;second_0&quot;&gt;&lt;a href=&quot;https://ph0101.cn.china.cn/contact-information/&quot; data-scode=&quot;32028&quot; title=&quot;ÁªÏµ·½Ê½&quot; class=&quot;a&quot;&gt;ÁªÏµ·½Ê½&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;Supplier_entry&quot;&gt;</span><br><span class="line">&lt;a href=&quot;https://www.china.cn/p4p/2373205.html&quot; target=&quot;_blank&quot; title=&quot;º£ÔË»õÎï&quot;&gt;&lt;div class=&quot;txt&quot;&gt;º£ÔË»õÎï&lt;span&gt;ÍÆ¼ö¹©Ó¦ÉÌ&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; id=&quot;corpId&quot; value=&quot;4396021956&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; id=&quot;enttype&quot; value=&quot;1&quot;/&gt;</span><br><span class="line">&lt;div class=&quot;content fl-clr&quot; data-cnrole=&quot;promote&quot;&gt;</span><br><span class="line">&lt;div class=&quot;con_0 pdtp0 fl-clr&quot;&gt;</span><br><span class="line">&lt;div class=&quot;place&quot; id=&quot;place&quot;&gt;</span><br><span class="line">&lt;div class=&quot;here fl-left&quot;&gt;&lt;span&gt;µ±Ç°Î»ÖÃ&amp;nbsp;&amp;gt;&lt;/span&gt;</span><br><span class="line">&lt;div&gt;&lt;a href=&quot;https://ph0101.cn.china.cn&quot; data-scode=&quot;30027&quot; title=&quot;¹ãÖÝÐÂ¼¯ÔË¹ú¼Ê»õÔËÓÐÏÞ¹«Ë¾&quot;&gt;¹«Ë¾Ê×Ò³&lt;/a&gt;&amp;gt;&lt;/div&gt;</span><br><span class="line">&lt;span data-scode=&quot;30027&quot; class=&quot;f-bold&quot;&gt;ÁªÏµ·½Ê½&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;online-cont fl-right&quot;&gt;</span><br><span class="line">&lt;div class=&quot;wechat-content&quot;&gt;</span><br><span class="line">&lt;a href=&quot;javascript:;&quot; class=&quot;wechat&quot; title=&quot;&quot;&gt;Î¢ÐÅÁªÏµ&lt;/a&gt;</span><br><span class="line">&lt;div class=&quot;qrcode-box&quot;&gt;</span><br><span class="line">&lt;img src=&quot;https://www.china.cn/common/qrcode/wechat/ph0101.png&quot; alt=&quot;&quot; width=&quot;107&quot; height=&quot;107&quot;&gt;</span><br><span class="line">&lt;span&gt;</span><br><span class="line">É¨Ò»É¨</span><br><span class="line">&lt;br/&gt;Ìí¼ÓÉÌ¼ÒÎ¢ÐÅ</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;a href=&quot;javascript:;&quot; onclick=&quot;chinacn.openQQ(&#x27;2630929254&#x27;,32034);&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;QQ½»Ì¸&quot; class=&quot;qq-cont&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;leave-words&quot; target=&quot;_blank&quot; href=&quot;https://ph0101.cn.china.cn/message/1.html&quot; rel=&quot;nofollow&quot; title=&quot;·¢ËÍÑ¯ÅÌ&quot; data-scode=&quot;32035&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;ltp_position fl-right remove_show&quot;&gt;</span><br><span class="line">&lt;span data-remove=&quot;remove_aa&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;hide&quot; data-timing=&quot;activity&quot; data-config=&#x27;&#123;&quot;start&quot;:&quot;2020-02-20 00:00:00&quot;,&quot;End&quot;:&quot;2020-03-20 00:00:00&quot;&#125;&#x27;&gt;</span><br><span class="line">&lt;a href=&quot;https://www.china.cn/design/1718.html?from=spy&quot; target=&quot;_blank&quot; data-scode=&quot;32069&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://himg.china.cn/img/upload/huodong/sj_spy.png&quot; width=&quot;305&quot; height=&quot;73&quot; /&gt;&lt;/a&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;a href=&quot;https://cn.china.cn/newxmt.html&quot; data-timing=&quot;insideIMG&quot; class=&quot;hide&quot; target=&quot;_blank&quot; data-scode=&quot;32069&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://himg.china.cn/img/mainsite/xmt_img/position.png&quot; width=&quot;305&quot; height=&quot;73&quot; /&gt;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;prtj_xa llfs_dt&quot;&gt;</span><br><span class="line">&lt;dl class=&quot;fl-clr&quot;&gt;</span><br><span class="line">&lt;dt&gt;</span><br><span class="line">&lt;div class=&quot;mapBox&quot; id=&quot;bdmap&quot; style=&quot;height: 403px;width: 712px&quot;&gt;</span><br><span class="line">&lt;span class=&quot;province&quot;&gt;¹ã¶«&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;city&quot;&gt;¹ãÖÝ&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;addr&quot;&gt;¹ã¶« ¹ãÖÝ °×ÔÆÇø °×ÔÆÇø¾ùºÌ½ÖÐÂÊ¯Â·147ºÅÐÂË¼Î¬´´ÒµÔ°A4¶°305·¿&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;corpname&quot;&gt;¹ãÖÝÐÂ¼¯ÔË¹ú¼Ê»õÔËÓÐÏÞ¹«Ë¾&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/dt&gt;</span><br><span class="line">&lt;dd class=&quot;rr&quot;&gt;&lt;span class=&quot;xqrr&quot;&gt;&lt;/span&gt;&lt;div&gt;&lt;span class=&quot;xqrm&quot;&gt;ÅíÏÈÉú &lt;font&gt;&lt;/font&gt;&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;rrdh secret&quot;&gt;&amp;#x10089;&amp;#x1008a;&amp;#x1008b; &amp;#x10089;&amp;#x1008c;&amp;#x1008c;&amp;#x1008c; &amp;#x1008a;&amp;#x1008d;&amp;#x1008d;&amp;#x1008e;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/dd&gt;</span><br><span class="line">&lt;dd class=&quot;rrgsm&quot;&gt;¹ãÖÝÐÂ¼¯ÔË¹ú¼Ê»õÔËÓÐÏÞ¹«Ë¾&lt;/dd&gt;</span><br><span class="line">&lt;dd class=&quot;secret&quot;&gt;µç »°&lt;span&gt;|&lt;/span&gt;&amp;#x1008a;&amp;#x10089;&amp;#x1008f;&amp;#x10090;&amp;#x1008b;&amp;#x10090;&amp;#x1008f;&amp;#x10091;&amp;#x1008b;&amp;#x1008a;&amp;#x1008c;&amp;#x1008c;&amp;#x1008d;&amp;#x1008a;&amp;#x10089;&amp;#x1008f;&amp;#x1008c;&amp;#x1008c;&amp;#x1008d;&amp;#x1008a;&amp;#x10089;&lt;/dd&gt;</span><br><span class="line">&lt;dd class=&quot;secret&quot;&gt;´« Õæ&lt;span&gt;|&lt;/span&gt;&amp;#x10090;&amp;#x1008b;&amp;#x10090;&amp;#x1008f;&amp;#x10091;&amp;#x1008b;&amp;#x1008a;&amp;#x1008c;&amp;#x1008c;&amp;#x1008d;&amp;#x1008a;&amp;#x10089;&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;ÓÊ ±à&lt;span&gt;|&lt;/span&gt;510000&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;µØ Ö·&lt;span&gt;|&lt;/span&gt;¹ã¶« ¹ãÖÝ °×ÔÆÇø °×ÔÆÇø¾ùºÌ½ÖÐÂÊ¯Â·147ºÅÐÂË¼Î¬´´ÒµÔ°A4¶°305·¿&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;¹«Ë¾Ö÷Ò³&lt;span&gt;|&lt;/span&gt;https://ph0101.cn.china.cn/&lt;/dd&gt;</span><br><span class="line">&lt;dd class=&quot;secret&quot;&gt;ÆäËüÁªÏµ·½Ê½&lt;span&gt;|&lt;/span&gt;&amp;#x10091;&amp;#x1008b;&amp;#x1008a;&amp;#x1008c;&amp;#x1008c;&amp;#x1008d;&amp;#x1008a;&amp;#x10089;&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;</span><br><span class="line">&lt;div class=&quot;wechat-content&quot;&gt;</span><br><span class="line">&lt;em&gt;Î¢ÐÅ&lt;/em&gt;</span><br><span class="line">&lt;span&gt;|&lt;/span&gt;</span><br><span class="line">&lt;div class=&quot;wx-qrcode&quot;&gt;</span><br><span class="line">&lt;img src=&quot;https://www.china.cn/common/qrcode/wechat/ph0101.png&quot; width=&quot;107&quot; height=&quot;107&quot;&gt;</span><br><span class="line">&lt;div class=&quot;wx-tips&quot;&gt;</span><br><span class="line">É¨Ò»É¨&amp;nbsp;Ìí¼ÓÉÌ¼ÒÎ¢ÐÅ</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/dd&gt; &lt;/dl&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div style=&quot;margin:0px auto 20px auto;&quot; align=&quot;center&quot; class=&quot;remove_show&quot;&gt;</span><br><span class="line">&lt;span data-remove=&quot;remove_r&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var cpro_id=&quot;u2766509&quot;;</span><br><span class="line">(window[&quot;cproStyleApi&quot;] = window[&quot;cproStyleApi&quot;] || &#123;&#125;)[cpro_id]=&#123;at:&quot;3&quot;,rsi0:&quot;1190&quot;,rsi1:&quot;130&quot;,pat:&quot;6&quot;,tn:&quot;baiduCustNativeAD&quot;,rss1:&quot;#FFFFFF&quot;,conBW:&quot;0&quot;,adp:&quot;1&quot;,ptt:&quot;0&quot;,titFF:&quot;%E5%BE%AE%E8%BD%AF%E9%9B%85%E9%BB%91&quot;,titFS:&quot;13&quot;,rss2:&quot;#000000&quot;,titSU:&quot;0&quot;,ptbg:&quot;90&quot;,piw:&quot;158&quot;,pih:&quot;124&quot;,ptp:&quot;1&quot;&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;//cpro.baidustatic.com/cpro/ui/c.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;company-intro ggjj&quot;&gt;</span><br><span class="line">&lt;div class=&quot;h2-bg section&quot;&gt;</span><br><span class="line">&lt;span class=&quot;sh1&quot;&gt;¹©Ó¦ÐÅÏ¢·ÖÀà&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;rig-bd fl-clr&quot;&gt;</span><br><span class="line">&lt;div class=&quot;mian-line&quot;&gt;</span><br><span class="line">&lt;div class=&quot;assists&quot;&gt;</span><br><span class="line">&lt;ul class=&quot;fl-clr&quot;&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;https://ph0101.cn.china.cn/supply/g4482928196_1.html&quot; data-scode=&quot;33401&quot; rel=&quot;nofollow&quot; title=&quot;¼ÓÄÃ´óº£ÔË&quot;&gt;¼ÓÄÃ´óº£ÔË&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;https://ph0101.cn.china.cn/supply/g4482928366_1.html&quot; data-scode=&quot;33401&quot; rel=&quot;nofollow&quot; title=&quot;°ÄÖÞº£ÔË&quot;&gt;°ÄÖÞº£ÔË&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;https://ph0101.cn.china.cn/supply/g4482928550_1.html&quot; data-scode=&quot;33401&quot; rel=&quot;nofollow&quot; title=&quot;Ó¢ÃÀº£ÔË&quot;&gt;Ó¢ÃÀº£ÔË&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;new-supply item&quot; id=&quot;new_sup&quot;&gt;</span><br><span class="line">&lt;div class=&quot;h2-bg section&quot;&gt;&lt;span class=&quot;sh1&quot;&gt;²úÆ·ÍÆ¼ö&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;rig-bd fl-clr&quot;&gt;</span><br><span class="line">&lt;ul class=&quot;pro-sup pro_rec fl-clr&quot;&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;dl&gt;</span><br><span class="line">&lt;dt&gt;</span><br><span class="line">&lt;a data-scode=&quot;33403&quot; href=&quot;https://www.china.cn/jiaotonggongjuxiangmhz/4402821012.html&quot; title=&quot;ÖÐ¹úµ½Ï¤Äáº£ÔË£¬º£ÔË¼Ò¾ß·þ×°µ½Ï¤Äá&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">&lt;img class=&quot;lazy-load&quot; src=&quot;https://himg.china.cn/img/mobile/common/loading/circle-loading.svg&quot; data-original=&quot;https://img1.fr-trading.com/1/5_76_1560182_563_1000.jpg&quot; height=&quot;160&quot; width=&quot;160&quot; alt=&quot;ÖÐ¹úµ½Ï¤Äáº£ÔË£¬º£ÔË¼Ò¾ß·þ×°µ½Ï¤Äá&quot;&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/dt&gt;</span><br><span class="line">&lt;dd class=&quot;price&quot;&gt;&lt;font class=&quot;ft12&quot;&gt;ÃæÒé&lt;/font&gt;&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;&lt;a data-scode=&quot;33403&quot; href=&quot;https://www.china.cn/jiaotonggongjuxiangmhz/4402821012.html&quot; title=&quot;ÖÐ¹úµ½Ï¤Äáº£ÔË£¬º£ÔË¼Ò¾ß·þ×°µ½Ï¤Äá&quot; target=&quot;_blank&quot;&gt;ÖÐ¹úµ½Ï¤Äáº£ÔË£¬º£ÔË¼Ò¾ß·þ×°µ½Ï¤Äá&lt;/a&gt;</span><br><span class="line">&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;dl&gt;</span><br><span class="line">&lt;dt&gt;</span><br><span class="line">&lt;a data-scode=&quot;33403&quot; href=&quot;https://www.china.cn/jiaotonggongjuxiangmhz/4402819996.html&quot; title=&quot;»ªÉÌ²Ù×÷ÖÐ¹úÉÌÒµ»õÎïµ½¼ÓÄÃ´óÅÉËÍµ½ÃÅµÄº£ÔË×Ü½áÁ÷³Ì&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">&lt;img class=&quot;lazy-load&quot; src=&quot;https://himg.china.cn/img/mobile/common/loading/circle-loading.svg&quot; data-original=&quot;https://img1.fr-trading.com/1/5_608_1598786_800_540.jpg&quot; height=&quot;160&quot; width=&quot;160&quot; alt=&quot;»ªÉÌ²Ù×÷ÖÐ¹úÉÌÒµ»õÎïµ½¼ÓÄÃ´óÅÉËÍµ½ÃÅµÄº£ÔË×Ü½áÁ÷³Ì&quot;&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/dt&gt;</span><br><span class="line">&lt;dd class=&quot;price&quot;&gt;&lt;font class=&quot;ft12&quot;&gt;ÃæÒé&lt;/font&gt;&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;&lt;a data-scode=&quot;33403&quot; href=&quot;https://www.china.cn/jiaotonggongjuxiangmhz/4402819996.html&quot; title=&quot;»ªÉÌ²Ù×÷ÖÐ¹úÉÌÒµ»õÎïµ½¼ÓÄÃ´óÅÉËÍµ½ÃÅµÄº£ÔË×Ü½áÁ÷³Ì&quot; target=&quot;_blank&quot;&gt;»ªÉÌ²Ù×÷ÖÐ¹úÉÌÒµ»õÎïµ½¼ÓÄÃ´óÅÉËÍµ½ÃÅµÄº£ÔË×Ü½áÁ÷³Ì&lt;/a&gt;</span><br><span class="line">&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;dl&gt;</span><br><span class="line">&lt;dt&gt;</span><br><span class="line">&lt;a data-scode=&quot;33403&quot; href=&quot;https://www.china.cn/jiaotonggongjuxiangmhz/4406153296.html&quot; title=&quot;¹ãÖÝ/ÉîÛÚµ½¼ÓÄÃ´óº£ÔË/Õû¹ñ/Æ´Ïä/Ë«Çå-¹ãÖÝµ½¼ÓÄÃ´óº£ÔË×¨Ïß&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">&lt;img class=&quot;lazy-load&quot; src=&quot;https://himg.china.cn/img/mobile/common/loading/circle-loading.svg&quot; data-original=&quot;https://img1.fr-trading.com/1/5_302_1598794_534_518.jpg&quot; height=&quot;160&quot; width=&quot;160&quot; alt=&quot;¹ãÖÝ/ÉîÛÚµ½¼ÓÄÃ´óº£ÔË/Õû¹ñ/Æ´Ïä/Ë«Çå-¹ãÖÝµ½¼ÓÄÃ´óº£ÔË×¨Ïß&quot;&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/dt&gt;</span><br><span class="line">&lt;dd class=&quot;price&quot;&gt;&lt;font class=&quot;ft12&quot;&gt;ÃæÒé&lt;/font&gt;&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;&lt;a data-scode=&quot;33403&quot; href=&quot;https://www.china.cn/jiaotonggongjuxiangmhz/4406153296.html&quot; title=&quot;¹ãÖÝ/ÉîÛÚµ½¼ÓÄÃ´óº£ÔË/Õû¹ñ/Æ´Ïä/Ë«Çå-¹ãÖÝµ½¼ÓÄÃ´óº£ÔË×¨Ïß&quot; target=&quot;_blank&quot;&gt;¹ãÖÝ/ÉîÛÚµ½¼ÓÄÃ´óº£ÔË/Õû¹ñ/Æ´Ïä/Ë«Çå-¹ãÖÝµ½¼ÓÄÃ´óº£ÔË×¨Ïß&lt;/a&gt;</span><br><span class="line">&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;dl&gt;</span><br><span class="line">&lt;dt&gt;</span><br><span class="line">&lt;a data-scode=&quot;33403&quot; href=&quot;https://www.china.cn/jiaotonggongjuxiangmhz/4406149800.html&quot; title=&quot;º£ÔËÒ»µã²»¶®,ÏëÔË¼Ò¾ß¹ýÈ¥°Ä´óÀûÑÇ¸ÃÔõÃ´×ö&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">&lt;img class=&quot;lazy-load&quot; src=&quot;https://himg.china.cn/img/mobile/common/loading/circle-loading.svg&quot; data-original=&quot;https://img1.fr-trading.com/1/5_302_1598794_534_518.jpg&quot; height=&quot;160&quot; width=&quot;160&quot; alt=&quot;º£ÔËÒ»µã²»¶®,ÏëÔË¼Ò¾ß¹ýÈ¥°Ä´óÀûÑÇ¸ÃÔõÃ´×ö&quot;&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/dt&gt;</span><br><span class="line">&lt;dd class=&quot;price&quot;&gt;&lt;font class=&quot;ft12&quot;&gt;ÃæÒé&lt;/font&gt;&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;&lt;a data-scode=&quot;33403&quot; href=&quot;https://www.china.cn/jiaotonggongjuxiangmhz/4406149800.html&quot; title=&quot;º£ÔËÒ»µã²»¶®,ÏëÔË¼Ò¾ß¹ýÈ¥°Ä´óÀûÑÇ¸ÃÔõÃ´×ö&quot; target=&quot;_blank&quot;&gt;º£ÔËÒ»µã²»¶®,ÏëÔË¼Ò¾ß¹ýÈ¥°Ä´óÀûÑÇ¸ÃÔõÃ´×ö&lt;/a&gt;</span><br><span class="line">&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;dl&gt;</span><br><span class="line">&lt;dt&gt;</span><br><span class="line">&lt;a data-scode=&quot;33403&quot; href=&quot;https://www.china.cn/jiaotonggongjuxiangmhz/4406149106.html&quot; title=&quot;´ÓÖÐ¹úº£ÔË¼Ò¾ßµ½¼ÓÄÃ´óÐèÒªÊ²Ã´Ìõ¼þ¹ØË°ÊÇ¶àÉÙ&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">&lt;img class=&quot;lazy-load&quot; src=&quot;https://himg.china.cn/img/mobile/common/loading/circle-loading.svg&quot; data-original=&quot;https://img1.fr-trading.com/1/5_316_1615898_1000_750.jpg&quot; height=&quot;160&quot; width=&quot;160&quot; alt=&quot;´ÓÖÐ¹úº£ÔË¼Ò¾ßµ½¼ÓÄÃ´óÐèÒªÊ²Ã´Ìõ¼þ¹ØË°ÊÇ¶àÉÙ&quot;&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/dt&gt;</span><br><span class="line">&lt;dd class=&quot;price&quot;&gt;&lt;font class=&quot;ft12&quot;&gt;ÃæÒé&lt;/font&gt;&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;&lt;a data-scode=&quot;33403&quot; href=&quot;https://www.china.cn/jiaotonggongjuxiangmhz/4406149106.html&quot; title=&quot;´ÓÖÐ¹úº£ÔË¼Ò¾ßµ½¼ÓÄÃ´óÐèÒªÊ²Ã´Ìõ¼þ¹ØË°ÊÇ¶àÉÙ&quot; target=&quot;_blank&quot;&gt;´ÓÖÐ¹úº£ÔË¼Ò¾ßµ½¼ÓÄÃ´óÐèÒªÊ²Ã´Ìõ¼þ¹ØË°ÊÇ¶àÉÙ&lt;/a&gt;</span><br><span class="line">&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;dl&gt;</span><br><span class="line">&lt;dt&gt;</span><br><span class="line">&lt;a data-scode=&quot;33403&quot; href=&quot;https://www.china.cn/jiaotonggongjuxiangmhz/4406148292.html&quot; title=&quot;¹ú¼Êº£ÔË¼Ò¾ßµ½°Ä´óÀûÑÇ,ÓÐÈËÖªµÀº£ÔË¸ÃÔõÃ´²Ù×÷Ã´?¼Û¸ñÄØ?&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">&lt;img class=&quot;lazy-load&quot; src=&quot;https://himg.china.cn/img/mobile/common/loading/circle-loading.svg&quot; data-original=&quot;https://img1.fr-trading.com/1/5_302_1598794_534_518.jpg&quot; height=&quot;160&quot; width=&quot;160&quot; alt=&quot;¹ú¼Êº£ÔË¼Ò¾ßµ½°Ä´óÀûÑÇ,ÓÐÈËÖªµÀº£ÔË¸ÃÔõÃ´²Ù×÷Ã´?¼Û¸ñÄØ?&quot;&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/dt&gt;</span><br><span class="line">&lt;dd class=&quot;price&quot;&gt;&lt;font class=&quot;ft12&quot;&gt;ÃæÒé&lt;/font&gt;&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;&lt;a data-scode=&quot;33403&quot; href=&quot;https://www.china.cn/jiaotonggongjuxiangmhz/4406148292.html&quot; title=&quot;¹ú¼Êº£ÔË¼Ò¾ßµ½°Ä´óÀûÑÇ,ÓÐÈËÖªµÀº£ÔË¸ÃÔõÃ´²Ù×÷Ã´?¼Û¸ñÄØ?&quot; target=&quot;_blank&quot;&gt;¹ú¼Êº£ÔË¼Ò¾ßµ½°Ä´óÀûÑÇ,ÓÐÈËÖªµÀº£ÔË¸ÃÔõÃ´²Ù×÷Ã´?¼Û¸ñÄØ?&lt;/a&gt;</span><br><span class="line">&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;company-intro ggjj remove_show&quot; style=&quot;width:1150px; margin:0 auto 20px;&quot;&gt;</span><br><span class="line">&lt;span data-remove=&quot;remove_r&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;div class=&quot;h2-bg section&quot;&gt;</span><br><span class="line">&lt;span class=&quot;sh1&quot;&gt;ÍÆ¼öÐÅÏ¢&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div style=&quot;margin:0px auto 20px auto;&quot; align=&quot;center&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var cpro_id=&quot;u2767536&quot;;</span><br><span class="line">(window[&quot;cproStyleApi&quot;] = window[&quot;cproStyleApi&quot;] || &#123;&#125;)[cpro_id]=&#123;at:&quot;3&quot;,rsi0:&quot;1150&quot;,rsi1:&quot;190&quot;,pat:&quot;6&quot;,tn:&quot;baiduCustNativeAD&quot;,rss1:&quot;#FFFFFF&quot;,conBW:&quot;0&quot;,adp:&quot;1&quot;,ptt:&quot;0&quot;,titFF:&quot;%E5%BE%AE%E8%BD%AF%E9%9B%85%E9%BB%91&quot;,titFS:&quot;14&quot;,rss2:&quot;#000000&quot;,titSU:&quot;0&quot;,ptbg:&quot;90&quot;,piw:&quot;168&quot;,pih:&quot;160&quot;,ptp:&quot;0&quot;&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;//cpro.baidustatic.com/cpro/ui/c.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;warn_wrap&quot;&gt;</span><br><span class="line">&lt;div class=&quot;warn fl-clr&quot;&gt;</span><br><span class="line">&lt;div class=&quot;warn-pic fl-left&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;fl-right&quot;&gt;</span><br><span class="line">&lt;dl class=&quot;ffly&quot;&gt;</span><br><span class="line">&lt;dt&gt;ÃâÔðÉùÃ÷£º&lt;/dt&gt;</span><br><span class="line">&lt;dd&gt;±¾Ò³ÃæËùÕ¹ÏÖµÄ¹«Ë¾ÐÅÏ¢¡¢²úÆ·ÐÅÏ¢¼°ÆäËûÏà¹ØÐÅÏ¢£¬¾ùÀ´Ô´ÓÚÆä¶ÔÓ¦µÄÉÌÆÌ£¬ÐÅÏ¢µÄÕæÊµÐÔ¡¢×¼È·ÐÔºÍºÏ·¨ÐÔÓÉ¸ÃÐÅÏ¢À´Ô´ÉÌÆÌµÄËùÊô·¢²¼ÕßÍêÈ«¸ºÔð£¬ÖÐ¹ú¹©Ó¦ÉÌ¶Ô´Ë²»³Ðµ£ÈÎºÎ±£Ö¤ÔðÈÎ¡£&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line">&lt;dl class=&quot;ffly&quot;&gt;</span><br><span class="line">&lt;dt&gt;ÓÑÇéÌáÐÑ£º&lt;/dt&gt;</span><br><span class="line">&lt;dd&gt;½¨ÒéÄúÔÚ¹ºÂòÏà¹Ø²úÆ·Ç°Îñ±ØÈ·ÈÏ¹©Ó¦ÉÌ×ÊÖÊ¼°²úÆ·ÖÊÁ¿£¬¹ýµÍµÄ¼Û¸ñÓÐ¿ÉÄÜÊÇÐé¼ÙÐÅÏ¢£¬Çë½÷É÷¶Ô´ý£¬½÷·ÀÆÛÕ©ÐÐÎª¡£&lt;/dd&gt;</span><br><span class="line">&lt;dt&gt;&amp;nbsp;&lt;/dt&gt;</span><br><span class="line">&lt;dd&gt;½¨ÒéÄúÔÚËÑË÷²úÆ·Ê±£¬ÓÅÏÈÑ¡Ôñ´øÓÐ&lt;a href=&quot;https://cn.china.cn/newxmt.html&quot; target=&quot;_blank&quot; title=&quot;ÖÐ¹ú¹©Ó¦ÉÌÓÅÖÊÉÌ¼Ò&quot; data-scode=&quot;60039&quot; class=&quot;ioc_xmt&quot; rel=&quot;nofollow&quot;&gt;&lt;/a&gt; »ò&lt;a href=&quot;https://cn.china.cn/tgt.html&quot; target=&quot;_blank&quot; title=&quot;ÖÐ¹ú¹©Ó¦ÉÌÓÅÖÊÉÌ¼Ò&quot; data-scode=&quot;60040&quot; class=&quot;ioc_tgt&quot; rel=&quot;nofollow&quot;&gt;&lt;/a&gt; ±êÊ¶µÄ»áÔ±£¬¸ÃÎªÖÐ¹ú¹©Ó¦ÉÌVIP»áÔ±±êÊ¶£¬ÐÅÓþ¶È¸ü¸ß¡£&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;ft&quot;&gt;</span><br><span class="line">&lt;div class=&quot;ft_0 ffly fl-clr&quot;&gt;</span><br><span class="line">&lt;div class=&quot;ft_lf&quot;&gt;</span><br><span class="line">&lt;a href=&quot;https://cn.china.cn&quot; class=&quot;logo&quot; data-scode=&quot;32066&quot; target=&quot;_blank&quot; title=&quot;ÖÐ¹ú¹©Ó¦ÉÌ&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://himg.china.cn/img/common/logo/200x44_white.png&quot; width=&quot;200&quot; height=&quot;44&quot; alt=&quot;ÖÐ¹ú¹©Ó¦ÉÌ&quot; /&gt;&lt;/a&gt;</span><br><span class="line">&lt;p&gt;Ö÷°ìµ¥Î»£ºÖÐ¹ú»¥ÁªÍøÐÂÎÅÖÐÐÄ&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;http://www.beian.miit.gov.cn/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;¾©ICP±¸18043816ºÅ&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;ft_rt&quot;&gt;</span><br><span class="line">&lt;div class=&quot;fl-clr&quot;&gt;</span><br><span class="line">&lt;dl class=&quot;fl-clr&quot;&gt;</span><br><span class="line">&lt;dt&gt;¹ÜÀíÔ±Èë¿Ú&lt;/dt&gt;</span><br><span class="line">&lt;dd&gt;&lt;a href=&quot;https://my.cn.china.cn/manage.php?op=AdminIndex&quot; data-scode=&quot;32047&quot; title=&quot;µêÆÌ¹ÜÀí&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;µêÆÌ¹ÜÀí&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;&lt;a href=&quot;https://www.china.cn/buy/purchase/&quot; data-scode=&quot;32048&quot; title=&quot;ÕÒÇó¹º&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;ÕÒÇó¹º&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line">&lt;dl class=&quot;fl-clr&quot;&gt;</span><br><span class="line">&lt;dt&gt;¹ØÓÚÎÒÃÇ&lt;/dt&gt;</span><br><span class="line">&lt;dd&gt;&lt;a href=&quot;https://ph0101.cn.china.cn/company-information.html&quot; data-scode=&quot;32049&quot; title=&quot;ÆóÒµ½éÉÜ&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;ÆóÒµ½éÉÜ&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;&lt;a href=&quot;https://ph0101.cn.china.cn/certificates.html&quot; data-scode=&quot;32050&quot; title=&quot;ÆóÒµ×ÊÖÊ&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;ÆóÒµ×ÊÖÊ&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line">&lt;dl class=&quot;fl-clr&quot;&gt;</span><br><span class="line">&lt;dt&gt;ÁªÏµÎÒÃÇ&lt;/dt&gt;</span><br><span class="line">&lt;dd&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;chinacn.openQQ(&#x27;2630929254&#x27;,32051);&quot; title=&quot;QQ½»Ì¸&quot; class=&quot;qjt&quot; rel=&quot;nofollow&quot;&gt;QQ½»Ì¸&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;&lt;a href=&quot;https://ph0101.cn.china.cn/message/1.html&quot; target=&quot;_blank&quot; data-scode=&quot;32052&quot; title=&quot;·¢ËÍÑ¯ÅÌ&quot; class=&quot;zxly&quot; rel=&quot;nofollow&quot;&gt;·¢ËÍÑ¯ÅÌ&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line">&lt;dl class=&quot;fl-clr&quot;&gt;</span><br><span class="line">&lt;dt&gt;Ö÷Óª²úÆ·&lt;/dt&gt;</span><br><span class="line">&lt;dd&gt;</span><br><span class="line">&lt;a href=&quot;https://www.china.cn/search/3kkzj.shtml&quot; data-scode=&quot;32067&quot; title=&quot;º£ÔË»õÎï&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;º£ÔË»õÎï&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;https://www.china.cn/search/4ptpoa.shtml&quot; data-scode=&quot;32067&quot; title=&quot;¿ÕÔË¿ìµÝ&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;¿ÕÔË¿ìµÝ&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;https://www.china.cn/search/35wd9.shtml&quot; data-scode=&quot;32067&quot; title=&quot;¼Ò¾ßÔËÊä&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;¼Ò¾ßÔËÊä&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;https://www.china.cn/search/3p2rrsy.shtml&quot; data-scode=&quot;32067&quot; title=&quot;ÈÕ³£Éú»îÓÃÆ·ÔËÊä&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;ÈÕ³£Éú»îÓÃÆ·ÔËÊä&lt;/a&gt;</span><br><span class="line">&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;ft_dz&quot;&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;span&gt;&lt;a href=&quot;https://www.china.cn/baiyun/ph0101.html&quot; target=&quot;_blank&quot; data-scode=&quot;32053&quot; title=&quot;¹ãÖÝÐÂ¼¯ÔË¹ú¼Ê»õÔËÓÐÏÞ¹«Ë¾&quot;&gt;¹ãÖÝÐÂ¼¯ÔË¹ú¼Ê»õÔËÓÐÏÞ¹«Ë¾&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;secret&quot;&gt;ÊÖ»ú£º&amp;#x10089;&amp;#x1008a;&amp;#x1008b;&amp;#x10089;&amp;#x1008c;&amp;#x1008c;&amp;#x1008c;&amp;#x1008a;&amp;#x1008d;&amp;#x1008d;&amp;#x1008e;&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;secret&quot;&gt;µç»°£º&amp;#x1008a;&amp;#x10089;&amp;#x1008f;&amp;#x10090;&amp;#x1008b;&amp;#x10090;&amp;#x1008f;&amp;#x10091;&amp;#x1008b;&amp;#x1008a;&amp;#x1008c;&amp;#x1008c;&amp;#x1008d;&amp;#x1008a;&amp;#x10089;&amp;#x1008f;&amp;#x1008c;&amp;#x1008c;&amp;#x1008d;&amp;#x1008a;&amp;#x10089;&lt;/span&gt;</span><br><span class="line">&lt;span&gt;µØÖ·£º¹ã¶« ¹ãÖÝ °×ÔÆÇø °×ÔÆÇø¾ùºÌ½ÖÐÂÊ¯Â·147ºÅÐÂË¼Î¬´´ÒµÔ°A4¶°305·¿&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;pin-online ffly fl-clr&quot;&gt; &lt;a href=&quot;javascript:;&quot; class=&quot;pin-bar&quot; style=&quot;display:none;&quot;&gt;ÆóÒµÔÚÏß&lt;span class=&quot;fdzs&quot;&gt;&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">&lt;div class=&quot;online-ct&quot;&gt;</span><br><span class="line">&lt;div class=&quot;tit&quot;&gt; &lt;a href=&quot;javascript:;&quot; class=&quot;&quot; id=&quot;onlineClose&quot;&gt;&lt;span class=&quot;fdzs&quot;&gt;&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">&lt;dl class=&quot;fdzx&quot;&gt;</span><br><span class="line">&lt;dt&gt;ÆóÒµÔÚÏß&lt;/dt&gt;</span><br><span class="line">&lt;dd&gt;&lt;span class=&quot;fdyy&quot;&gt; ÄúºÃ£¡ÐÂ¼¯ÔË¹ú¼Ê»¶Ó­Äú£¡&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">&lt;a href=&quot;javascript:;&quot; class=&quot;fdxs&quot;&gt;&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;on-bd&quot;&gt;</span><br><span class="line">&lt;div class=&quot;contact-mod&quot;&gt;</span><br><span class="line">&lt;span&gt;&lt;span&gt;Jay&lt;/span&gt;</span><br><span class="line">&lt;a onclick=&quot;chinacn.openQQ(2630929254, 32056)&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;µã»÷ÕâÀï¸øÎÒ·¢ÏûÏ¢&quot; class=&quot;qqjt&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;contact-mod dhsj&quot;&gt;</span><br><span class="line">&lt;span class=&quot;secret&quot;&gt;µç»°£º&amp;#x1008a;&amp;#x10089;&amp;#x1008f;&amp;#x10090;&amp;#x1008b;&amp;#x10090;&amp;#x1008f;&amp;#x10091;&amp;#x1008b;&amp;#x1008a;&amp;#x1008c;&amp;#x1008c;&amp;#x1008d;&amp;#x1008a;&amp;#x10089;&amp;#x1008f;&amp;#x1008c;&amp;#x1008c;&amp;#x1008d;&amp;#x1008a;&amp;#x10089;&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;secret&quot;&gt;ÊÖ»ú£º&amp;#x10089;&amp;#x1008a;&amp;#x1008b;&amp;#x10089;&amp;#x1008c;&amp;#x1008c;&amp;#x1008c;&amp;#x1008a;&amp;#x1008d;&amp;#x1008d;&amp;#x1008e;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;send-btn contact-mod&quot;&gt; &lt;a href=&quot;https://ph0101.cn.china.cn/message/1.html&quot; data-scode=&quot;32057&quot; title=&quot;·¢ËÍÑ¯ÅÌ&quot; rel=&quot;nofollow&quot;&gt;·¢ËÍÑ¯ÅÌ&lt;/a&gt; &lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;rt-qrcode&quot; data-role=&quot;qrcode&quot; data-config=&quot;&#123;</span><br><span class="line">    &#x27;url&#x27;:[&amp;quot;https:\/\/www.china.cn\/common\/qrcode\/corporations\/ph0101.png&amp;quot;,&amp;quot;https:\/\/www.china.cn\/common\/qrcode\/wechat\/ph0101.png&amp;quot;],</span><br><span class="line">    &#x27;width&#x27;:&#x27;120px&#x27;,&#x27;height&#x27;:&#x27;120px&#x27;,&#x27;padding&#x27;:&#x27;0px 25px&#x27;,</span><br><span class="line">    &#x27;txt&#x27;:[&amp;quot;\u624b\u673a\u626b\u63cf\u4e8c\u7ef4\u7801#\u4e00\u952e\u6253\u7535\u8bdd\u7ed9\u5546\u5bb6&amp;quot;,&amp;quot;\u626b\u4e00\u626b#\u6dfb\u52a0\u5546\u5bb6\u5fae\u4fe1&amp;quot;],&#x27;top&#x27;:&#x27;0px&#x27;,&#x27;border&#x27;:&#x27;none&#x27;,&#x27;loadThumb&#x27;:0,</span><br><span class="line">    &#x27;txtCss&#x27;:&#123;&#x27;pos&#x27;:&#x27;0&#x27;&#125;&#125;&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;modal fade&quot; id=&quot;collection&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-labelledby=&quot;myModalLabel&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">&lt;div class=&quot;modal-dialog&quot;&gt;</span><br><span class="line">&lt;div class=&quot;modal-content&quot;&gt;</span><br><span class="line">&lt;div class=&quot;modal-header&quot;&gt;</span><br><span class="line">&lt;p class=&quot;modal-title&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;a class=&quot;closer&quot; href=&quot;javascript:;&quot; data-dismiss=&quot;modal&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;modal-body&quot;&gt;</span><br><span class="line">&lt;div class=&quot;collection_tip fl-clr&quot;&gt;</span><br><span class="line">&lt;span class=&quot;icon icon-success-default&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">&lt;p class=&quot;title&quot;&gt;³É¹¦ÊÕ²Ø´Ë²úÆ·&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;outcome&quot;&gt;Äú¿ÉÒÔ&lt;a href=&quot;#&quot;&gt;²é¿´ÎÒµÄÊÕ²Ø¼Ð&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;collection_tip fl-clr&quot; style=&quot;display:none&quot;&gt;</span><br><span class="line">&lt;span class=&quot;icon icon-warning-default&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">&lt;p class=&quot;title&quot;&gt;ÊÕ²Ø¼ÐÖÐÒÑ´æÔÚ&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;outcome&quot;&gt;Äú¿ÉÒÔ&lt;a href=&quot;#&quot;&gt;²é¿´ÎÒµÄÊÕ²Ø¼Ð&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;modal-footer&quot;&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;btn btn-default btn-success&quot; data-dismiss=&quot;modal&quot;&gt;È·¶¨&lt;/a&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;collection_load&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; id=&quot;shop_name&quot; value=&quot;ph0101&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; id=&quot;shop_domain&quot; value=&quot;https://ph0101.cn.china.cn&quot;/&gt;</span><br><span class="line">&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://himg.china.cn/js/config.min.js&quot;&gt;&lt;/script&gt;&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://himg.china.cn/js/jquery-1.7.2.min.js&quot;&gt;&lt;/script&gt;&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://himg.china.cn/js/common/cerberus/master/cerberus.min.js?t=20190529&quot;&gt;&lt;/script&gt;&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://himg.china.cn/js/common/jquery.cookie/1.4.1/jquery.cookie.min.js&quot;&gt;&lt;/script&gt;&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://himg.china.cn/js/common/md5/1.2.1/md5.min.js&quot;&gt;&lt;/script&gt;&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://himg.china.cn/js/common/turkey/master/turkey.min.js&quot;&gt;&lt;/script&gt;&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://himg.china.cn/js/common/jquery.lazyload/1.9.3/jquery.lazyload.min.js?t=20190620&quot; data-img=&quot;lazyload&quot;&gt;&lt;/script&gt;&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://himg.china.cn/js/common/cn/2.0.5/cn.min.js?t=20190710&quot; data-cnjs=&quot;&#123;cid: &#x27;4396021956&#x27;,subdomain: &#x27;ph0101&#x27;&#125;&quot;&gt;&lt;/script&gt;&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://himg.china.cn/js/common/search/1.1.4/search.min.js&quot;&gt;&lt;/script&gt;&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://himg.china.cn/js/common/qrcode/master/qrcode.min.js?t=20190327&quot;&gt;&lt;/script&gt;&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://himg.china.cn/js/store_v2/shopnew-1.1.min.js?t=20190327&quot;&gt;&lt;/script&gt;&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://himg.china.cn/js/store_v2/page.min.js&quot;&gt;&lt;/script&gt;&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://himg.china.cn/js/www/collection2017.min.js?t=20190307&quot;&gt;&lt;/script&gt;&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://himg.china.cn/js/bootstrap-2.3.2.min.js&quot;&gt;&lt;/script&gt;&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://himg.china.cn/js/www/hot_show.min.js?t=201905091&quot;&gt;&lt;/script&gt;&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://himg.china.cn/js/common/autosubmit/autosubmit.min.js?t=20180709&quot;&gt;&lt;/script&gt;&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://himg.china.cn/js/common/Timing_tasks.min.js?t=20191017&quot;&gt;&lt;/script&gt; </span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//api.map.baidu.com/api?v=2.0&amp;ak=hfhMHMS70C3NwvkHhxrLyXcI&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; data-gisjs=&quot;&#123;domId: &#x27;bdmap&#x27;,companyName:&#x27;¹ãÖÝÐÂ¼¯ÔË¹ú¼Ê»õÔËÓÐÏÞ¹«Ë¾&#x27;, address: &#x27;¹ã¶« ¹ãÖÝ °×ÔÆÇø °×ÔÆÇø¾ùºÌ½ÖÐÂÊ¯Â·147ºÅÐÂË¼Î¬´´ÒµÔ°A4¶°305·¿&#x27;,longitude:0, latitude:0,province:&#x27;¹ã¶«&#x27;,city:&#x27;¹ãÖÝ&#x27;,copyright:&#x27;ÖÐ¹ú¹©Ó¦ÉÌ&#x27;&#125;&quot; src=&quot;https://himg.china.cn/js/gisjs-2.0.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var getId = getName(&#x27;gisjs-2.0&#x27;, &#x27;domId&#x27;, &#x27;data-gisjs&#x27;);</span><br><span class="line">    new chinacn.BaiduMap.MapBuild(getId);</span><br><span class="line">&lt;/script&gt; </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="代码样例以及注释说明"><a href="#代码样例以及注释说明" class="headerlink" title="代码样例以及注释说明"></a>代码样例以及注释说明</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line">import re</span><br><span class="line">import io</span><br><span class="line">from fontTools.ttLib import TTFont</span><br><span class="line">from lxml import etree</span><br><span class="line">url = &#x27;https://ph0101.cn.china.cn/contact-information/&#x27;</span><br><span class="line">res = requests.get(url).text</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"># 使用正则清洗出base64,并用group方法方便的从re.match对象中多个成立结果选取第一个。</span><br><span class="line">base64_str = re.search(&quot;base64,(.*?)&#x27;\)&quot;,res).group(1)</span><br><span class="line"># print(base64_str)</span><br><span class="line"></span><br><span class="line"># base64字符串解码成字节流</span><br><span class="line">b = base64.b64decode(base64_str)</span><br><span class="line"># print(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 通过fontTools库， 将字库文件转换成xml格式</span><br><span class="line">font = TTFont(io.BytesIO(b))</span><br><span class="line"># 保存成XML文件</span><br><span class="line">font.saveXML(&#x27;ts.xml&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获取GlyphOrder标签下所有name属性值</span><br><span class="line"># [&#x27;.notdef&#x27;, &#x27;uni10088&#x27;, &#x27;uni10089&#x27;, &#x27;uni1008a&#x27;, &#x27;uni1008b&#x27;, &#x27;uni1008c&#x27;, &#x27;uni1008d&#x27;, &#x27;uni1008e&#x27;, &#x27;uni1008f&#x27;, &#x27;uni10090&#x27;]</span><br><span class="line"># 将第一个不是数字的元素去掉</span><br><span class="line">bestcmap = font.getGlyphOrder()[1:]</span><br><span class="line">print(&quot;bestcmap:%s&quot; % bestcmap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 读取XML文件</span><br><span class="line">with open(&#x27;ts.xml&#x27;,&#x27;r&#x27;) as f:</span><br><span class="line">    t = f.read()</span><br><span class="line"># 替换那一步是为了使用原生xpath</span><br><span class="line"># xpath不支持带有编码文件的xml</span><br><span class="line">t = t.replace(&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#x27;,&#x27;&#x27;)</span><br><span class="line">root = etree.XML(t)</span><br><span class="line"># &lt; CharString</span><br><span class="line"># name = &quot;.notdef&quot; &gt;</span><br><span class="line"># 1024</span><br><span class="line"># endchar</span><br><span class="line"># &lt; / CharString &gt;</span><br><span class="line"># 去除第一没用的元素</span><br><span class="line">s = root.xpath(&#x27;//CharString&#x27;)[1:]</span><br><span class="line">print(&quot;s:%s&quot; % s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 整理字体映射关系</span><br><span class="line">dic = &#123;&#125;</span><br><span class="line">for i in s:</span><br><span class="line">    name = i.xpath(&#x27;./@name&#x27;)[0].replace(&#x27;uni&#x27;,&#x27;&#x27;)</span><br><span class="line">    # 取出&lt;CharString name=&quot;uniXXXXX&quot;&gt;标签里的文本，并把前面的左边号整理出来</span><br><span class="line">    temp = i.xpath(&#x27;./text()&#x27;)[0].split()</span><br><span class="line">    fon = temp[0] + temp[1] + temp[2]</span><br><span class="line">    dic[name] = fon</span><br><span class="line">print(&quot;dic:%s&quot; % dic)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用构建好的字体映射关系来处理请求到的网页结果</span><br><span class="line">r = etree.HTML(res)</span><br><span class="line"># 获取电话号码</span><br><span class="line">tel = r.xpath(&#x27;string(//span[@class=&quot;rrdh secret&quot;])&#x27;)</span><br><span class="line"># 获取到号码框框</span><br><span class="line">print(&quot;tel:%s&quot; % tel)</span><br><span class="line"># 可以发现指定的编码格式是没用的</span><br><span class="line">c = tel.encode(&#x27;utf-8&#x27;)</span><br><span class="line">print(&quot;c:%s&quot; % c)</span><br><span class="line"></span><br><span class="line"># 查看网页，通过框框对号码位置，整理出来以下规律</span><br><span class="line">test = &#123;</span><br><span class="line">    &#x27;12663173&#x27;: &#x27;0&#x27;,</span><br><span class="line">    &#x27;126983&#x27;:&#x27;1&#x27;,</span><br><span class="line">    &#x27;12610656&#x27;: &#x27;2&#x27;,</span><br><span class="line">    &#x27;14012694&#x27;: &#x27;3&#x27;,</span><br><span class="line">    &#x27;1269460&#x27;: &#x27;4&#x27;,</span><br><span class="line">    &#x27;12698156&#x27;: &#x27;5&#x27;,</span><br><span class="line">    &#x27;126111181&#x27;: &#x27;6&#x27;,</span><br><span class="line">    &#x27;12611177&#x27;: &#x27;7&#x27;,</span><br><span class="line">    &#x27;1265483&#x27;: &#x27;8&#x27;,</span><br><span class="line">    &#x27;12615-1&#x27;: &#x27;9&#x27;</span><br><span class="line">&#125;</span><br><span class="line">dc = &#123;&#125;</span><br><span class="line">for ka,va in test.items():</span><br><span class="line">    for ka1, va1 in dic.items():</span><br><span class="line">        print(ka,va,ka1, va1)</span><br><span class="line">        if ka == va1:</span><br><span class="line">            # &amp;#x100c4;</span><br><span class="line">            ka1 = f&#x27;&amp;#x&#123;ka1&#125;;&#x27;</span><br><span class="line">            print(ka1)</span><br><span class="line">            dc[ka1] = va</span><br><span class="line">for k,v in dc.items():</span><br><span class="line">    print(k,v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 循环处理后的字体映射表</span><br><span class="line">response_ = res</span><br><span class="line">for k, v in dc.items():</span><br><span class="line">    # 拼接页面中完整的乱码字符</span><br><span class="line">    uni_font = k</span><br><span class="line">    # 判断乱码字符是否存在抓取下来的网页内容中</span><br><span class="line">    if uni_font in response_:</span><br><span class="line">        # 如果存在，将其替换为解码后的汉字</span><br><span class="line">        response_ = response_.replace(uni_font, dc[k])</span><br><span class="line">r = etree.HTML(response_)</span><br><span class="line">tel = r.xpath(&#x27;string(//span[@class=&quot;rrdh secret&quot;])&#x27;)</span><br><span class="line">print(tel)</span><br></pre></td></tr></table></figure><h1 id="结果对比"><a href="#结果对比" class="headerlink" title="结果对比"></a>结果对比</h1><p>网页</p><p><img src= "/customize/img/loading.gif" data-lazy-src="29b5573d.png"></p><p>运行结果</p><p><img src= "/customize/img/loading.gif" data-lazy-src="d033241c.png"></p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 反爬案例 </tag>
            
            <tag> 字体反爬 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：正则表达式groups函数访问匹配串</title>
      <link href="article/20382/"/>
      <url>article/20382/</url>
      
        <content type="html"><![CDATA[<p>Python 正则表达式RE模块里面的group方法用着挺方便的，<br>在这里写博客做个简单的记录，方便日后查阅</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: JetBrains Pycharm 2019.2.4 x64  </span><br><span class="line">语言: Python 3.7.4</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>出于学习的目的，去尝试在中国供应商网练习字体反爬，过程中看到group的用法。</p><h1 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://ph0101.cn.china.cn/contact-information/&#x27;</span></span><br><span class="line">res = requests.get(url).text</span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># 使用正则清洗出base64,并用group方法方便的从re.match对象中多个成立结果选取第一个。</span></span><br><span class="line">base64_group = re.search(<span class="string">&quot;base64,(.*?)&#x27;\)&quot;</span>,res).group(<span class="number">1</span>)</span><br><span class="line">base64_groups = re.search(<span class="string">&quot;base64,(.*?)&#x27;\)&quot;</span>,res).groups()</span><br><span class="line">base64_demo = re.search(<span class="string">&quot;base64,(.*?)&#x27;\)&quot;</span>,res)</span><br><span class="line">print(<span class="string">&quot;base64_group %s&quot;</span>%base64_group)</span><br><span class="line">print(<span class="string">&quot;base64_groups %s&quot;</span>%base64_groups)</span><br><span class="line">print(<span class="string">&quot;base64_demo %s&quot;</span>%base64_demo)</span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src= "/customize/img/loading.gif" data-lazy-src="446c5720.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>前面通过括号（）的方式来匹配正则表达式，会发现有多个成立的，<br>如果把这些匹配的结果放到一个元组里，怎么样访问这些匹配的结果呢？<br>在这里使用groups()函数来访问，<br>在这里使用group(索引数)函数来访问多个匹配结果中的某一个，<br>直接打印re.search结果可以看到得到是个re.match对象。  </p><p>简而言之就是方便从re.match对象取出匹配值使用的，与findall不同。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> RE </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：Vim复制一整行,复制多行</title>
      <link href="article/58379/"/>
      <url>article/58379/</url>
      
        <content type="html"><![CDATA[<p>一个袖珍博文，记录一下Vim复制功能的使用。</p><span id="more"></span><p>首先报上一波，我开发的运行环境</p><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04LTS</span><br><span class="line">虚拟机： VMware WorkStation15</span><br></pre></td></tr></table></figure><hr><h1 id="单行复制"><a href="#单行复制" class="headerlink" title="单行复制"></a>单行复制</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在命令模式下，将光标移动到将要复制的行处，按“yy”进行复制；</span><br></pre></td></tr></table></figure><h1 id="多行复制"><a href="#多行复制" class="headerlink" title="多行复制"></a>多行复制</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在命令模式下，将光标移动到将要复制的首行处，按“nyy”复制n行；其中n为1、2、3……</span><br></pre></td></tr></table></figure><h1 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在命令模式下，将光标移动到将要粘贴的行处，按“p”进行粘贴</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - Vim - Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：解除谷歌浏览器GoogleChrome跨域请求限制</title>
      <link href="article/21156/"/>
      <url>article/21156/</url>
      
        <content type="html"><![CDATA[<p>在使用axios组件间向接口发送请求获取数据时，出现了跨域保护，在这里记录一个解决办法。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： win10</span><br><span class="line">IDE: JetBrains Pycharm 2018.2.4 x64  </span><br><span class="line">Python: 3.6.2</span><br><span class="line">Django: 2.0.3</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在本地使用aixos开发页面，向 <a target="_blank" rel="noopener" href="https://api.bilibili.com/x/web-interface/view?aid=98580000">bilibili api</a>发送请求获取数据。<br>用来做一个axios的演示程序，但是出现了问题。<br>在谷歌浏览器 console 里提示报错，<br>“Acces-Control-Allow-Origin” header is present on the requested resource<br><img src= "/customize/img/loading.gif" data-lazy-src="e47991ba.png"><br>如果排除不是服务器接口方面的原因，那么可能是谷歌浏览器自身的对跨域请求做了限制，需要修改一下谷歌浏览器的配置。  </p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><ol><li><p>在C盘根目录新建文件夹“MyChromeDevUserData”<br> <img src= "/customize/img/loading.gif" data-lazy-src="fb28537e.png"></p></li><li><p>复制一个谷歌浏览器的快捷方式出来并改名成”Google Chrome(跨域设置)”<br> <img src= "/customize/img/loading.gif" data-lazy-src="316ee4bb.png"></p></li></ol><ol start="3"><li>右键打开”Google Chrome(跨域设置)”快捷方式的属性，在末尾添加上参数<br> <img src= "/customize/img/loading.gif" data-lazy-src="61a1dd82.png">   <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--args --disable-web-security --user-data-dir=C:\MyChromeDevUserData</span><br></pre></td></tr></table></figure></li><li>使用这个快捷方式来打开谷歌浏览器，并在上面运行写好axios的前端代码，就能获取到非服务器限制的跨域数据了。  </li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>之前一直不知道，除了服务器后端限制了跨域请求外，现在的谷歌浏览器其实自身也有跨域请求保护。  </p><p>在确保服务器后端没有跨域请求限制的情况下，使用这种办法就能实现前端访问跨区域请求数据了。  </p><p>但是，最后要说的是，这个方法只能在开发阶段作为一种调试方法。  </p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> 疑难杂症 </tag>
            
            <tag> GoogleChrome </tag>
            
            <tag> 小技能 </tag>
            
            <tag> aixos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔：个人总结</title>
      <link href="article/57145/"/>
      <url>article/57145/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔心得 </tag>
            
            <tag> 新冠肺炎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：Cloudflare-Workers浅识</title>
      <link href="article/14497/"/>
      <url>article/14497/</url>
      
        <content type="html"><![CDATA[<p>Workers 真的是新世界的大门，我很遗憾居然在其发布快一年以后才知道它的存在。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10</span><br><span class="line">IDE: webStorm2019.3.3</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在搭建google drive网页挂载程序的时候，我初次尝试Cloudflare的Workers功能。<br>打破了我以前比较固有的开发方式，workers无疑是前后端web开发的福音。  </p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>workers严格来说既不算前端，也不算后端，更像是中间人角色。  </p><p>对前端开发而言，可以做到无后端托管，或者接口转发，非常方便。  </p><p>对后端开发而言，workers作为中间件可以起到解析加速作用，<br>还能在不占用后端资源的情况，轻松的进行缓存，<br>作为分布式后端服务器的路由或者中间处理都可以胜任，<br>节约大量的后端资源，节省下来的服务器算力又可以服务更多用户。</p><h1 id="创建workers"><a href="#创建workers" class="headerlink" title="创建workers"></a>创建workers</h1><ol><li><p>登录 <a href="dash.cloudflare.com">cloudflare</a>，进入Workers</p><p> <img src= "/customize/img/loading.gif" data-lazy-src="8baa5e25.png"></p></li><li><p>创建Worker</p><p> <img src= "/customize/img/loading.gif" data-lazy-src="326a0fc9.png"></p><p> <img src= "/customize/img/loading.gif" data-lazy-src="13c2f216.png"></p><h1 id="Worker-开发"><a href="#Worker-开发" class="headerlink" title="Worker 开发"></a>Worker 开发</h1></li></ol><p>1.官方文档提供了很多文档可以作为参考<a target="_blank" rel="noopener" href="https://developers.cloudflare.com/workers/templates/">官方模板</a></p><ol start="2"><li>worker JS脚本 浅析<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// addEventListener中注册，然后开始你表演</span><br><span class="line">async function handleRequest(request) &#123;</span><br><span class="line">  const init = &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      &#x27;content-type&#x27;: type,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  const responses = await Promise.all([fetch(url1, init), fetch(url2, init)])</span><br><span class="line">  const results = await Promise.all([gatherResponse(responses[0]), gatherResponse(responses[1])])</span><br><span class="line">  console.log(&quot;我是控制台打印信息！&quot;)</span><br><span class="line">  return new Response(results, init)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 分配给Worker的HTTP请求的事件类型（即，Object如event中传递的addEventListener(&#x27;fetch&#x27;, event =&gt; &#123;…&#125;)）。</span><br><span class="line"> * 如果注册了多个事件侦听器，则在不调用事件处理程序respondWith()时，运行时会将事件传递给下一个已注册的事件处理程序。</span><br><span class="line"> */</span><br><span class="line">addEventListener(&#x27;fetch&#x27;, event =&gt; &#123;</span><br><span class="line">  return event.respondWith(handleRequest(event.request))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * gatherResponse等待并以字符串形式返回响应主体。</span><br><span class="line"> * 在异步函数中使用await gatherResponse（..）获取响应主体</span><br><span class="line"> * @param &#123;Response&#125; response</span><br><span class="line"> */</span><br><span class="line">async function gatherResponse(response) &#123;</span><br><span class="line">  const &#123; headers &#125; = response</span><br><span class="line">  const contentType = headers.get(&#x27;content-type&#x27;)</span><br><span class="line">  if (contentType.includes(&#x27;application/json&#x27;)) &#123;</span><br><span class="line">    return await response.json()</span><br><span class="line">  &#125; else if (contentType.includes(&#x27;application/text&#x27;)) &#123;</span><br><span class="line">    return await response.text()</span><br><span class="line">  &#125; else if (contentType.includes(&#x27;text/html&#x27;)) &#123;</span><br><span class="line">    return await response.text()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return await response.text()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 这里就放一些全局变量</span><br><span class="line"> */</span><br><span class="line">const someHost = &#x27;https://workers-tooling.cf/demos&#x27;</span><br><span class="line">const url1 = someHost + &#x27;/requests/json&#x27;</span><br><span class="line">const url2 = someHost + &#x27;/requests/json&#x27;</span><br><span class="line">const type = &#x27;application/json;charset=UTF-8&#x27;</span><br></pre></td></tr></table></figure></li></ol><p><img src= "/customize/img/loading.gif" data-lazy-src="8091ea1b.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我头上出现了很多问号，不过也在逐渐理解wokrers这件东西了，归根结底还是自己在JS上造诣不够深入。</p><p>相信前端专门搓JS的人，应该会更容易接受！</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> Cloudflare </tag>
            
            <tag> Workers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：list去重且保持原顺序不变的方法</title>
      <link href="article/10334/"/>
      <url>article/10334/</url>
      
        <content type="html"><![CDATA[<p>平时做数据处理是不是就会用到，干脆就记录一下。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: JetBrains Pycharm 2019.2.4 x64  </span><br><span class="line">语言: Python 3.7.4</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>python 去重一顿操作猛如虎，set list 扒拉下去，就去重了，但是顺序就打乱了。如果对顺序没有需要的话，这样确实没有什么所谓。<br>但是如果需要保留顺序的话，就需要一点小小的改变。  </p><h1 id="code-amp-amp-demo"><a href="#code-amp-amp-demo" class="headerlink" title="code &amp;&amp; demo"></a>code &amp;&amp; demo</h1><ol><li><p>list去重,顺序乱掉</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># normal 写法</span><br><span class="line">l1 = [&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;a&#x27;,&#x27;a&#x27;]</span><br><span class="line">l2 = list(set(l1))</span><br><span class="line">print(l2)</span><br><span class="line"></span><br><span class="line"># plus 写法</span><br><span class="line">l1 = [&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;a&#x27;,&#x27;a&#x27;]</span><br><span class="line">l2 = &#123;&#125;.fromkeys(l1).keys()</span><br></pre></td></tr></table></figure></li><li><p>去重后还是原list顺序</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># normal 写法</span><br><span class="line">l1 = [&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;a&#x27;,&#x27;a&#x27;]</span><br><span class="line">l2 = list(set(l1))</span><br><span class="line">l2.sort(key=l1.index)</span><br><span class="line"></span><br><span class="line"># plus 写法</span><br><span class="line">l1 = [&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;a&#x27;,&#x27;a&#x27;]</span><br><span class="line">l2 = sorted(set(l1),key=l1.index)</span><br></pre></td></tr></table></figure></li><li><p>写循环代码实现</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># normal 写法</span><br><span class="line">l1 = [&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;a&#x27;,&#x27;a&#x27;]</span><br><span class="line">l2 = []</span><br><span class="line">for i in l1:</span><br><span class="line">    if not i in l2:</span><br><span class="line">        l2.append(i)</span><br><span class="line">        </span><br><span class="line"># plus 写法</span><br><span class="line"></span><br><span class="line">l1 = [&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;a&#x27;,&#x27;a&#x27;]</span><br><span class="line">l2 = []</span><br><span class="line">[l2.append(i) for i in l1 if not i in l2]</span><br></pre></td></tr></table></figure></li><li><p>写while循环代码实现</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">L = [3, 1, 2, 1, 3, 4]</span><br><span class="line">T = L[:]</span><br><span class="line">for i in L:</span><br><span class="line">    while T.count(i) &gt; 1:</span><br><span class="line">        del T[T.index(i)]</span><br><span class="line">T.sort(key=L.index)</span><br></pre></td></tr></table></figure></li><li><p>lambda写法</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [3, 1, 2, 1, 3, 4]</span><br><span class="line">func = lambda L,i: L if i in L else L + [i]</span><br><span class="line">T = reduce(func, [[], ] + L)</span><br></pre></td></tr></table></figure><p>备注：</p></li></ol><ul><li>ambda L,i: L if i in L else L + [i]                   # 如果元素在列表中，那么返回列表本身，不在的话L + [i]</li><li>[[], ] + L                                            # 等价于 [[], L]，方便后面计算</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果纠结空间复杂度的,用python干啥？<br>先谈能不能完成，再谈优化吧。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：bilibili视频BV号转AV号的尝试和记录</title>
      <link href="article/63210/"/>
      <url>article/63210/</url>
      
        <content type="html"><![CDATA[<p>就在昨天，2020年3月23日。可爱的B站宣布将使用BV这一新的视频编号来代替原本的AV编号..</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统： win10  </span><br><span class="line">Python: 3.7.4</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>2020年3月23日。可爱的B站宣布将使用BV这一新的视频编号来代替原本的AV编号..<br>据描述是为了保护B站视频UP的合法权益，<br>毕竟你懂的，现在那些用爬虫技术将B站视频批量盗取到抖音之类的地方套现的现象越来越严重。  </p><h1 id="算法推导"><a href="#算法推导" class="headerlink" title="算法推导"></a>算法推导</h1><p>在此感谢网络上各位大佬的辛苦探究。<br><a target="_blank" rel="noopener" href="https://www.zhihu.com/question/381784377">如何看待 2020 年 3 月 23 日哔哩哔哩将稿件的「av 号」变更为「BV 号」？</a><br>我有点担心，这帖子会不会有一天直接没了。我转载在这里。<br>公式1：<img src= "/customize/img/loading.gif" data-lazy-src="equation.svg" alt="公式1"> </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">    互相转换脚本，如果算法没猜错，可以保证在 av 号  时正确，同时应该在  时也是正确的。此代码以 WTFPL 开源。</span><br><span class="line">    </span><br><span class="line">    UPD：之前的代码中，所有数位都被用到是乱凑的，实际上并不需要，目前只要低 6 位就足够了。</span><br><span class="line">（更大的 av 号需要 64 位整数存储，但是 b 站现在使用的应该还是 32 位整数，所以应该还要很久）</span><br><span class="line"></span><br><span class="line">    发现的方法：</span><br><span class="line">    首先从各种渠道的信息来看，应该是 base58 编码的。设 x 是一个钦定的 av 号，查询 ![公式1](equation.svg)  这些 av 号对应的 bv 号，发现 bv 号的第 12、11、4、9、5 位分别会变化。</span><br><span class="line">所以猜测这些是 58 进制下的相应位。</span><br><span class="line">但是直接 base58 是不行的，所以猜测异或了一个大数，并且 base58 的字符表可能打乱了。经过实验，bv 号最低位相同的数，av 号的奇偶性相同，这一定程度上印证了之前的猜想。</span><br><span class="line"></span><br><span class="line">    接下来找了一些 av 号 x，满足 x 和 x+1 对应 bv 号的第 11 位不同。设异或的数为 X，那么</span><br><span class="line">    </span><br><span class="line">    （   表示异或）。</span><br><span class="line"></span><br><span class="line">    由于 av 号（除了最新的少量视频）最多只有 27 bits，所以可以设  。</span><br><span class="line">然后可以发现  只和  和  有关，那么可以枚举这两个值（一共  种情况）然后使用上面的式子检查，就能得到若干可能的  和  。</span><br><span class="line"></span><br><span class="line">这里我得到的可能值如下：（左边是  ，右边是  ）</span><br><span class="line"></span><br><span class="line">22 90983642</span><br><span class="line">22 90983643</span><br><span class="line">50 43234084</span><br><span class="line">50 43234085</span><br><span class="line"></span><br><span class="line">有奇有偶是因为异或 1 之后也能找到轮换表。</span><br><span class="line">而  则使得模 58 的余数刚好变成  减它。</span><br><span class="line"></span><br><span class="line">我取了 b=43234084，然后处理最低位，可以得到一个字符表，即 fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF。</span><br><span class="line">对于更高位，实际上还需要知道  ，这些值也可以 枚举 58 次得到，最后我得到的值是  。</span><br><span class="line">这时我发现，每一位的字符表是相同的（实际上只对 b=43234084 是这样的），然后再微调一下参数（上面代码中的两个 magic number 就相当于这里的  ），最后处理了一下  的情况就得到了这份代码。</span><br><span class="line"></span><br><span class="line">作者：mcfx</span><br><span class="line">链接：https://www.zhihu.com/question/381784377/answer/1099438784</span><br><span class="line">来源：知乎</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><p>图片留档：<br><img src= "/customize/img/loading.gif" data-lazy-src="%E7%9F%A5%E4%B9%8E.png" alt="知乎BV算法推导"> </p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><ol><li><p>python3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">table=<span class="string">&#x27;fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF&#x27;</span></span><br><span class="line">tr=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">58</span>):</span><br><span class="line">tr[table[i]]=i</span><br><span class="line">s=[<span class="number">11</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br><span class="line">xor=<span class="number">177451812</span></span><br><span class="line">add=<span class="number">8728348608</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span>(<span class="params">x</span>):</span></span><br><span class="line">r=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">r+=tr[x[s[i]]]*<span class="number">58</span>**i</span><br><span class="line"><span class="keyword">return</span> (r-add)^xor</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span>(<span class="params">x</span>):</span></span><br><span class="line">x=(x^xor)+add</span><br><span class="line">r=<span class="built_in">list</span>(<span class="string">&#x27;BV1  4 1 7  &#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">r[s[i]]=table[x//<span class="number">58</span>**i%<span class="number">58</span>]</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(r)</span><br><span class="line"></span><br><span class="line">print(dec(<span class="string">&#x27;BV17x411w7KC&#x27;</span>))</span><br><span class="line">print(dec(<span class="string">&#x27;BV1Q541167Qg&#x27;</span>))</span><br><span class="line">print(dec(<span class="string">&#x27;BV1mK4y1C7Bz&#x27;</span>))</span><br><span class="line">print(enc(<span class="number">170001</span>))</span><br><span class="line">print(enc(<span class="number">455017605</span>))</span><br><span class="line">print(enc(<span class="number">882584971</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 作者：mcfx</span></span><br><span class="line"><span class="comment"># 链接：https://www.zhihu.com/question/381784377/answer/1099438784</span></span><br><span class="line"><span class="comment"># 来源：知乎</span></span><br><span class="line"><span class="comment"># 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br></pre></td></tr></table></figure></li><li><p>PHP<br>by esterTion<br><img src= "/customize/img/loading.gif" data-lazy-src="php.jpg" alt="PHP BV算法 实现"> </p></li><li><p>Java<br>by Feel_Sad<br><img src= "/customize/img/loading.gif" data-lazy-src="java.png" alt="Java BV算法 实现"> </p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然我没有做过B站的采集，<br>但是，身为爬虫工程师，我是心疼的，这意味着B站采集的门槛抬高了。<br>哈哈哈，也没有关系，习惯了。说得我采集那几大电商巨头它们的商品ID是顺号的一样，采集都靠搜索挖掘。<br>出于一个三年经验的爬虫开发者，我认为bilibili是不可能会去把已有数据的所有视频AV编号直接改成BV号的，也更不可能删除。<br>对数据库大刀阔斧的修改会有难以计量的后果和动荡，很少有企业会这么干。  </p><blockquote><p>那么，如果是我，我会怎么实现B站这个AV to BV的需求呢？  </p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">答：对站上已有的庞大视频AV编号做一层加密封装，一个BV编号映射一个AV编号的方式。  </span><br><span class="line">之后对待审和以后上传B站的视频直接使用BV号入库的方式。  </span><br><span class="line">我不确认以后的视频AV号是否还会在B站数据库中保留，但是很大的可能B站对外AV号的接口会逐渐关闭。</span><br></pre></td></tr></table></figure><p>当然，我更希望我的推断是一场虚构推理。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> bilibili </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：webpack的安装实践</title>
      <link href="article/30902/"/>
      <url>article/30902/</url>
      
        <content type="html"><![CDATA[<p>webpack 是一个前端模块化打包工具。可以进行方便的前端模块化打包操作。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10</span><br><span class="line">IDE: webStorm2019.3.3</span><br></pre></td></tr></table></figure><hr><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Webpack 是一個開源的前端打包工具。<br>Webpack 提供了前端開發缺乏的模組化開發方式，將各種靜態資源視為模組，並從它生成最佳化過的程式碼。<br>Webpack可以從終端、或是更改 webpack.config.js 來設定各項功能。 要使用 Webpack 前須先安裝 Node.js。  </p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="依赖检查"><a href="#依赖检查" class="headerlink" title="依赖检查"></a>依赖检查</h2><blockquote><p>webpack 需要npm软件包管理工具，该管理工具的使用需要安装Node.js。</p></blockquote><p>查看自己的node版本  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>如果安装了nodejs,便会有返回的版本号。如果没有返回版本号，去百度搜一下如何安装nodejs,不赘述了。</p><h2 id="全局安装webpack"><a href="#全局安装webpack" class="headerlink" title="全局安装webpack"></a>全局安装webpack</h2><p>查看自己的wenpack版本  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --version</span><br></pre></td></tr></table></figure><blockquote><p>‘webpack’ 不是内部或外部命令，也不是可运行的程序或批处理文件。</p></blockquote><p>说明没有安装，输入安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure><p>博主这一安装，哇，喷涌出大量npm警告。赶紧查了一下webpack –version 看看安装成功了没。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">One CLI for webpack must be installed. These are recommended choices, delivered as separate packages:</span><br><span class="line"> - webpack-cli (https://github.com/webpack/webpack-cli)</span><br><span class="line">   The original webpack full-featured CLI.</span><br><span class="line">We will use &quot;npm&quot; to install the CLI via &quot;npm install -D&quot;.</span><br><span class="line">Do you want to install &#x27;webpack-cli&#x27; (yes/no): yes</span><br></pre></td></tr></table></figure><p>行吧，那就yes一下。安装成功。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我还专门问了一个经常写前端的老同学.<br>他说如果为了学Vue,vueCLI这东西自带了封装工具.<br>WP工具除非是大型web项目，基本用不上.</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疑难杂症：使用指定pip源出现 not a trusted or secure host 的解决方案</title>
      <link href="article/30251/"/>
      <url>article/30251/</url>
      
        <content type="html"><![CDATA[<p>pip下载包太慢了，想想还是指定个国内pip源加速。<br>配置完以后输入pip list出现了一行警告~emmmmmmmmmmmmmmmmmmm  </p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Ubuntu18.04LTS  </span><br><span class="line">IDE: JetBrains Pycharm 2019.2.4 x64  </span><br><span class="line">语言: Python 3.6.9</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>高版本pip,指定pip国内源加速，使用pip list 命令时弹出警告</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The repository located at mirrors.aliyun.com is not a trusted or secure host and is being ignored. </span><br><span class="line">If this repository is available via HTTPS we recommend you use HTTPS instead, </span><br><span class="line">otherwise you may silence this warning and allow it anyway with &#x27;--trusted-host mirrors.aliyun.com&#x27;.</span><br></pre></td></tr></table></figure><h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>由于高版本的pip对pip源的安全性有了更严格的要求，所以<strong>最新的pip要求源必须是https</strong>！<br>使用http就会弹出警告。<br>会发生警告的~/.pip/pip.conf文件配置方式如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"> </span><br><span class="line">[install]</span><br><span class="line">trusted-host = mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>修改pip配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.pip/pip.conf</span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"> </span><br><span class="line">[install]</span><br><span class="line">trusted-host = mirrors.aliyun.com</span><br></pre></td></tr></table></figure><p>将http改成https，保存退出即可。</p><p>如此以来，完美解决即可解决弹出警告的问题！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 疑难杂症 - python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运行维护：Linux终端命令一行执行多条命令的几种方法</title>
      <link href="article/25580/"/>
      <url>article/25580/</url>
      
        <content type="html"><![CDATA[<p>噗，python执行多行终端命令的时候，多行代码执行起来怪怪的。<br>所以如果能一行终端命令搞定，那是极好的了。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： ubuntu18.04  </span><br><span class="line">IDE: JetBrains Pycharm 2019.2.4 x64  </span><br><span class="line">语言: Python 3.7.4</span><br></pre></td></tr></table></figure><hr><h1 id="方法一：-amp-amp"><a href="#方法一：-amp-amp" class="headerlink" title="方法一：&amp;&amp;"></a>方法一：&amp;&amp;</h1><p>前位命令执行成功，后位命令才会执行，&amp;&amp;可以连接多个命令,可以携带命令参数<br>例如：</p><blockquote><p>sudo apt-get update&amp;&amp;sudo apt-get upgrade&amp;&amp;sudo apt-get install nginx -y&amp;&amp;nginx&amp;&amp;ps -aux|grep nginx</p></blockquote><h1 id="方法二：｜｜"><a href="#方法二：｜｜" class="headerlink" title="方法二：｜｜"></a>方法二：｜｜</h1><p>前位命令执行不成功时，后位命令才会执行<br>例如：</p><blockquote><p>vim text.py||vi text.py</p></blockquote><h1 id="方法三："><a href="#方法三：" class="headerlink" title="方法三：;"></a>方法三：;</h1><p>顺序执行多条命令，当；前位命令执行完成后（不管执行是否成功），执行后位命令。<br>反正就是一顿操作猛如虎。</p><blockquote><p>sudo apt-get update&amp;&amp;sudo apt-get upgrade&amp;&amp;sudo apt-get install nginx -y&amp;&amp;nginx&amp;&amp;ps -aux|grep nginx</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 运行维护 - Docker - Ubuntu - Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：判断是否为纯数字或者纯英文</title>
      <link href="article/14304/"/>
      <url>article/14304/</url>
      
        <content type="html"><![CDATA[<p>因为某些简单的字符串判断的需要，所以记录下。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10</span><br><span class="line">IDE: JetBrains Python 2019.2.4 x64</span><br><span class="line">语言: Pytthon 3.68</span><br></pre></td></tr></table></figure><hr><h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断是否是全数字：</span></span><br><span class="line"><span class="built_in">str</span>.encode(<span class="string">&#x27;UTF-8&#x27;</span>).isdigit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否是全英文：</span></span><br><span class="line"><span class="built_in">str</span>.encode(<span class="string">&#x27;UTF-8&#x27;</span>).isalpha()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;孙&quot;</span>.encode(<span class="string">&#x27;UTF-8&#x27;</span>).isdigit()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;孙&quot;</span>.encode(<span class="string">&#x27;UTF-8&#x27;</span>).isalpha()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;123few&#x27;</span>.encode(<span class="string">&#x27;UTF-8&#x27;</span>).isdigit()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;123few&#x27;</span>.encode(<span class="string">&#x27;UTF-8&#x27;</span>).isalpha()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;123&#x27;</span>.encode(<span class="string">&#x27;UTF-8&#x27;</span>).isdigit()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;few&#x27;</span>.encode(<span class="string">&#x27;UTF-8&#x27;</span>).isalpha()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：dict 字典，其内存占用的一些探究</title>
      <link href="article/59671/"/>
      <url>article/59671/</url>
      
        <content type="html"><![CDATA[<p>近期看到V2EX上一个老帖子 <a target="_blank" rel="noopener" href="https://www.v2ex.com/t/210030">新人求教： Python 删除 dict 一个 item 后，内存不释放的？</a><br>引起了我的思考，如果对一个dict对象进行增删改操作，它的内存占用会发生什么样的变化？</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: JetBrains Pycharm 2019.2.4 x64  </span><br><span class="line">语言: Python 3.7.4</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近因为开发的需要，需要对内存进行优化。<br>尤其是在使用异步操作全局变量增删改查的时候可能带来的内存冗余问题。<br>近期看到V2EX上一个老帖子 <a target="_blank" rel="noopener" href="https://www.v2ex.com/t/210030">新人求教： Python 删除 dict 一个 item 后，内存不释放的？</a><br>引起了我的思考，如果对一个dict对象进行增删改查操作，它的内存占用会发生什么样的变化？<br>而Python中的字典又是内存占用大户，怎么用才能省内存呢？  </p><h1 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h1><p>探究过程中需要使用到sys,copy,time,random这几个包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,copy,time,random</span><br><span class="line">n = <span class="built_in">dict</span>()                                                  <span class="comment"># 创建空字典对象</span></span><br><span class="line">print(<span class="string">&#x27;字典内容:%s&#x27;</span>%n)                                       <span class="comment"># 字典内容</span></span><br><span class="line">print(<span class="string">&#x27;变量类型:%s&#x27;</span>%<span class="built_in">type</span>(n))                                 <span class="comment"># 变量类型</span></span><br><span class="line">print(<span class="string">&#x27;字典的内存id:%s&#x27;</span>%<span class="built_in">id</span>(n))                               <span class="comment"># 字典的内存id</span></span><br><span class="line">print(<span class="string">&#x27;字典在内存所占大小:%s 字节&#x27;</span>%sys.getsizeof(n))          <span class="comment"># 字典在内存所占大小</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">字典内容:&#123;&#125;</span><br><span class="line">变量类型:&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line">字典的内存id:1544631697064</span><br><span class="line">字典在内存所占大小:240 字节</span><br></pre></td></tr></table></figure><p>试着多运行了几次，得到的结论：字典创建出来，哪怕它是空字典，它就已经占用了240字节内存了。</p><h1 id="字典增加键值对"><a href="#字典增加键值对" class="headerlink" title="字典增加键值对"></a>字典增加键值对</h1><p>如果给这个字典对象添加新的键值对(key,value)会不会让字典变大呢？<br>增加后的字典内容我就不打印了，太长了卡死我了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,copy,time,random</span><br><span class="line">n = <span class="built_in">dict</span>()                                                  <span class="comment"># 创建空字典对象</span></span><br><span class="line">print(<span class="string">&#x27;字典内容:%s&#x27;</span>%n)                                       <span class="comment"># 字典内容</span></span><br><span class="line">print(<span class="string">&#x27;变量类型:%s&#x27;</span>%<span class="built_in">type</span>(n))                                 <span class="comment"># 变量类型</span></span><br><span class="line">print(<span class="string">&#x27;字典的内存id:%s&#x27;</span>%<span class="built_in">id</span>(n))                               <span class="comment"># 字典的内存id</span></span><br><span class="line">print(<span class="string">&#x27;字典在内存所占大小:%s 字节&#x27;</span>%sys.getsizeof(n))          <span class="comment"># 字典在内存所占大小</span></span><br><span class="line">print(<span class="string">&#x27;*&#x27;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    key = <span class="built_in">int</span>(random.random() * <span class="number">1000</span>)</span><br><span class="line">    n[key] = [time.time()] * <span class="number">100000</span></span><br><span class="line"><span class="comment"># print(&#x27;字典内容:%s&#x27;%n)                                       # 字典内容</span></span><br><span class="line">print(<span class="string">&#x27;变量类型:%s&#x27;</span>%<span class="built_in">type</span>(n))                                 <span class="comment"># 变量类型</span></span><br><span class="line">print(<span class="string">&#x27;字典的内存id:%s&#x27;</span>%<span class="built_in">id</span>(n))                               <span class="comment"># 字典的内存id</span></span><br><span class="line">print(<span class="string">&#x27;字典在内存所占大小:%s 字节&#x27;</span>%sys.getsizeof(n))          <span class="comment"># 字典在内存所占大小</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字典内容:&#123;&#125;</span><br><span class="line">变量类型:&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line">字典的内存id:1588570767016</span><br><span class="line">字典在内存所占大小:240 字节</span><br><span class="line">**************************************************</span><br><span class="line">变量类型:&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line">字典的内存id:1588570767016</span><br><span class="line">字典在内存所占大小:368 字节</span><br></pre></td></tr></table></figure><p>结论：   </p><ul><li>dict的id和类型不会有变化，被修改的就是字典本身而不是新生成了一个有键值对的字典</li><li>添加键值对较少时，dict的大小还是240字节(测试的代码就不贴了)</li><li>添加大量键值对时，dict的大小是会上升的</li></ul><h1 id="字典修改键值对内容"><a href="#字典修改键值对内容" class="headerlink" title="字典修改键值对内容"></a>字典修改键值对内容</h1><p>键值对弄多一点，把字典中键值对的值全部改为None,对比一下修改前后内存占用有没有变化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,copy,time,random</span><br><span class="line">n = <span class="built_in">dict</span>()                                                  <span class="comment"># 创建空字典对象</span></span><br><span class="line">print(<span class="string">&#x27;字典内容:%s&#x27;</span>%n)                                       <span class="comment"># 字典内容</span></span><br><span class="line">print(<span class="string">&#x27;变量类型:%s&#x27;</span>%<span class="built_in">type</span>(n))                                 <span class="comment"># 变量类型</span></span><br><span class="line">print(<span class="string">&#x27;字典的内存id:%s&#x27;</span>%<span class="built_in">id</span>(n))                               <span class="comment"># 字典的内存id</span></span><br><span class="line">print(<span class="string">&#x27;字典在内存所占大小:%s 字节&#x27;</span>%sys.getsizeof(n))          <span class="comment"># 字典在内存所占大小</span></span><br><span class="line">print(<span class="string">&#x27;*&#x27;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    key = <span class="built_in">int</span>(random.random() * <span class="number">1000</span>)</span><br><span class="line">    n[key] = [time.time()] * <span class="number">100000</span></span><br><span class="line"><span class="comment"># print(&#x27;字典内容:%s&#x27;%n)                                       # 字典内容</span></span><br><span class="line">print(<span class="string">&#x27;变量类型:%s&#x27;</span>%<span class="built_in">type</span>(n))                                 <span class="comment"># 变量类型</span></span><br><span class="line">print(<span class="string">&#x27;字典的内存id:%s&#x27;</span>%<span class="built_in">id</span>(n))                               <span class="comment"># 字典的内存id</span></span><br><span class="line">print(<span class="string">&#x27;字典在内存所占大小:%s 字节&#x27;</span>%sys.getsizeof(n))          <span class="comment"># 字典在内存所占大小</span></span><br><span class="line">print(<span class="string">&#x27;*&#x27;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> n.items():</span><br><span class="line">    n[k]=<span class="literal">None</span></span><br><span class="line"><span class="comment"># print(&#x27;字典内容:%s&#x27;%n)                                       # 字典内容</span></span><br><span class="line">print(<span class="string">&#x27;变量类型:%s&#x27;</span>%<span class="built_in">type</span>(n))                                 <span class="comment"># 变量类型</span></span><br><span class="line">print(<span class="string">&#x27;字典的内存id:%s&#x27;</span>%<span class="built_in">id</span>(n))                               <span class="comment"># 字典的内存id</span></span><br><span class="line">print(<span class="string">&#x27;字典在内存所占大小:%s 字节&#x27;</span>%sys.getsizeof(n))          <span class="comment"># 字典在内存所占大小</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">字典内容:&#123;&#125;</span><br><span class="line">变量类型:&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line">字典的内存id:2327090183848</span><br><span class="line">字典在内存所占大小:240 字节</span><br><span class="line">**************************************************</span><br><span class="line">变量类型:&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line">字典的内存id:2327090183848</span><br><span class="line">字典在内存所占大小:2280 字节</span><br><span class="line">**************************************************</span><br><span class="line">变量类型:&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line">字典的内存id:2327090183848</span><br><span class="line">字典在内存所占大小:2280 字节</span><br></pre></td></tr></table></figure><p>结论：   </p><ul><li>dict的id和类型不会有变化</li><li>dict的内存占用如果被搞大了，就算把所有的键的值改成None，它也小不回去了..</li></ul><h1 id="字典删除键值对"><a href="#字典删除键值对" class="headerlink" title="字典删除键值对"></a>字典删除键值对</h1><p>把字典里面的一部分键值对删除了，对比一下内存大小的变化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,copy,time,random</span><br><span class="line">n = <span class="built_in">dict</span>()                                                  <span class="comment"># 创建空字典对象</span></span><br><span class="line">print(<span class="string">&#x27;字典内容:%s&#x27;</span>%n)                                       <span class="comment"># 字典内容</span></span><br><span class="line">print(<span class="string">&#x27;变量类型:%s&#x27;</span>%<span class="built_in">type</span>(n))                                 <span class="comment"># 变量类型</span></span><br><span class="line">print(<span class="string">&#x27;字典的内存id:%s&#x27;</span>%<span class="built_in">id</span>(n))                               <span class="comment"># 字典的内存id</span></span><br><span class="line">print(<span class="string">&#x27;字典在内存所占大小:%s 字节&#x27;</span>%sys.getsizeof(n))          <span class="comment"># 字典在内存所占大小</span></span><br><span class="line">print(<span class="string">&#x27;*&#x27;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    key = <span class="built_in">int</span>(random.random() * <span class="number">1000</span>)</span><br><span class="line">    n[key] = [time.time()] * <span class="number">100000</span></span><br><span class="line"><span class="comment"># print(&#x27;字典内容:%s&#x27;%n)                                       # 字典内容</span></span><br><span class="line">print(<span class="string">&#x27;变量类型:%s&#x27;</span>%<span class="built_in">type</span>(n))                                 <span class="comment"># 变量类型</span></span><br><span class="line">print(<span class="string">&#x27;字典的内存id:%s&#x27;</span>%<span class="built_in">id</span>(n))                               <span class="comment"># 字典的内存id</span></span><br><span class="line">print(<span class="string">&#x27;字典在内存所占大小:%s 字节&#x27;</span>%sys.getsizeof(n))          <span class="comment"># 字典在内存所占大小</span></span><br><span class="line">print(<span class="string">&#x27;*&#x27;</span>*<span class="number">50</span>)</span><br><span class="line">keylist = <span class="built_in">list</span>(n.keys())[<span class="number">1</span>:<span class="number">30</span>]                              <span class="comment"># 删除其中30个键值对</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> keylist:</span><br><span class="line">    <span class="keyword">del</span> n[k]</span><br><span class="line">    <span class="comment"># n[k].clear()</span></span><br><span class="line"><span class="comment"># print(&#x27;字典内容:%s&#x27;%n)                                       # 字典内容</span></span><br><span class="line">print(<span class="string">&#x27;变量类型:%s&#x27;</span>%<span class="built_in">type</span>(n))                                 <span class="comment"># 变量类型</span></span><br><span class="line">print(<span class="string">&#x27;字典的内存id:%s&#x27;</span>%<span class="built_in">id</span>(n))                               <span class="comment"># 字典的内存id</span></span><br><span class="line">print(<span class="string">&#x27;字典在内存所占大小:%s 字节&#x27;</span>%sys.getsizeof(n))          <span class="comment"># 字典在内存所占大小</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">字典内容:&#123;&#125;</span><br><span class="line">变量类型:&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line">字典的内存id:2133858860712</span><br><span class="line">字典在内存所占大小:240 字节</span><br><span class="line">**************************************************</span><br><span class="line">变量类型:&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line">字典的内存id:2133858860712</span><br><span class="line">字典在内存所占大小:2280 字节</span><br><span class="line">**************************************************</span><br><span class="line">变量类型:&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line">字典的内存id:2133858860712</span><br><span class="line">字典在内存所占大小:2280 字节</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结论：   </p><ul><li>dict的id和类型不会有变化</li><li>dict用del方法删除了一部分键值对，dict也不会变小</li><li>dict用.clear()方法删除了一部分键值对，dict也不会变小(结果就不贴出了)</li></ul><h1 id="字典深拷贝"><a href="#字典深拷贝" class="headerlink" title="字典深拷贝"></a>字典深拷贝</h1><p>python中的dict是可变类型，想要新生成一个新的、内容一样的字典需要用到深拷贝。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,copy,time,random</span><br><span class="line">n = <span class="built_in">dict</span>()                                                  <span class="comment"># 创建空字典对象</span></span><br><span class="line">print(<span class="string">&#x27;字典内容:%s&#x27;</span>%n)                                       <span class="comment"># 字典内容</span></span><br><span class="line">print(<span class="string">&#x27;变量类型:%s&#x27;</span>%<span class="built_in">type</span>(n))                                 <span class="comment"># 变量类型</span></span><br><span class="line">print(<span class="string">&#x27;字典的内存id:%s&#x27;</span>%<span class="built_in">id</span>(n))                               <span class="comment"># 字典的内存id</span></span><br><span class="line">print(<span class="string">&#x27;字典在内存所占大小:%s 字节&#x27;</span>%sys.getsizeof(n))          <span class="comment"># 字典在内存所占大小</span></span><br><span class="line">print(<span class="string">&#x27;*&#x27;</span>*<span class="number">50</span>)</span><br><span class="line">m = copy.deepcopy(n)</span><br><span class="line">print(<span class="string">&#x27;字典内容:%s&#x27;</span>%n)                                       <span class="comment"># 字典内容</span></span><br><span class="line">print(<span class="string">&#x27;变量类型:%s&#x27;</span>%<span class="built_in">type</span>(m))                                 <span class="comment"># 变量类型</span></span><br><span class="line">print(<span class="string">&#x27;字典的内存id:%s&#x27;</span>%<span class="built_in">id</span>(m))                               <span class="comment"># 字典的内存id</span></span><br><span class="line">print(<span class="string">&#x27;字典在内存所占大小:%s 字节&#x27;</span>%sys.getsizeof(m))          <span class="comment"># 字典在内存所占大小</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">字典内容:&#123;&#125;</span><br><span class="line">变量类型:&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line">字典的内存id:2131133152936</span><br><span class="line">字典在内存所占大小:240 字节</span><br><span class="line">**************************************************</span><br><span class="line">字典内容:&#123;&#125;</span><br><span class="line">变量类型:&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line">字典的内存id:2131163151320</span><br><span class="line">字典在内存所占大小:240 字节</span><br></pre></td></tr></table></figure><p>结论：   </p><ul><li>字典id有变化</li><li>深拷贝的字典是全新的字典</li><li>新字典与前字典的内容和内存占用大小是完全相同的</li></ul><h1 id="字典变化以后再深拷贝"><a href="#字典变化以后再深拷贝" class="headerlink" title="# 字典变化以后再深拷贝"></a># 字典变化以后再深拷贝</h1><p>如果说前一个字典存了很多键值对，我给它删了一部分，<br>我再把删过的前字典再深拷贝成一个新字典，<br>新字典它的内存占用与前字典比较会变化(小)吗？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,copy,time,random</span><br><span class="line">n = <span class="built_in">dict</span>()                                                  <span class="comment"># 创建空字典对象</span></span><br><span class="line">print(<span class="string">&#x27;字典内容:%s&#x27;</span>%n)                                       <span class="comment"># 字典内容</span></span><br><span class="line">print(<span class="string">&#x27;变量类型:%s&#x27;</span>%<span class="built_in">type</span>(n))                                 <span class="comment"># 变量类型</span></span><br><span class="line">print(<span class="string">&#x27;字典的内存id:%s&#x27;</span>%<span class="built_in">id</span>(n))                               <span class="comment"># 字典的内存id</span></span><br><span class="line">print(<span class="string">&#x27;字典在内存所占大小:%s 字节&#x27;</span>%sys.getsizeof(n))          <span class="comment"># 字典在内存所占大小</span></span><br><span class="line">print(<span class="string">&#x27;添加一些键值对&#x27;</span>+<span class="string">&#x27;*&#x27;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    key = <span class="built_in">int</span>(random.random() * <span class="number">1000</span>)</span><br><span class="line">    n[key] = [time.time()] * <span class="number">100000</span></span><br><span class="line"><span class="comment"># print(&#x27;字典内容:%s&#x27;%n)                                       # 字典内容</span></span><br><span class="line">print(<span class="string">&#x27;变量类型:%s&#x27;</span>%<span class="built_in">type</span>(n))                                 <span class="comment"># 变量类型</span></span><br><span class="line">print(<span class="string">&#x27;字典的内存id:%s&#x27;</span>%<span class="built_in">id</span>(n))                               <span class="comment"># 字典的内存id</span></span><br><span class="line">print(<span class="string">&#x27;字典在内存所占大小:%s 字节&#x27;</span>%sys.getsizeof(n))          <span class="comment"># 字典在内存所占大小</span></span><br><span class="line">print(<span class="string">&#x27;删除部分键值对&#x27;</span>+<span class="string">&#x27;*&#x27;</span>*<span class="number">50</span>)</span><br><span class="line">keylist = <span class="built_in">list</span>(n.keys())[<span class="number">1</span>:<span class="number">30</span>]                              <span class="comment"># 删除其中30个键值对</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> keylist:</span><br><span class="line">    n[k].clear()</span><br><span class="line"><span class="comment"># print(&#x27;字典内容:%s&#x27;%n)                                       # 字典内容</span></span><br><span class="line">print(<span class="string">&#x27;变量类型:%s&#x27;</span>%<span class="built_in">type</span>(n))                                 <span class="comment"># 变量类型</span></span><br><span class="line">print(<span class="string">&#x27;字典的内存id:%s&#x27;</span>%<span class="built_in">id</span>(n))                               <span class="comment"># 字典的内存id</span></span><br><span class="line">print(<span class="string">&#x27;字典在内存所占大小:%s 字节&#x27;</span>%sys.getsizeof(n))          <span class="comment"># 字典在内存所占大小</span></span><br><span class="line">print(<span class="string">&#x27;深拷贝&#x27;</span>+<span class="string">&#x27;*&#x27;</span>*<span class="number">50</span>)</span><br><span class="line">m = copy.deepcopy(n)</span><br><span class="line"><span class="comment"># print(&#x27;字典内容:%s&#x27;%m)                                       # 字典内容</span></span><br><span class="line">print(<span class="string">&#x27;变量类型:%s&#x27;</span>%<span class="built_in">type</span>(m))                                 <span class="comment"># 变量类型</span></span><br><span class="line">print(<span class="string">&#x27;字典的内存id:%s&#x27;</span>%<span class="built_in">id</span>(m))                               <span class="comment"># 字典的内存id</span></span><br><span class="line">print(<span class="string">&#x27;字典在内存所占大小:%s 字节&#x27;</span>%sys.getsizeof(m))          <span class="comment"># 字典在内存所占大小</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">字典内容:&#123;&#125;</span><br><span class="line">变量类型:&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line">字典的内存id:1921112555176</span><br><span class="line">字典在内存所占大小:240 字节</span><br><span class="line">添加一些键值对**************************************************</span><br><span class="line">变量类型:&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line">字典的内存id:1921112555176</span><br><span class="line">字典在内存所占大小:2280 字节</span><br><span class="line">删除部分键值对**************************************************</span><br><span class="line">变量类型:&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line">字典的内存id:1921112555176</span><br><span class="line">字典在内存所占大小:2280 字节</span><br><span class="line">深拷贝**************************************************</span><br><span class="line">变量类型:&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line">字典的内存id:1921113586648</span><br><span class="line">字典在内存所占大小:2280 字节</span><br></pre></td></tr></table></figure><p>结论：   </p><ul><li>深拷贝后的字典id有变化</li><li>深拷贝的字典是全新的字典</li><li>深拷贝真的是把前字典一切都搬过来了，哪怕前字典删除了键值对，内存大小还是照搬了最大时候的占用</li></ul><h1 id="建立新字典遍历插入旧字典键值对"><a href="#建立新字典遍历插入旧字典键值对" class="headerlink" title="建立新字典遍历插入旧字典键值对"></a>建立新字典遍历插入旧字典键值对</h1><p>由上面可知深拷贝除了id有变化创建成新字典外，其他全部都继承了旧字典的衣钵，内存大小不会有变化。<br>那么新创一个字典，不用深拷贝，然后通过遍历的方式把旧字典删除部分键值对后的内容复制一遍，新字典还跟旧字典大小一样吗？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,copy,time,random</span><br><span class="line">n = <span class="built_in">dict</span>()                                                  <span class="comment"># 创建空字典对象</span></span><br><span class="line">print(<span class="string">&#x27;字典内容:%s&#x27;</span>%n)                                       <span class="comment"># 字典内容</span></span><br><span class="line">print(<span class="string">&#x27;变量类型:%s&#x27;</span>%<span class="built_in">type</span>(n))                                 <span class="comment"># 变量类型</span></span><br><span class="line">print(<span class="string">&#x27;字典的内存id:%s&#x27;</span>%<span class="built_in">id</span>(n))                               <span class="comment"># 字典的内存id</span></span><br><span class="line">print(<span class="string">&#x27;字典在内存所占大小:%s 字节&#x27;</span>%sys.getsizeof(n))          <span class="comment"># 字典在内存所占大小</span></span><br><span class="line">print(<span class="string">&#x27;添加一些键值对&#x27;</span>+<span class="string">&#x27;*&#x27;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    key = <span class="built_in">int</span>(random.random() * <span class="number">1000</span>)</span><br><span class="line">    n[key] = [time.time()] * <span class="number">100000</span></span><br><span class="line"><span class="comment"># print(&#x27;字典内容:%s&#x27;%n)                                       # 字典内容</span></span><br><span class="line">print(<span class="string">&#x27;变量类型:%s&#x27;</span>%<span class="built_in">type</span>(n))                                 <span class="comment"># 变量类型</span></span><br><span class="line">print(<span class="string">&#x27;字典的内存id:%s&#x27;</span>%<span class="built_in">id</span>(n))                               <span class="comment"># 字典的内存id</span></span><br><span class="line">print(<span class="string">&#x27;字典在内存所占大小:%s 字节&#x27;</span>%sys.getsizeof(n))          <span class="comment"># 字典在内存所占大小</span></span><br><span class="line">print(<span class="string">&#x27;删除部分键值对&#x27;</span>+<span class="string">&#x27;*&#x27;</span>*<span class="number">50</span>)</span><br><span class="line">keylist = <span class="built_in">list</span>(n.keys())[:-<span class="number">1</span>]                              <span class="comment"># 删除其中30个键值对</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> keylist:</span><br><span class="line">    <span class="keyword">del</span> n[k]</span><br><span class="line"><span class="comment"># print(&#x27;字典内容:%s&#x27;%n)                                       # 字典内容</span></span><br><span class="line">print(<span class="string">&#x27;变量类型:%s&#x27;</span>%<span class="built_in">type</span>(n))                                 <span class="comment"># 变量类型</span></span><br><span class="line">print(<span class="string">&#x27;字典的内存id:%s&#x27;</span>%<span class="built_in">id</span>(n))                               <span class="comment"># 字典的内存id</span></span><br><span class="line">print(<span class="string">&#x27;字典在内存所占大小:%s 字节&#x27;</span>%sys.getsizeof(n))          <span class="comment"># 字典在内存所占大小</span></span><br><span class="line">print(<span class="string">&#x27;新字典遍历插入&#x27;</span>+<span class="string">&#x27;*&#x27;</span>*<span class="number">50</span>)</span><br><span class="line">m = <span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> n.items():</span><br><span class="line">    m[k]=v</span><br><span class="line"><span class="comment"># print(&#x27;字典内容:%s&#x27;%m)                                       # 字典内容</span></span><br><span class="line">print(<span class="string">&#x27;变量类型:%s&#x27;</span>%<span class="built_in">type</span>(m))                                 <span class="comment"># 变量类型</span></span><br><span class="line">print(<span class="string">&#x27;字典的内存id:%s&#x27;</span>%<span class="built_in">id</span>(m))                               <span class="comment"># 字典的内存id</span></span><br><span class="line">print(<span class="string">&#x27;字典在内存所占大小:%s 字节&#x27;</span>%sys.getsizeof(m))          <span class="comment"># 字典在内存所占大小</span></span><br><span class="line">print(<span class="string">&#x27;销毁旧字典并将新创建字赋值到旧变量&#x27;</span>+<span class="string">&#x27;*&#x27;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="keyword">del</span> n</span><br><span class="line">n = m</span><br><span class="line">print(<span class="string">&#x27;变量类型:%s&#x27;</span>%<span class="built_in">type</span>(n))                                 <span class="comment"># 变量类型</span></span><br><span class="line">print(<span class="string">&#x27;字典的内存id:%s&#x27;</span>%<span class="built_in">id</span>(n))                               <span class="comment"># 字典的内存id</span></span><br><span class="line">print(<span class="string">&#x27;字典在内存所占大小:%s 字节&#x27;</span>%sys.getsizeof(n))          <span class="comment"># 字典在内存所占大小</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">字典内容:&#123;&#125;</span><br><span class="line">变量类型:&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line">字典的内存id:2478120058536</span><br><span class="line">字典在内存所占大小:240 字节</span><br><span class="line">添加一些键值对**************************************************</span><br><span class="line">变量类型:&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line">字典的内存id:2478120058536</span><br><span class="line">字典在内存所占大小:2280 字节</span><br><span class="line">删除部分键值对**************************************************</span><br><span class="line">变量类型:&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line">字典的内存id:2478120058536</span><br><span class="line">字典在内存所占大小:2280 字节</span><br><span class="line">新字典遍历插入**************************************************</span><br><span class="line">变量类型:&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line">字典的内存id:2478120306312</span><br><span class="line">字典在内存所占大小:240 字节</span><br><span class="line">销毁旧字典并将新创建字赋值到旧变量**************************************************</span><br><span class="line">变量类型:&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line">字典的内存id:2478120306312</span><br><span class="line">字典在内存所占大小:240 字节</span><br></pre></td></tr></table></figure><p>结论：   </p><ul><li>要想让dict内存占用变小，只能创建新的dict把旧dict内容遍历添加进去。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>很少写这么长博客..太耗时间了，总结一下观察结果吧。</p><ul><li>python的dict(字典)类型，是没有弹性的。它对内存大小的占用只会越来越大，不会因为键值对被删除而缩小。</li><li>删除dict键值对以后若是需要压缩内存占用大小，只能创建新的dict把旧dict内容遍历添加进去。</li><li>dict深拷贝是将旧字典的最大内存占用和dict里的内容全部都照搬到一个新字典上，对内存缩小没有作用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运行维护：Docker的常用命令</title>
      <link href="article/37327/"/>
      <url>article/37327/</url>
      
        <content type="html"><![CDATA[<p>docker是个好东西,但是每次用到某些docker命令的时候又要跑去搜搜搜<br>干脆自己写个博客，把自己常用的docker命令收集起来方便用。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： ubuntu18.04  </span><br><span class="line">IDE: JetBrains Pycharm 2019.2.4 x64  </span><br><span class="line">语言: Python 3.7.4</span><br></pre></td></tr></table></figure><hr><h1 id="安装和卸载"><a href="#安装和卸载" class="headerlink" title="安装和卸载"></a>安装和卸载</h1><p>卸载旧版本<br>Docker 的旧版本被称为 docker，docker.io 或 docker-engine 。如果已安装，请卸载它们：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure><p>安装docker<br>我比较喜欢图省事233，使用docker官方提供的脚本安装！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -qO- https://get.docker.com/ | bash</span><br><span class="line"><span class="comment"># 如果上面的不行，执行下面两句</span></span><br><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装成功执行下面语句，如果有类似回显，说明安装成功</span></span><br><span class="line">docker --version</span><br><span class="line">Docker version 18.06.1-ce, build e68fc7a</span><br></pre></td></tr></table></figure><p>如果当前用户不是root,或你想让非root用户也能把玩docker的话，需要执行添加一下docker用户组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立 docker 组</span></span><br><span class="line">sudo groupadd docker</span><br><span class="line"><span class="comment"># 将当前用户加入 docker 组：</span></span><br><span class="line">udo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p><strong>退出当前终端并重新登录</strong>，然后输入</p><blockquote><p>docker info</p></blockquote><p>如果噼里啪啦出来一大堆，没有报错就成功了。</p><h1 id="配置加速"><a href="#配置加速" class="headerlink" title="配置加速"></a>配置加速</h1><p>docker直接拉取的速度老慢了，很烦人，所以配置一些加速服务器来提高拉去速度。</p><blockquote><p>vim /etc/docker/daemon.json</p></blockquote><p>输入如下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://dockerhub.azk8s.cn&quot;,</span><br><span class="line">    &quot;https://hub-mirror.c.163.com&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，一定要保证该文件符合 json 规范，否则 Docker 将不能启动。</p></blockquote><p>配置完成后，保存退出vim,并且重新启动服务</p><blockquote><p>sudo systemctl daemon-reload<br>sudo systemctl restart docker  </p></blockquote><p>到这里配置加速就搞定了。</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># docker 信息</span><br><span class="line">docker info</span><br><span class="line"></span><br><span class="line"># docker 镜像</span><br><span class="line">docker images</span><br><span class="line"># 删除docker镜像</span><br><span class="line">docker rmi [images id]</span><br><span class="line"></span><br><span class="line"># docker 进程</span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"># docker 运行</span><br><span class="line">docker run [镜像名称]</span><br><span class="line"># 例如：</span><br><span class="line">docker run --name=&#x27;localScarpyd6800&#x27; -itd -p 6800:6800 --restart=always raxianch/scrapyd</span><br><span class="line"></span><br><span class="line">--name：给被运行的容器设置名字.</span><br><span class="line"></span><br><span class="line">-it: -t让docker分配一个伪终端并绑定到容器的标准输入上, -i则让容器的标准输入保持打开.</span><br><span class="line"></span><br><span class="line">-itd: 多个d是让docker绑定一个伪终端和保持打开状态且在后台运行.</span><br><span class="line"></span><br><span class="line">-p: 端口映射</span><br><span class="line"># 例如：将nginx的80端口映射到宿主机的800端口上</span><br><span class="line">docker run -d -it -p 800:80 nginx </span><br><span class="line"></span><br><span class="line">--restart：--restart=always表示自动重启，默认值为--restart=no。</span><br><span class="line">如果使用always关闭该容器时需要docker update --restart=no [容器id]&amp;&amp;docker stop [容器id]</span><br><span class="line"></span><br><span class="line">--rm: 表示关闭容器时，删除该容器。它不能和--restart=always同时使用。</span><br><span class="line"></span><br><span class="line"># 进入已经运行得容器内部</span><br><span class="line">docker exec -it 5be7dae2d7df /bin/bash</span><br><span class="line"></span><br><span class="line"># 停止容器</span><br><span class="line">docker stop</span><br><span class="line"></span><br><span class="line"># 复制宿主机文件到docker容器中</span><br><span class="line">docker cp [本地目录/文件] [容器ID/name]:[容器内的目录/文件]</span><br><span class="line">例如：docker cp ./jdScrapy  localScarpyd6800:tmp/jdScrapy</span><br><span class="line"></span><br><span class="line"># 复制docke容器中的文件到宿主机</span><br><span class="line">docker cp [容器ID/name]:[容器内的目录/文件] [本地目录/文件] </span><br><span class="line">例如：docker cp localScarpyd6800:tmp/jdScrapy ./jdScrapy</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>没啥总结，docker还是刚刚开始去用，深刻的理解还是没有的233333.<br>只是把自己常用命令放一起方便用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 运行维护 - Docker - Ubuntu - Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xpath：基本应用的记录和轴相关的高级应用</title>
      <link href="article/1035/"/>
      <url>article/1035/</url>
      
        <content type="html"><![CDATA[<p>Python爬虫开发中，xpath速度是比较快的使用较为灵活，是在网页定位元素的较优选择。<br>虽然文本解析库中正则表达式的性能比Xpath要强，但是企业级爬虫开发里，Xpath比正则要更为常见得多。<br>对于我的话，“不管是什么魔法、什么妖法，只有有用的都会用。”<br>而往网上的文章，对于Xpath语句的记录都比较零碎，所以在这里统一整理一下，自己可能常用的Xpath。 </p><span id="more"></span><hr><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10  </span><br><span class="line">IDE: JetBrains Python 2018.2.4 x64  </span><br><span class="line">语言: Pytthon 3.6.5  </span><br></pre></td></tr></table></figure><hr><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>在python中安装Xpath，在终端输入完成安装。<br>通常来讲安装是不会出现问题，如果出现了请根据报错搜索解决。<br>高版本的lxml是没有etree方法的，所以网上的代码不一定有用多数因为这个原因。</p><blockquote><p>pip install lxml</p></blockquote><p>测试用的前端网页代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>xpath test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;q&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>时间<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>地点<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>任务<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;testid&#x27;</span> <span class="attr">data-h</span>=<span class="string">&quot;first&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这里是个小标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">data</span>=<span class="string">&quot;one&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">data</span>=<span class="string">&quot;two&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">data</span>=<span class="string">&quot;three&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">code</span>=<span class="string">&quot;233&quot;</span>&gt;</span>233<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">code</span>=<span class="string">&quot;666&quot;</span>&gt;</span>666<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">code</span>=<span class="string">&quot;888&quot;</span>&gt;</span>888<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>H3装了好多东西</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>谷歌一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;countList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Xpath-应用"><a href="#Xpath-应用" class="headerlink" title="Xpath 应用"></a>Xpath 应用</h1><h2 id="匹配节点下全匹配"><a href="#匹配节点下全匹配" class="headerlink" title="匹配节点下全匹配 .//"></a>匹配节点下全匹配 .//</h2><ul><li>//获取文档中所有匹配的节点，</li><li>.获取当前节点，有的时候我们需要获取当前节点下的所有节点，</li><li>.//一定要结合.使用//，否则都会获取整个文档的匹配结果。</li></ul><h2 id="匹配包含某标签-属性的所有的属性值"><a href="#匹配包含某标签-属性的所有的属性值" class="headerlink" title="匹配包含某标签/属性的所有的属性值 //"></a>匹配包含某标签/属性的所有的属性值 //</h2><ul><li>如果使用了类似Xpath Helper之类的浏览器插件，善用全匹配，可以有效的缩短插件自动生成的Xpath<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(tree.xpath(&#x27;//@code&#x27;)) #匹配所有带有code属性的属性值</span><br><span class="line"></span><br><span class="line">print(tree.xpath(&#x27;//li&#x27;)) #匹配所有li标签</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="选取多个路径"><a href="#选取多个路径" class="headerlink" title="选取多个路径|"></a>选取多个路径|</h2><ul><li>该符号目的是为了在一个xpath中写多个表达式，用|分开，每个表达式互不干扰。</li><li>符合匹配表达式的元素都会放到同一个列表里<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(tree.xpath(&#x27;//div[@id=&quot;testid&quot;]/h2/text() | //li[@data]/text()&#x27;))#多个匹配条件</span><br></pre></td></tr></table></figure></li></ul><h2 id="position定位"><a href="#position定位" class="headerlink" title="position定位"></a>position定位</h2><ul><li>该符号目的是为了在一个xpath中写多个表达式，用|分开，每个表达式互不干扰。</li><li>符合匹配表达式的元素都会放到同一个列表里<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(tree.xpath(&#x27;//*[@id=&quot;testid&quot;]/ol/li[position()=2]/text()&#x27;)[0] )</span><br></pre></td></tr></table></figure></li></ul><h2 id="Axes（轴）"><a href="#Axes（轴）" class="headerlink" title="Axes（轴）"></a>Axes（轴）</h2><p>对常用的Xpath轴先做简单的整合，再做分别测试。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">XPath 坐标轴：坐标轴用于定义当对当前节点的节点集合。</span><br><span class="line"></span><br><span class="line">坐标轴名称               含义</span><br><span class="line"></span><br><span class="line">ancestor                  选取当前节点的所有先辈元素及根节点。</span><br><span class="line"></span><br><span class="line">ancestor-or-self       选取当前节点的所有先辈以及当前节点本身。</span><br><span class="line"></span><br><span class="line">ttibute                      选取当前节点的所有属性。</span><br><span class="line"></span><br><span class="line">child                        选取当前节点的所有子元素。</span><br><span class="line"></span><br><span class="line">descendant             选取当前节点的所有后代元素。</span><br><span class="line"></span><br><span class="line">descendant-or-self  选取当前节点的所有后代元素以及当前节点本身。</span><br><span class="line"></span><br><span class="line">following                  选取文档中当前节点的结束标签之后的所有节点。</span><br><span class="line"></span><br><span class="line">following-sibling       选取当前节点之后的所有同级节点。</span><br><span class="line"></span><br><span class="line">namespace              选取当前节点的所有命名空间节点。</span><br><span class="line"></span><br><span class="line">parent                     选取当前节点的父节点。</span><br><span class="line"></span><br><span class="line">preceding               选取当前节点的开始标签之前的所有节点。</span><br><span class="line"></span><br><span class="line">preceding-sibling    选取当前节点之前的所有同级节点。</span><br><span class="line"></span><br><span class="line">self                         选取当前节点。</span><br></pre></td></tr></table></figure><p>child：选取当前节点的所有子元素</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#child子节点定位</span><br><span class="line">print(tree.xpath(&#x27;//div[@id=&quot;testid&quot;]/child::ul/li/text()&#x27;))</span><br><span class="line"></span><br><span class="line">#child::*当前节点的所有子元素</span><br><span class="line">print(tree.xpath(&#x27;//div[@id=&quot;testid&quot;]/child::*&#x27;))</span><br><span class="line"></span><br><span class="line">#定位某节点下为ol的子节点下的所有节点</span><br><span class="line">print(tree.xpath(&#x27;//div[@id=&quot;testid&quot;]/child::ol/child::*/text()&#x27;))</span><br></pre></td></tr></table></figure><p>attribute：选取当前节点的所有属性</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(tree.xpath(&#x27;//div/attribute::id&#x27;))</span><br><span class="line">print(tree.xpath(&#x27;//div/attribute::id&#x27;))</span><br></pre></td></tr></table></figure><p>ancestor：父辈元素 / ancestor-or-self：父辈元素及当前元素<br>descendant：后代 / descendant-or-self：后代及当前节点本身</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(tree.xpath(&#x27;//div/attribute::id&#x27;))</span><br><span class="line">print(tree.xpath(&#x27;//div/attribute::id&#x27;))</span><br></pre></td></tr></table></figure><p>following :选取文档中当前节点的结束标签之后的所有节点</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(tree.xpath(&#x27;//div[@id=&quot;testid&quot;]/following::div[not(@id)]/.//li[1]/text()&#x27;))</span><br></pre></td></tr></table></figure><p>namespace：选取当前节点的所有命名空间节点</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(tree.xpath(&#x27;//div[@id=&quot;testid&quot;]/namespace::*&#x27;))</span><br></pre></td></tr></table></figure><p>parent：选取当前节点的父节点</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(tree.xpath(&#x27;//li[@data=&quot;one&quot;]/parent::ol/li[last()]/text()&#x27;))</span><br></pre></td></tr></table></figure><p>preceding：选取文档中当前节点的开始标签之前的所有节点</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 记住是标签开始之前，同级前节点及其子节点</span><br><span class="line">print(tree.xpath(&#x27;//div[@id=&quot;testid&quot;]/preceding::div/ul/li[1]/text()&#x27;)[0])</span><br><span class="line"># 下面这两条可以看到其顺序是靠近testid节点的优先</span><br><span class="line">print(tree.xpath(&#x27;//div[@id=&quot;testid&quot;]/preceding::li[1]/text()&#x27;)[0])</span><br><span class="line">print(tree.xpath(&#x27;//div[@id=&quot;testid&quot;]/preceding::li[3]/text()&#x27;)[0])</span><br></pre></td></tr></table></figure><p>preceding-sibling：选取当前节点之前的所有同级节点</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(tree.xpath(&#x27;//div[@id=&quot;testid&quot;]/preceding-sibling::div/ul/li[2]/text()&#x27;)[0])</span><br><span class="line"></span><br><span class="line">#这里返回的就是空的</span><br><span class="line">print(tree.xpath(&#x27;//div[@id=&quot;testid&quot;]/preceding-sibling::li&#x27;))</span><br></pre></td></tr></table></figure><p>self：选取当前节点</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 选取带id属性值的div中包含data属性的标签的所有属性值</span><br><span class="line">print(tree.xpath(&#x27;//div[@id]/self::div[@data]/attribute::*&#x27;))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔心得 </tag>
            
            <tag> Xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：Scrapy面试知识的整理</title>
      <link href="article/52387/"/>
      <url>article/52387/</url>
      
        <content type="html"><![CDATA[<p>感觉我需要先把Scrapy官方文档再过一遍，<br>收集了一下网上的scrapy面试题，发现面试会碰到什么情况的问题也真的是无法预料。</p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>只说一句，官方文档万岁。</p><h1 id="Scrapy-QA"><a href="#Scrapy-QA" class="headerlink" title="Scrapy QA"></a>Scrapy QA</h1><p>对网上见过的问题，进行知识点整理。</p><h2 id="Scarapy-数据流"><a href="#Scarapy-数据流" class="headerlink" title="Scarapy 数据流"></a>Scarapy 数据流</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">基本必问，脑海里最好有一张流程图</span><br><span class="line"></span><br><span class="line">1. Engine获得从爬行器中爬行的初始请求。</span><br><span class="line">2. Engine在调度程序中调度请求，并请求下一次抓取请求。</span><br><span class="line">3. 调度程序将下一个请求返回到引擎。</span><br><span class="line">4. 引擎将请求发送到下载器，通过下载器中间件（请参阅process_request()）。</span><br><span class="line">5. 页面下载完成后，下载器生成一个响应(带有该页面)并将其发送给引擎，通过下载器中间件(请参阅process_response())。</span><br><span class="line">6. 引擎从下载加载程序接收响应，并将其发送给Spider进行处理，并通过Spider中间件(请参阅process_spider_input())。</span><br><span class="line">7. Spider处理响应，并向引擎返回报废的项和新请求(要跟踪的)，通过Spider中间件(请参阅process_spider_output())。</span><br><span class="line">8. 引擎将已处理的项目发送到项目管道，然后将已处理的请求发送到调度程序，并请求可能的下一个请求进行抓取。</span><br><span class="line">9. 这个过程重复(从第1步)，直到调度程序不再发出请求。</span><br><span class="line"></span><br><span class="line">简单总结：</span><br><span class="line">start_request（引擎）&gt;调度器&gt;引擎&gt;(下载中间件)&gt;下载器&gt;(下载中间件)&gt;引擎&gt;(爬虫中间件)&gt;爬虫&gt;(爬虫中间件)&gt;引擎&gt;管道&amp;&amp;调度器&gt; more</span><br></pre></td></tr></table></figure><h2 id="Scrapy相BeautifulSoup或lxml比较-如何呢？"><a href="#Scrapy相BeautifulSoup或lxml比较-如何呢？" class="headerlink" title="Scrapy相BeautifulSoup或lxml比较,如何呢？"></a>Scrapy相BeautifulSoup或lxml比较,如何呢？</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BeautifulSoup 及 lxml 是HTML和XML的分析库。</span><br><span class="line">Scrapy则是 编写爬虫，爬取网页并获取数据的应用框架(application framework)。</span><br><span class="line"></span><br><span class="line">Scrapy提供了内置的机制来提取数据(叫做 选择器(selectors))。 </span><br><span class="line">但如果您觉得使用更为方便，也可以使用 BeautifulSoup (或 lxml)。 </span><br><span class="line">总之，它们仅仅是分析库，可以在任何Python代码中被导入及使用。</span><br><span class="line"></span><br><span class="line">换句话说，拿Scrapy与 BeautifulSoup (或 lxml) 比较就好像是拿 jinja2 与 Django 相比。</span><br></pre></td></tr></table></figure><h2 id="Scrapy支持HTTP代理么？"><a href="#Scrapy支持HTTP代理么？" class="headerlink" title="Scrapy支持HTTP代理么？"></a>Scrapy支持HTTP代理么？</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">必须的，通过 HttpProxyMiddleware 中间件可以实现。当然也可以通过自定义中间件来实现！</span><br></pre></td></tr></table></figure><h2 id="Scrapy如何爬取属性在不同页面的item呢？"><a href="#Scrapy如何爬取属性在不同页面的item呢？" class="headerlink" title="Scrapy如何爬取属性在不同页面的item呢？"></a>Scrapy如何爬取属性在不同页面的item呢？</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">非常基础且常见的问题..</span><br><span class="line">通过response的meta来进行传递，字典键值对。不但是item，就算是一些自定义参数也可以传。</span><br><span class="line"></span><br><span class="line">除了meta,有趣的还有其他特殊方法：</span><br><span class="line">dont_redirect</span><br><span class="line">dont_retry</span><br><span class="line">handle_httpstatus_list</span><br><span class="line">handle_httpstatus_all</span><br><span class="line">dont_merge_cookies (see cookies parameter of Request constructor)</span><br><span class="line">cookiejar dont_cache</span><br><span class="line">redirect_urls</span><br><span class="line">bindaddress</span><br><span class="line">dont_obey_robotstxt</span><br><span class="line">download_timeout</span><br><span class="line">download_maxsize</span><br><span class="line">proxy</span><br><span class="line"></span><br><span class="line">顾名思义，估计也能猜出来了。</span><br><span class="line">这里我用最多还有redirect_urls和dont_retry，控制跳转以及控制是否重试。</span><br><span class="line">结合retry或者重定向中间件，还可以针对性的处理爬取过程中碰到的验证码问题。</span><br><span class="line">高端点的还有cookie合并方法。</span><br></pre></td></tr></table></figure><h2 id="Scrapy我要如何在spider里模拟用户登录呢"><a href="#Scrapy我要如何在spider里模拟用户登录呢" class="headerlink" title="Scrapy我要如何在spider里模拟用户登录呢?"></a>Scrapy我要如何在spider里模拟用户登录呢?</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用FormRequest.from_response()方法</span><br><span class="line">构造好需要用户登录需要的各类参数，然后模拟用户登录。</span><br></pre></td></tr></table></figure><h2 id="Scrapy是以广度优先还是深度优先进行爬取的呢？"><a href="#Scrapy是以广度优先还是深度优先进行爬取的呢？" class="headerlink" title="Scrapy是以广度优先还是深度优先进行爬取的呢？"></a>Scrapy是以广度优先还是深度优先进行爬取的呢？</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">默认情况下，Scrapy使用 LIFO 队列来存储等待的请求。</span><br><span class="line">简单的说，就是 深度优先顺序 。</span><br><span class="line">深度优先对大多数情况下是更方便的。</span><br><span class="line">如果您想以 广度优先顺序 进行爬取，你可以设置以下的设定:</span><br><span class="line">DEPTH_PRIORITY = 1</span><br><span class="line">SCHEDULER_DISK_QUEUE = &#x27;scrapy.squeue.PickleFifoDiskQueue&#x27;</span><br><span class="line">SCHEDULER_MEMORY_QUEUE = &#x27;scrapy.squeue.FifoMemoryQueue&#x27;</span><br><span class="line"></span><br><span class="line">DEPTH_LIMIT 还可以对层级进行有效的限制，根据项目情况来定。</span><br></pre></td></tr></table></figure><h2 id="Scrapy爬虫有内存泄露-内存爆了-栈溢出了，怎么办"><a href="#Scrapy爬虫有内存泄露-内存爆了-栈溢出了，怎么办" class="headerlink" title="Scrapy爬虫有内存泄露/内存爆了/栈溢出了，怎么办?"></a>Scrapy爬虫有内存泄露/内存爆了/栈溢出了，怎么办?</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">加内存条啊(这句话划掉)</span><br><span class="line"></span><br><span class="line">解决方案：没有比这更详细的了。</span><br><span class="line">https://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/leaks.html#topics-leaks</span><br><span class="line"></span><br><span class="line">我的步骤是这样的：</span><br><span class="line">1. 首先检查编写的中间件，管道(pipeline) 或扩展。例如，在 spider_opened 中分配资源但在 spider_closed 中没有释放它们。</span><br><span class="line">2. 检查是否出现下载速度和管道存储速度是否平衡，如果差距很大，会造成队列积压。</span><br><span class="line">3. 使用 trackref 在telNet下调试内存泄露，具体问题具体分析，其追踪了所有活动(live)的Request, Item及Selector对象的引用。</span><br><span class="line">4. 使用 get_oldest() 方法来看都是什么鬼东西在那卡半天，找出来单独测试然后寻找解决办法。</span><br></pre></td></tr></table></figure><h2 id="如何让Scrapy减少内存消耗"><a href="#如何让Scrapy减少内存消耗" class="headerlink" title="如何让Scrapy减少内存消耗?"></a>如何让Scrapy减少内存消耗?</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">加内存条啊(这句话划掉)</span><br><span class="line"></span><br><span class="line">1. 尽可能减少对 meta 或者 request回调函数 的传递对象的引用</span><br><span class="line">2. 让Requests, Response及Items的对象具有完整有限的生命周期: 被创建，使用，最后被销毁。尤其是销毁！</span><br><span class="line">3. 中间件，管道(pipeline) 或扩展.py 中，一定要有有始有终。记得在 spider_closed 中没有释放分配的资源。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="spider中可以使用基本HTTP认证么？"><a href="#spider中可以使用基本HTTP认证么？" class="headerlink" title="spider中可以使用基本HTTP认证么？"></a>spider中可以使用基本HTTP认证么？</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpAuthMiddleware 有关的验证中间件，了解一下。</span><br></pre></td></tr></table></figure><p>(未完持续..)</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔心得 </tag>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：部分面试知识点梳理</title>
      <link href="article/45319/"/>
      <url>article/45319/</url>
      
        <content type="html"><![CDATA[<p>都说三天不写，手生。<br>练一个多月的车，考驾驶证。<br>有很多东西，我本以为我还记得，但是一到写起来的时候有不少细节我真的想不起来了，又得回头到搜索引擎去查。<br>搞技术的人，自己的博客真的就是自己的第二个大脑，要多往里面存存东西才是。<br>无论是多简单的东西，记一记总是好的。至少，自己的博客可不会嫌我啰嗦，不是吗？</p><span id="more"></span><h1 id="QA整理："><a href="#QA整理：" class="headerlink" title="QA整理："></a>QA整理：</h1><h2 id="进程和线程的概念"><a href="#进程和线程的概念" class="headerlink" title="进程和线程的概念"></a>进程和线程的概念</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">“进程是资源分配的最小单位，线程是CPU调度的最小单位”。</span><br><span class="line"></span><br><span class="line">1、进程是什么？</span><br><span class="line">是具有一定独立功能的程序、它是系统进行资源分配和调度的一个独立单位，重点在系统调度和单独的单位，也就是说进程是可以独 立运行的一段程序。</span><br><span class="line">2、线程又是什么？</span><br><span class="line">线程进程的一个实体，是CPU调度和分派的基本单位，他是比进程更小的能独立运行的基本单位，线程自己基本上不拥有系统资源。</span><br><span class="line">在运行时，只是暂用一些计数器、寄存器和栈 。</span><br><span class="line"></span><br><span class="line">进程和线程的关系</span><br><span class="line"></span><br><span class="line">1. 一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程（通常说的主线程）。</span><br><span class="line">2. 资源分配给进程，同一进程的所有线程共享该进程的所有资源。</span><br><span class="line">3. 线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。</span><br><span class="line">4. 处理机分给线程，即真正在处理机上运行的是线程。</span><br><span class="line">5. 线程是指进程内的一个执行单元，也是进程内的可调度实体。</span><br><span class="line"></span><br><span class="line">二者之间的区别</span><br><span class="line"></span><br><span class="line">1. 调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位。</span><br><span class="line">2. 并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可以并发执行。</span><br><span class="line">3. 拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源。</span><br><span class="line"></span><br><span class="line">做个简单的比喻：进程=火车，线程=车厢</span><br><span class="line"></span><br><span class="line">线程在进程下行进（单纯的车厢无法运行）</span><br><span class="line">一个进程可以包含多个线程（一辆火车可以有多个车厢）</span><br><span class="line">不同进程间数据很难共享（一辆火车上的乘客很难换到另外一辆火车，比如站点换乘）</span><br><span class="line">同一进程下不同线程间数据很易共享（A车厢换到B车厢很容易）</span><br><span class="line">进程要比线程消耗更多的计算机资源（采用多列火车相比多个车厢更耗资源）</span><br><span class="line">进程间不会相互影响，一个线程挂掉将导致整个进程挂掉（一列火车不会影响到另外一列火车，但是如果一列火车上中间的一节车厢与前一节产生断裂，将影响后面的所有车厢）</span><br><span class="line">进程可以拓展到多机，进程最适合多核（不同火车可以开在多个轨道上，同一火车的车厢不能在行进的不同的轨道上）</span><br><span class="line">进程使用的内存地址可以上锁，即一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。（比如火车上的洗手间）－&quot;互斥锁&quot;</span><br><span class="line">进程使用的内存地址可以限定使用量（比如火车上的餐厅，最多只允许多少人进入，如果满了需要在门口等，等有人出来了才能进去）－“信号量”</span><br></pre></td></tr></table></figure><h2 id="局域网内使用ping-www-baidu-com时，使用了哪种协议"><a href="#局域网内使用ping-www-baidu-com时，使用了哪种协议" class="headerlink" title="局域网内使用ping www.baidu.com时，使用了哪种协议"></a>局域网内使用ping <a target="_blank" rel="noopener" href="http://www.baidu.com时,使用了哪种协议/">www.baidu.com时，使用了哪种协议</a></h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ping是应用层直接使用网络层ICMP的一个例子，它没有通过传输层的TCP或UDP。---计算机网络 谢希仁第七版第149页</span><br><span class="line"></span><br><span class="line">Ping是 ICMP 的一个重要应用，主要用来测试两台主机之间的连通性。</span><br><span class="line">Ping 发送的 IP 数据报封装的是无法交付的 UDP 用户数据报。</span><br></pre></td></tr></table></figure><h2 id="文件访问权限的设置和管理"><a href="#文件访问权限的设置和管理" class="headerlink" title="文件访问权限的设置和管理"></a>文件访问权限的设置和管理</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">u-g-o：表示用户-用户组-其他用户。</span><br><span class="line">a : 表示所有 用户，x : 执行权限，r：读权限，w：写权限。</span><br><span class="line"></span><br><span class="line">r(Read，读取，权限值为4)：对文件而言，具有读取文件内容的权限；对目录来说，具有浏览目 录的权限。</span><br><span class="line">w(Write,写入，权限值为2)：对文件而言，具有新增、修改文件内容的权限；对目录来说，具有删除、移动目录内文件的权限。</span><br><span class="line">x(eXecute，执行，权限值为1)：对文件而言，具有执行文件的权限；对目录了来说该用户具有进入目录的权限。</span><br><span class="line"></span><br><span class="line">例如：rwx rwx r-x = 775（4-2-1表示r-w-x）</span><br></pre></td></tr></table></figure><h2 id="正则竖线的作用"><a href="#正则竖线的作用" class="headerlink" title="正则竖线的作用"></a>正则竖线的作用</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(abc|def) 表示 字符串 或 匹配，只要符合任一字符串即可。</span><br><span class="line">拓展：</span><br><span class="line">?:表示匹配里面的字符串，但是不捕获。</span><br></pre></td></tr></table></figure><h2 id="中国ping美国服务器，一般至少要多久？"><a href="#中国ping美国服务器，一般至少要多久？" class="headerlink" title="中国ping美国服务器，一般至少要多久？"></a>中国ping美国服务器，一般至少要多久？</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">中美距离是半个地球，光一秒钟30万公里，绕地球7.5圈，1秒钟=1000毫秒，则绕地球半圈速度是1000/15=66毫秒，数据返回需要同样的时间 66+66 = 132毫秒(132ms)</span><br><span class="line"></span><br><span class="line">中国ping美国机房，则数据仅仅从海底光缆这头到那头，就已经需要133ms应答和传送时间了。加上双方到海缆之前经过的路由处理时间，中美服务器之间的ping值，最好的期望值，是180ms，一般来说小于300都是算不错的</span><br></pre></td></tr></table></figure><h2 id="对数据库MyISAM和InnoDB的理解"><a href="#对数据库MyISAM和InnoDB的理解" class="headerlink" title="对数据库MyISAM和InnoDB的理解"></a>对数据库MyISAM和InnoDB的理解</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">MyISAM索引文件和数据文件是分离的，索引文件仅保存记录所在页的指针（物理位置），通过这些地址来读取页，进而读取被索引的行。</span><br><span class="line"></span><br><span class="line">与 MyISAM相同的一点是，InnoDB 也采用 B+Tree这种数据结构来实现 B-Tree索引。而很大的区别在于，InnoDB 存储引擎采用“聚集索引”的数据存储方式实现B-Tree索引，所谓“聚集”，就是指数据行和相邻的键值紧凑地存储在一起，注意 InnoDB 只能聚集一个叶子页（16K）的记录（即聚集索引满足一定的范围的记录），因此包含相邻键值的记录可能会相距甚远</span><br><span class="line"></span><br><span class="line">区别：</span><br><span class="line"></span><br><span class="line">1. InnoDB 支持事务，MyISAM 不支持事务。这是 MySQL 将默认存储引擎从 MyISAM 变成 InnoDB 的重要原因之一；</span><br><span class="line"></span><br><span class="line">2. InnoDB 支持外键，而 MyISAM 不支持。对一个包含外键的 InnoDB 表转为 MYISAM 会失败；</span><br><span class="line"></span><br><span class="line">3. InnoDB 是聚集索引，MyISAM 是非聚集索引。聚簇索引的文件存放在主键索引的叶子节点上，因此 InnoDB 必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大。而 MyISAM 是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针。主键索引和辅助索引是独立的。</span><br><span class="line"></span><br><span class="line">4. InnoDB 不保存表的具体行数，执行 select count(*) from table 时需要全表扫描。而MyISAM 用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快；</span><br><span class="line"></span><br><span class="line">5. InnoDB 最小的锁粒度是行锁，MyISAM 最小的锁粒度是表锁。一个更新语句会锁住整张表，导致其他查询和更新都会被阻塞，因此并发访问受限。这也是 MySQL 将默认存储引擎从 MyISAM 变成 InnoDB 的重要原因之一；</span><br><span class="line"></span><br><span class="line">如何选择：</span><br><span class="line"></span><br><span class="line">1. 是否要支持事务，如果要请选择 InnoDB，如果不需要可以考虑 MyISAM；</span><br><span class="line"></span><br><span class="line">2. 如果表中绝大多数都只是读查询，可以考虑 MyISAM，如果既有读写也挺频繁，请使用InnoDB。</span><br><span class="line"></span><br><span class="line">3. 系统奔溃后，MyISAM恢复起来更困难，能否接受，不能接受就选 InnoDB；</span><br><span class="line"></span><br><span class="line">4. MySQL5.5版本开始Innodb已经成为Mysql的默认引擎(之前是MyISAM)，说明其优势是有目共睹的。如果你不知道用什么存储引擎，那就用InnoDB，至少不会差。</span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line"></span><br><span class="line">1. myisam查询效率更高，支持全文索引。innodb不支持全文索引，查询效率差myisam6-7倍。</span><br><span class="line"></span><br><span class="line">2. innodb支持事务，行锁，外键。myisam不支持。</span><br><span class="line"></span><br><span class="line">如果数据表涉及的存储数据多、查询多，用myisam，如文章表。如果数据表涉及业务逻辑多，增删改操作多，就用innodb，如订单表。</span><br></pre></td></tr></table></figure><h2 id="对闭包、装饰器、迭代器、深拷贝-浅拷贝、并发、协程的理解"><a href="#对闭包、装饰器、迭代器、深拷贝-浅拷贝、并发、协程的理解" class="headerlink" title="对闭包、装饰器、迭代器、深拷贝/浅拷贝、并发、协程的理解"></a>对闭包、装饰器、迭代器、深拷贝/浅拷贝、并发、协程的理解</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">闭包浅识：</span><br><span class="line"></span><br><span class="line">在python中，函数可以作为另一个函数的参数或返回值，可以赋给一个变量。函数可以嵌套定义，即在一个函数内部可以定义另一个函数，有了嵌套函数这种结构，便会产生闭包问题。</span><br><span class="line"></span><br><span class="line">闭包定义：如果在一个内部函数里，对在外部作用域（但不是在全局作用域）的变量进行引用，那么内部函数就被认为是闭包(closure)</span><br><span class="line"></span><br><span class="line">举个栗子：</span><br><span class="line"></span><br><span class="line">def outer(x):</span><br><span class="line">    def inner(y):</span><br><span class="line">        return x + y</span><br><span class="line">    return inner</span><br><span class="line">结合代码分析定义：</span><br><span class="line"></span><br><span class="line">如果在一个内部函数里 — inner()就是内部函数。</span><br><span class="line"></span><br><span class="line">对在外部作用域（但不是在全局作用域）的变量进行引用 — x就是被引用的变量，x在外部作用域，但不在全局作用域。</span><br><span class="line"></span><br><span class="line">那么内部函数就被认为是闭包 -- inner就是一个闭包。</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">装饰器浅识：</span><br><span class="line"></span><br><span class="line">装饰器本质上是一个Python函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，装饰器的返回值也是一个函数对象。</span><br><span class="line">有了装饰器，就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。</span><br><span class="line"></span><br><span class="line">内置装饰器：@staticmathod、@classmethod、@property</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">迭代器浅识：</span><br><span class="line"></span><br><span class="line">顾名思义，迭代器就是用于迭代操作（for 循环）的对象，它像列表一样可以迭代获取其中的每一个元素，任何实现了 __next__ 方法 （python2 是 next）的对象都可以称为迭代器。</span><br><span class="line"></span><br><span class="line">它与列表的区别在于，构建迭代器的时候，不像列表把所有元素一次性加载到内存，而是以一种延迟计算（lazy evaluation）方式返回元素，这正是它的优点。</span><br><span class="line">比如列表含有中一千万个整数，需要占超过400M的内存，而迭代器只需要几十个字节的空间。</span><br><span class="line">因为它并没有把所有元素装载到内存中，而是等到调用 next 方法时候才返回该元素（按需调用 call by need 的方式，本质上 for 循环就是不断地调用迭代器的next方法）</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">迭代器浅识：</span><br><span class="line"></span><br><span class="line">顾名思义，迭代器就是用于迭代操作（for 循环）的对象，它像列表一样可以迭代获取其中的每一个元素，任何实现了 __next__ 方法 （python2 是 next）的对象都可以称为迭代器。</span><br><span class="line"></span><br><span class="line">它与列表的区别在于，构建迭代器的时候，不像列表把所有元素一次性加载到内存，而是以一种延迟计算（lazy evaluation）方式返回元素，这正是它的优点。</span><br><span class="line">比如列表含有中一千万个整数，需要占超过400M的内存，而迭代器只需要几十个字节的空间。</span><br><span class="line">因为它并没有把所有元素装载到内存中，而是等到调用 next 方法时候才返回该元素（按需调用 call by need 的方式，本质上 for 循环就是不断地调用迭代器的next方法）</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">深拷贝/浅拷贝浅识：</span><br><span class="line"></span><br><span class="line">深拷贝是将对象本身复制给另一个对象，</span><br><span class="line">浅拷贝则是将对象的引用复制给另一个对象。</span><br><span class="line">所以当复制后的对象改变时，深拷贝的原对象值不会改变，而浅拷贝原对象的值会被改变。</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">并发浅识：</span><br><span class="line"></span><br><span class="line">实际开发中很多人会因为并发，并行，串行，同步，异步等名词搞混，搞不清楚这些名称的意思和之间对应的关系。其实这也是实际开发中必须掌握一些知识点。掌握和理解这些概念也有助于我们去更好去开发。</span><br><span class="line"></span><br><span class="line">并发和并行是即相似又有区别的两个概念，并行是指两个或者多个事件在同一时刻发生；而并发是指两个或多个事件在同一时间间隔内发生。</span><br><span class="line"></span><br><span class="line">并发：当有多个线程在操作时,如果系统只有一个CPU,则它根本不可能真正同时进行一个以上的线程，它只能把CPU运行时间划分成若干个时间段,再将时间 段分配给各个线程执行，在一个时间段的线程代码运行时，其它线程处于挂起状。.这种方式我们称之为并发(Concurrent)。</span><br><span class="line">并行：指两个或两个以上事件或活动在同一时刻发生。在多道程序环境下，并行性使多个程序同一时刻可在不同CPU上同时执行。（hadoop集群就是并行计算的）</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">协程浅识：</span><br><span class="line"></span><br><span class="line">由于GIL的存在，导致Python多线程性能甚至比单线程更糟。</span><br><span class="line">于是Python3.4 开始也支持协程。</span><br><span class="line"></span><br><span class="line">协程: 协程，又称微线程，纤程，英文名Coroutine。协程的作用，是在执行函数A时，可以随时中断，去执行函数B，然后中断继续执行函数A（可以自由切换）。但这一过程并不是函数调用（没有调用语句），这一整个过程看似像多线程，然而协程只有一个线程执行。</span><br><span class="line"></span><br><span class="line">协程是由程序主动控制切换，没有线程切换的开销，所以执行效率极高。</span><br><span class="line">对于IO密集型任务非常适用，如果是cpu密集型，推荐多进程+协程的方式。</span><br><span class="line"></span><br><span class="line">在Python3.4之后就内置了asyncio标准库，官方真正实现了协程这一特性。</span><br></pre></td></tr></table></figure><h2 id="TCP建立连接和释放连接的过程"><a href="#TCP建立连接和释放连接的过程" class="headerlink" title="TCP建立连接和释放连接的过程"></a>TCP建立连接和释放连接的过程</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">绝了...老生常谈..</span><br><span class="line">TCP三次握手建立连接，四次挥手释放链接。</span><br><span class="line"></span><br><span class="line">三次握手：</span><br><span class="line">1. client对Server发送给SYN(J)包，并进入SYN-SENT状态，等待Server的ACK回复</span><br><span class="line"></span><br><span class="line">2. Server收到client的SYN包后返回ACK(J+1)包和自己的SYN(K)包，并进入RECIVED状态，等待回复</span><br><span class="line"></span><br><span class="line">3. client接收到server的ACK(J+1)包后进入ESTABLISHED(连接成功)状态。然后根据收到的SYN(K)包对Server返回ASK(K+1)包。server收到以后也进入(连接成功)状态。</span><br><span class="line"></span><br><span class="line">到此，三次握手结束。客户端和服务端可以正常进行通信了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">四次挥手：</span><br><span class="line">1. client发送FIN(M)，此时进入FIN-WAIT-1状态(结束等待)</span><br><span class="line"></span><br><span class="line">2. server收到FIN(M)返回ACK(M+1)包，此时server也进入CLOSE-WAIT状态，client在整理也进入FIN-WAIT-2状态。</span><br><span class="line"></span><br><span class="line">3. server向client发送FIN(N)包，请求关闭连接，同时进入LAST-ACK状态。</span><br><span class="line"></span><br><span class="line">4. client收到FIN(N)包进入TIME-WAIT状态。向server发送ACK(N+1)包，Server收到后进入CLOSE状态。client等待时间内若没收到server其他回复就进入CLOSE状态。</span><br><span class="line"></span><br><span class="line">到此，四次挥手结束。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本以为并不会有多少的，结果一整理，居然有这么多。<br>好多概念细节性的东西，要去记了。<br>光记住还不够，还得会自己组织语言去表述他们。<br>很多东西只是做了很浅的整理，没过于深入的去探究。<br>这需要一个积累的过程，希望以后能更多的用到它们，来加深印象吧。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔心得 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：字典生成式</title>
      <link href="article/49171/"/>
      <url>article/49171/</url>
      
        <content type="html"><![CDATA[<p>知道有这么玩意，但是隔了一段时间不用，又容易忘记它的语法，又得网上查一遍。<br>这次就自己用博客好好记下来。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10  </span><br><span class="line">IDE: JetBrains Python 2018.2.4 x64  </span><br><span class="line">语言: Pytthon 3.6.5  </span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>用一串简短的代码代替冗长判断嵌套，让代码变得更加简洁明了。<br>同类的还有列表生成器，而字典生成器相对来说用得少了一些。</p><h1 id="字典生成式"><a href="#字典生成式" class="headerlink" title="字典生成式"></a>字典生成式</h1><p>字典生成式的语法格式：</p><blockquote><p>dictG = {key: value for (key, value) in iterable}  </p></blockquote><p>其中iterable为可迭代的对象，比如list、tuple等</p><p>尝试使用字典生成式完成字典键值位置对调操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">old_dict = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">new_dict = &#123;v: k <span class="keyword">for</span> k,v <span class="keyword">in</span> old_dict.items()&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;1: &#x27;x&#x27;, 2: &#x27;y&#x27;, 3: &#x27;z&#x27;&#125;</span><br></pre></td></tr></table></figure><p>尝试使用字典生成式完成list、tuple组成键值对的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list_1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">tuple_2 = (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">new_dict = &#123;v: k <span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">zip</span>(list_1,tuple_2)&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3, &#x27;d&#x27;: 4, &#x27;e&#x27;: 5, &#x27;f&#x27;: 6, &#x27;g&#x27;: 7&#125;</span><br></pre></td></tr></table></figure><p>尝试结合if判断来写字典生成式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">old_dict = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">new_dict = &#123;k: v <span class="keyword">if</span> v == <span class="number">2</span> <span class="keyword">else</span> <span class="literal">None</span> <span class="keyword">for</span> k,v <span class="keyword">in</span> old_dict.items()&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;x&#x27;: None, &#x27;y&#x27;: 2, &#x27;z&#x27;: None&#125;</span><br></pre></td></tr></table></figure><p>尝试字典生成式和字典生成式嵌套</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">old_dict = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">new_dict = &#123;k: v <span class="keyword">if</span> v == <span class="number">2</span> <span class="keyword">else</span> <span class="literal">None</span> <span class="keyword">for</span> k,v <span class="keyword">in</span> &#123;v: k <span class="keyword">if</span> v == <span class="number">2</span> <span class="keyword">else</span> <span class="literal">None</span> <span class="keyword">for</span> k,v <span class="keyword">in</span> old_dict.items()&#125;.items()&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;1: None, 2: None, 3: None&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>字典生成式与列表生成式的用法基本相同</li><li>网上博客把这个称之为字典生成器，我认为称为字典生成式更准确，用来区分生成器</li><li>字典生成式等效于一个字典，是可以进行嵌套的</li></ol>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python算法：递归</title>
      <link href="article/30249/"/>
      <url>article/30249/</url>
      
        <content type="html"><![CDATA[<p>递归算法，说不出来对它是种什么样的感受。<br>硬要描述一下大概就是又爱又恨吧。<br>给人的感觉就像给脑子里塞了个回旋加速器，很猛，但是很晕。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: JetBrains Python 2018.2.4 x64  </span><br><span class="line">语言: Python 3.66  </span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>多层级数据的结构化处理、文件列表管理、算法…balabala<br>递归的应用场景，是真的很多。</p><h1 id="步步实现-递归"><a href="#步步实现-递归" class="headerlink" title="步步实现 递归"></a>步步实现 递归</h1><p>最原始的递归函数,自己调用自己，无限循环,调用栈叠起来~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursive_count_Decrement</span>(<span class="params">v</span>):</span></span><br><span class="line">    print(v)</span><br><span class="line">    <span class="keyword">return</span> recursive_count_Decrement(v)</span><br></pre></td></tr></table></figure><p>添加个跳出无限循环调用的基线条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursive_count_Decrement</span>(<span class="params">v</span>):</span></span><br><span class="line">    print(v)</span><br><span class="line">    <span class="keyword">if</span> v &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> recursive_count_Decrement(v)</span><br></pre></td></tr></table></figure><p>模拟一个情景，我有一个硬盘，盘里有多个文件夹，文件夹里还有文件夹，然后其中只有一个文件夹里有一坨狗屎的图片，其余都是空文件。<br>那么，要找到这坨‘狗屎’，要怎么办。<br>思路：</p><blockquote><p>检查文件夹里的每一样东西<br>有‘狗屎’结束 or 里面还有文件夹，钻进去继续全检查</p></blockquote><p>用伪代码来描述一下：（不能直接运行）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursive_search</span>(<span class="params">folder</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> folder:</span><br><span class="line">        <span class="keyword">if</span> i.<span class="built_in">type</span> == <span class="string">&#x27;folder&#x27;</span>:</span><br><span class="line">            recursive_search(folder)    <span class="comment"># 此处递归</span></span><br><span class="line">        <span class="keyword">elif</span> i.<span class="built_in">type</span> == <span class="string">&#x27;goushi&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;找到了！&#x27;</span></span><br></pre></td></tr></table></figure><p>emmm，逻辑非常清晰233<br>当然，python实现文件夹递归那就不用这么麻烦了，网上的写法很多尤其是用os.walk方法的，就已经足够了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>递归只是为了让解决方案更清晰，并没有性能上的优势。<br>有些情况下，使用循环的性能更好。<br>根据情况和需求来选择更重要。</p><p>简单来说，递归函数就是自己调用自己，然后再给该函数设置一个基线条件让它从无限循环调用中跳转出来。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python算法：归并排序</title>
      <link href="article/60686/"/>
      <url>article/60686/</url>
      
        <content type="html"><![CDATA[<p>最近准备去找工作，时隔几年又要把在学校时代压床底的算法掏出来吹吹灰尘了，真有种朝花夕拾的感觉…哈哈哈哈<br>毕竟如果面试要是写不出来，那真是太尴尬了。<br>写那么一波插归并序找找感觉2333</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: JetBrains Python 2018.2.4 x64  </span><br><span class="line">语言: Python 3.66  </span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>比较高端的一种排序方式，在做排序的时候是个不错的选择。<br>在我看来，归并和快速两种排序，在实际开发用到了，都是挺有逼格的。</p><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>在归并排序的时候，将数组不断的拆分为两半，直到数据只剩一个的时候，然后再按照大小顺序将拆分的数据组合起来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span>(<span class="params">nums</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line">    mid = <span class="built_in">len</span>(nums) // <span class="number">2</span></span><br><span class="line">    left = merge_sort(nums[:mid])</span><br><span class="line">    right = merge_sort(nums[mid:])</span><br><span class="line">    <span class="keyword">return</span> merge(left, right)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">left, right</span>):</span></span><br><span class="line">    temp = []</span><br><span class="line">    left_p, right_p = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> left_p &lt; <span class="built_in">len</span>(left) <span class="keyword">and</span> right_p &lt; <span class="built_in">len</span>(right):</span><br><span class="line">        <span class="keyword">if</span> left[left_p] &lt; right[right_p]:</span><br><span class="line">            temp.append(left[left_p])</span><br><span class="line">            left_p += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp.append(right[right_p])</span><br><span class="line">            right_p += <span class="number">1</span></span><br><span class="line">    temp += (left[left_p:])</span><br><span class="line">    temp += (right[right_p:])</span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    numbers = [<span class="number">6</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">14</span>]</span><br><span class="line">    numbers = merge_sort(numbers)</span><br><span class="line">    print(numbers)</span><br></pre></td></tr></table></figure><p>拆成多个函数来实现，方便理解。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>对于分别有序的两个数组，通过每次取出一个数据比较，将较小的那个放到新的数组中，较大的那个等待下次继续比较，就这样一直取，比较，取，比较，直到两个数组的数都放在了新的数组中。返回新的数组。</li><li>大体的流程还是通过递归实现的，其实大部分分治的算法都是通过递归搞定的，方便理解。</li><li>就效率而言，归并排序是六种排序中时间复杂度最好的，即使是最差情况，都是O(nlogn)，不过由于归并排序需要额外的空间，所以也是一种拿空间换时间的策略。</li></ol>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python算法：冒泡排序</title>
      <link href="article/18215/"/>
      <url>article/18215/</url>
      
        <content type="html"><![CDATA[<p>最近准备去找工作，时隔几年又要把在学校时代压床底的算法掏出来吹吹灰尘了，真有种朝花夕拾的感觉…哈哈哈哈<br>毕竟如果面试要是写不出来，那真是太尴尬了。<br>写那么一波冒泡排序找找感觉2333</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: JetBrains Python 2018.2.4 x64  </span><br><span class="line">语言: Python 3.66  </span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>听名字就很萌的算法，也是比较简单的一种。<br>好像是大学最先接触的算法？<br>我已经记不真切了又好像选择排序才是第一个学..<br>总之要用到的啦。</p><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span>(<span class="params">nums</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):  <span class="comment"># 找出一个数</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)-i-<span class="number">1</span>):  <span class="comment"># 找出这个数相邻的下一个数</span></span><br><span class="line">            <span class="keyword">if</span> nums[j+<span class="number">1</span>] &gt; nums[j]: <span class="comment"># 比较相邻的两个数谁大</span></span><br><span class="line">                nums[j+<span class="number">1</span>], nums[j] = nums[j], nums[j+<span class="number">1</span>] <span class="comment"># 如果后一个数比前一个数大，他们对调位置</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li><p>从第一个开始每次都比较相邻的两个数，如果发现顺序不对，就把两个数交换一下，直到最后一个。这个时候，最大的数自然而然就跑到最后一位上面去了。</p></li><li><p>第二次的时候，也从第一个开始，不过只需要循环到n-2处就行了（因为n-1处经过第一次洗礼已经时最大了嘛。）</p></li><li><p>依此类推，循环n次，整个数组就会变成有序的了。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python算法：二分查找巩固</title>
      <link href="article/45336/"/>
      <url>article/45336/</url>
      
        <content type="html"><![CDATA[<p>最近准备去找工作，时隔几年又要把在学校时代压床底的算法掏出来吹吹灰尘了，真有种朝花夕拾的感觉…哈哈哈哈<br>毕竟如果面试要是写不出来，那真是太尴尬了。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: JetBrains Python 2018.2.4 x64  </span><br><span class="line">语言: Python 3.66  </span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我就说一句“要啥自行车？”。二分查找这玩意是啥查一查不是大把多解释的嘛？哈哈哈哈</p><p>算了，还是认真说一说吧。</p><h1 id="使用情景"><a href="#使用情景" class="headerlink" title="使用情景"></a>使用情景</h1><p>这并不难理解。举个例子:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">我要查字典中的一个汉字，“哦”。</span><br><span class="line">如果我按汉语拼音首字母从A一直翻到“哦”的汉语拼音首字母O，那将会是麻烦的一件事。</span><br><span class="line">这种时候，一般都会从字典的后半部分开始找会比较快。</span><br><span class="line">为什么呢？</span><br><span class="line">因为我们都知道字典的字母排序是有规律的，而O在26个字母后半部分，优先从后半部分开始找比从头A开始找更有效率。</span><br><span class="line">一半一半的排除，不断的缩小查找范围直到锁定目标，顾名思义这个就叫 二分查找 啦。</span><br></pre></td></tr></table></figure><h1 id="有序列表-二分查找实现"><a href="#有序列表-二分查找实现" class="headerlink" title="有序列表 二分查找实现"></a>有序列表 二分查找实现</h1><p>在这里使用Python实现二分查找,代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span>(<span class="params">tempList, tempItem</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    二分查找</span></span><br><span class="line"><span class="string">    tempList：列表，被查找的列表对象</span></span><br><span class="line"><span class="string">    tempItem：int，需要查找的元素</span></span><br><span class="line"><span class="string">    range_min：int，范围最小值</span></span><br><span class="line"><span class="string">    range_max：int，范围最大值</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    range_min = <span class="number">0</span>  <span class="comment"># 初始值，列表下标首位</span></span><br><span class="line">    range_max = <span class="built_in">len</span>(tempList) - <span class="number">1</span>  <span class="comment"># 初始值，列表下标最末位</span></span><br><span class="line">    times = <span class="number">0</span>  <span class="comment"># 初始值，统计循环查找次数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> range_min &lt;= range_max:  <span class="comment"># 只要范围没有缩小到剩唯一值就继续循环</span></span><br><span class="line"></span><br><span class="line">        times += <span class="number">1</span>  <span class="comment"># 记录一次查找</span></span><br><span class="line"></span><br><span class="line">        mid = <span class="built_in">int</span>((range_min + range_max) / <span class="number">2</span>)  <span class="comment"># 求出列表下标中间值</span></span><br><span class="line">        midItem = tempList[mid]  <span class="comment"># 获取列表中间下表对应的元素</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> midItem == tempItem:  <span class="comment"># 找到了,跳出循环，返回值</span></span><br><span class="line">            <span class="keyword">return</span> midItem,times</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> midItem &gt; tempItem:  <span class="comment"># 中间值大于目标元素</span></span><br><span class="line">            range_max = mid - <span class="number">1</span>  <span class="comment"># 则 范围最大值缩小到此中间值</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 否则 说明中间值小于目标元素</span></span><br><span class="line">            range_min = mid + <span class="number">1</span>  <span class="comment"># 则 范围最小值缩小到此中间值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    myLlist = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>)) <span class="comment"># 生成1~100的有序数字列表</span></span><br><span class="line">    print(myLlist)</span><br><span class="line">    myItem = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入一个1~100以内任意整数：&#x27;</span>))</span><br><span class="line">    res,mytimes = binary_search(myLlist,myItem)</span><br><span class="line">    print(<span class="string">&#x27;经过 %s 次 二分查找 找到了 %s &#x27;</span>%(mytimes,res))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]</span><br><span class="line">输入一个1~100以内任意整数：55</span><br><span class="line">经过 7 次 二分查找 找到了 55 </span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>二分查找的速度比简单查找绝对快得多。<br>从头遍历到尾的查找方式是既耗时又浪费资源的，以后尽量避免。<br>在我看来二分查找有点快速排序是有点相似的，不过一个是查找方法，一个是排序算法</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python算法：选择排序</title>
      <link href="article/56786/"/>
      <url>article/56786/</url>
      
        <content type="html"><![CDATA[<p>选择排序、选择排序、选择排序、选择排序、选择排序、选择排序，python实现的选择排序。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: JetBrains Python 2018.2.4 x64  </span><br><span class="line">语言: Python 3.66  </span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>选择排序，要理解首先得明白什么玩意是数组、什么玩意是链表以及大O表示法~<br>不知道先去百度一下，网上大把多，不解释了。<br>说真的，面试的时候真的会有面试官问我选择排序吗？不一般都是问快排和冒排么？emmmm….  </p><h1 id="选择排序实现"><a href="#选择排序实现" class="headerlink" title="选择排序实现"></a>选择排序实现</h1><p>为了方便理解，拆分成两个函数来表示，手动实现。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_min</span>(<span class="params">tempArray</span>):</span></span><br><span class="line">    tempMin = tempArray[<span class="number">0</span>]  <span class="comment"># 用来存最小值的</span></span><br><span class="line">    tempMinIndex = <span class="number">0</span>  <span class="comment"># 用来存最小值的下标（索引）</span></span><br><span class="line">    print(<span class="string">&#x27;旧列表：%s&#x27;</span>%tempArray)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(tempArray)):   <span class="comment"># 遍历除索引0以外的</span></span><br><span class="line">        <span class="keyword">if</span> tempArray[i] &lt; tempMin:</span><br><span class="line">            tempMin = tempArray[i]</span><br><span class="line">            tempMinIndex = i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tempMinIndex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span>(<span class="params">tempArray</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    选择排序</span></span><br><span class="line"><span class="string">    :param tempArray: 需要排列的数组</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    newArray = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tempArray)):</span><br><span class="line">        tempMin = find_min(tempArray)   <span class="comment"># 选择数组中最小的元素，并加入新数组</span></span><br><span class="line">        newArray.append(tempArray.pop(tempMin))</span><br><span class="line">        print(<span class="string">&#x27;新列表：%s&#x27;</span>%newArray)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newArray</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(<span class="string">&#x27;排序完成：%s&#x27;</span>%selection_sort([<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">旧列表：[5, 7, 2, 8, 2, 9, 3, 6, 4, 0]</span><br><span class="line">新列表：[0]</span><br><span class="line">旧列表：[5, 7, 2, 8, 2, 9, 3, 6, 4]</span><br><span class="line">新列表：[0, 2]</span><br><span class="line">旧列表：[5, 7, 8, 2, 9, 3, 6, 4]</span><br><span class="line">新列表：[0, 2, 2]</span><br><span class="line">旧列表：[5, 7, 8, 9, 3, 6, 4]</span><br><span class="line">新列表：[0, 2, 2, 3]</span><br><span class="line">旧列表：[5, 7, 8, 9, 6, 4]</span><br><span class="line">新列表：[0, 2, 2, 3, 4]</span><br><span class="line">旧列表：[5, 7, 8, 9, 6]</span><br><span class="line">新列表：[0, 2, 2, 3, 4, 5]</span><br><span class="line">旧列表：[7, 8, 9, 6]</span><br><span class="line">新列表：[0, 2, 2, 3, 4, 5, 6]</span><br><span class="line">旧列表：[7, 8, 9]</span><br><span class="line">新列表：[0, 2, 2, 3, 4, 5, 6, 7]</span><br><span class="line">旧列表：[8, 9]</span><br><span class="line">新列表：[0, 2, 2, 3, 4, 5, 6, 7, 8]</span><br><span class="line">旧列表：[9]</span><br><span class="line">新列表：[0, 2, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">排序完成：[0, 2, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>排序算法里，选择排序比较灵巧，但是算是速度挺垫底的。<br>总之，比直接一遍遍的遍历这个列表来排序要快得多。<br>如果配合上python自带的max和min方法会方便很多2333，但是那样就没意义了。  </p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python算法：快速排序</title>
      <link href="article/14843/"/>
      <url>article/14843/</url>
      
        <content type="html"><![CDATA[<p>最近准备去找工作，时隔几年又要把在学校时代压床底的算法掏出来吹吹灰尘了，真有种朝花夕拾的感觉…哈哈哈哈<br>毕竟如果面试要是写不出来，那真是太尴尬了。<br>写那么一波快速排序找找感觉2333<br>也许有人会问，我为啥把所有算法直接写在一起。<br>我就不！因为这样写好查啊…而且不想把自己的博文写得那么冗长。<br>开面见山，直奔主题。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: JetBrains Python 2018.2.4 x64  </span><br><span class="line">语言: Python 3.66  </span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>快速排序是一种常用得排序算法，比选择排序快得多。<br>例如：C语言标准库得函数qsort的实现就是快速排序。<br>快速排序也使用了D&amp;C。<br>其实我也有点郁闷，我都用了Python还折腾这个干嘛..<br>Python的sorted排序，用的是狂霸酷拽Dior的TimeSort算法。至于TimeSort算法有多牛逼，自己去百度吧。<br>Python有这个原生工具函数在，还要啥自行车啊。23333<br>但是，没办法嘛，面试官要问的咯。  </p><h1 id="步步实现-快速排序"><a href="#步步实现-快速排序" class="headerlink" title="步步实现 快速排序"></a>步步实现 快速排序</h1><p>对排序算法来说，最简单的数组是啥样的？那就是根本不需要排序的数组。<br>比如：空数组或只有一个元素的数组，这种还排个屁。<br>于是我先排除这种情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span>(<span class="params">tempArray</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    快速排序</span></span><br><span class="line"><span class="string">    :param tempArray: 需要被排序的数组</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(tempArray)&lt;<span class="number">2</span>:    <span class="comment"># 排除空数组和单元素数组</span></span><br><span class="line">        <span class="keyword">return</span> tempArray</span><br></pre></td></tr></table></figure><p>包含两个元素的数组，也不用多说了，比较一下大小互换一下位置就成，不赘述了。<br>如果包含多个元素,那就要加上递归操作来搞一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span>(<span class="params">tempArray</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    快速排序</span></span><br><span class="line"><span class="string">    :param tempArray: 需要被排序的数组</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(tempArray)&lt;<span class="number">2</span>:    <span class="comment"># 排除空数组和单元素数组</span></span><br><span class="line">        <span class="keyword">return</span> tempArray</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pivot = tempArray[<span class="number">0</span>]    <span class="comment"># 取出数组第一个元素，作为基准值，进行递归操作</span></span><br><span class="line">        less = [i <span class="keyword">for</span> i <span class="keyword">in</span> tempArray[<span class="number">1</span>:] <span class="keyword">if</span> i &lt;= pivot]   <span class="comment"># 小于等于基准值的元素塞到一起作为子数组</span></span><br><span class="line">        bigs = [i <span class="keyword">for</span> i <span class="keyword">in</span> tempArray[<span class="number">1</span>:] <span class="keyword">if</span> i &gt; pivot]   <span class="comment"># 大于基准值的元素塞到一起作为子数组</span></span><br><span class="line">        <span class="keyword">return</span> quick_sort(less)+[pivot]+quick_sort(bigs)    <span class="comment"># 我返回我自己，递归，拼接数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(quick_sort([<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">38</span>,<span class="number">9</span>,<span class="number">45</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>]))</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">38</span>, <span class="number">45</span>]</span><br></pre></td></tr></table></figure><p>上面的快速排序中使用的是列表头一个元素作为基准值，这是为了方便理解。<br>但是你会发现如果你要处理有序的数组，每一次都是用数组第一个元素来作为基准值，那么导致其中的一个子集始终是空集。<br>这样就白瞎了那么多次递归，调用栈的高度也是相当大的。<br>在这里，若总是将数值的中间值作为基准值，那么数组始终都能对半分，就可以减少递归的调用次数。<br>魔改一下上面的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort_2</span>(<span class="params">tempArray</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    快速排序</span></span><br><span class="line"><span class="string">    :param tempArray: 需要被排序的数组</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(tempArray)&lt;<span class="number">2</span>:    <span class="comment"># 排除空数组和单元素数组</span></span><br><span class="line">        <span class="keyword">return</span> tempArray</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pivot = choice(tempArray)    <span class="comment"># 随机选择一个元素，作为基准值，进行递归操作</span></span><br><span class="line">        less = [i <span class="keyword">for</span> i <span class="keyword">in</span> tempArray <span class="keyword">if</span> i &lt; pivot]   <span class="comment"># 小于基准值的元素塞到一起作为子数组</span></span><br><span class="line">        bigs = [i <span class="keyword">for</span> i <span class="keyword">in</span> tempArray <span class="keyword">if</span> i &gt; pivot]   <span class="comment"># 大于基准值的元素塞到一起作为子数组</span></span><br><span class="line">        <span class="keyword">return</span> quick_sort_2(less)+[pivot]*tempArray.count(pivot)+quick_sort_2(bigs)    <span class="comment"># 我返回我自己，递归，拼接数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(quick_sort_2([<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">38</span>,<span class="number">9</span>,<span class="number">45</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>]))</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 4, 5, 6, 7, 7, 8, 9, 9, 38, 45]</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>快速排序先要理解基准值是干什么用的。<br>实现快速排序时，随机选择元素作为基准值会更好些。  </p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python算法：插入排序</title>
      <link href="article/53727/"/>
      <url>article/53727/</url>
      
        <content type="html"><![CDATA[<p>最近准备去找工作，时隔几年又要把在学校时代压床底的算法掏出来吹吹灰尘了，真有种朝花夕拾的感觉…哈哈哈哈<br>毕竟如果面试要是写不出来，那真是太尴尬了。<br>写那么一波插入排序找找感觉2333</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: JetBrains Python 2018.2.4 x64  </span><br><span class="line">语言: Python 3.66  </span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>基础排序算法的一种咯，回忆一下也好。那要万一用上了呢？而且它是希尔排序的基础..当然希尔排序我也忘得差不多了。</p><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span>(<span class="params">nums</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(nums)):   <span class="comment"># 从第二个元素索引开始遍历</span></span><br><span class="line">        temp = nums[i]  <span class="comment"># 取出对应索引的元素</span></span><br><span class="line">        last = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):    <span class="comment"># 倒着取值，与之前插过的元素逐一比对</span></span><br><span class="line">            <span class="keyword">if</span> nums[j] &gt; temp:  <span class="comment"># 若取出的元素前边的元素小，则对换位置</span></span><br><span class="line">                nums[j + <span class="number">1</span>] = nums[j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                last = j + <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        nums[last] = temp</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>第一个数肯定是有序的，然后从第二个开始，从此往后遍历，把这个数插入到合适的位置，比第二个数大的一次往后面移动。</li><li>第二个数移动正确的位置之后，前两个数就是有序的，依次把后面的数按照刚才的方法插入到合适的位置，整个数组就变成有序的了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：Ubuntu18.04安装mongodb数据库</title>
      <link href="article/6410/"/>
      <url>article/6410/</url>
      
        <content type="html"><![CDATA[<p>距离上一次使用mongodb数据库了也有很长一段时间，2016年。<br>再不用用，感觉都要忘记怎么用了233，<br>而且应该也有很多更新，这次正好项目也需要。来安装一下，并且做个记录！  </p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04LTS</span><br><span class="line">Software: MongoDB 4.0 Linux x64</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近申请试着申请了oneDriver的云盘，弄到手了20TB，所以打算搭建的方便管理它们的一个web管理平台。<br>在这里，经过一番筛选，我排除了不太符合自己需求的几个项目：oneIndex（用的人最多,但是要装php）、pyOne(使用的仍然是python2)。<br>采用<a target="_blank" rel="noopener" href="https://github.com/Hackxiaoya/CuteOne">CuteOne</a>.<br>这个项目，使用的是python3,我也不用装那么多个语言编译器了，而且操作界面也很符合我的审美！<br>其中这个项目它依赖于mongoDB，所以安装它，并部署。</p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>这是个容易让人掉坑的地方。（我掉进去了）<br><a target="_blank" rel="noopener" href="https://docs.mongodb.com/manual/administration/production-notes/">mongDB 环境的支持</a><br>从mongDB官网的说明文档我们可以看到：<br><img src= "/customize/img/loading.gif" data-lazy-src="1.png" alt="1.png"><br>目前也就是说无论是社区版还是企业版的mongoDB 4.0以下版本都不支持Ubuntu18了，如果装错版本的话，会有奇怪的问题出现。</p><h1 id="mongoDB在Linux-Ubuntu18-04中安装"><a href="#mongoDB在Linux-Ubuntu18-04中安装" class="headerlink" title="mongoDB在Linux Ubuntu18.04中安装"></a>mongoDB在Linux Ubuntu18.04中安装</h1><p>安装办法一般分为两种用：</p><ol><li>从官网下载离线包安装</li><li>直接通过Ubuntu终端输入apt命令来安装</li></ol><p>由于以前尝试过使用离线包安装了，本次打算通过命令行在终端中实现安装，并以此为例。</p><p>网上大部分的博客，都比较陈旧了关于安装mongodb的文章，这次就以<a target="_blank" rel="noopener" href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/">官方网站</a>的文档安装步骤来操作。<br>以官方文档为准，绝大多数都没有问题！如果看本文让你无法安装成功，那说明情况出现了变化，所以请自己去官网看最新的说明。</p><ol><li><p>导入包管理系统使用的公钥</p><blockquote><p>sudo apt-key adv –keyserver hkp://keyserver.ubuntu.com:80 –recv 9DA31620334BD75D9DCB49F368818C72E52529D4</p></blockquote></li><li><p>为MongoDB创建一个列表文件</p><blockquote><p>echo “deb [ arch=amd64 ] <a target="_blank" rel="noopener" href="https://repo.mongodb.org/apt/ubuntu">https://repo.mongodb.org/apt/ubuntu</a> bionic/mongodb-org/4.0 multiverse” | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list</p></blockquote></li><li><p>重新加载本地包数据库</p><blockquote><p>sudo apt-get update</p></blockquote></li><li><p>安装MongoDB包（二选一）<br>安装最新稳定版</p><blockquote><p>sudo apt-get install -y mongodb-org</p></blockquote></li></ol><p>安装指定版本</p><blockquote><p>sudo apt-get install -y mongodb-org=4.0.10 mongodb-org-server=4.0.10 mongodb-org-shell=4.0.10 mongodb-org-mongos=4.0.10 mongodb-org-tools=4.0.10</p></blockquote><p>我根据自己的需要，选择的是第二种..到这一步做完，就已经完成基础的安装操作。</p><h1 id="mongoDB在Linux-Ubuntu18-04中的基础配置"><a href="#mongoDB在Linux-Ubuntu18-04中的基础配置" class="headerlink" title="mongoDB在Linux Ubuntu18.04中的基础配置"></a>mongoDB在Linux Ubuntu18.04中的基础配置</h1><p>我喜欢一步到位，在启动mongDB之前，我要先把配置文件配置好。</p><h2 id="现在要做的是以下几件事："><a href="#现在要做的是以下几件事：" class="headerlink" title="现在要做的是以下几件事："></a>现在要做的是以下几件事：</h2><ul><li>创建一个目录并且授予mongDB这个目录读写权限，用于存储mongoDB的数据库文件</li><li>创建一个目录并且授予mongDB这个目录读写权限，用于存放mongoDB的日志文件</li><li>创建一个目录并且授予mongDB这个目录读写权限，用于存放mongoDB的后台运行pid文件</li><li>修改配置文件，通过配置文件启动mongoDB</li></ul><h2 id="为什么我要做这些？"><a href="#为什么我要做这些？" class="headerlink" title="为什么我要做这些？"></a>为什么我要做这些？</h2><ol><li>好管理</li><li>不授予读写权限，mongoDB启动时会报错，这个一般可以在 /var/log/mongodb/mongod.log 看到</li><li>用配置文件启动更加工整，可以避免一堆冗长的命令行参数看着眼疼，还容易写错</li></ol><h2 id="创建有关目录并授权"><a href="#创建有关目录并授权" class="headerlink" title="创建有关目录并授权"></a>创建有关目录并授权</h2><blockquote><p>sudo mkdir -p /data/db/mongodb/<br>sudo mkdir -p /var/log/mongodb/<br>sudo chmod -R 755 /data/db/mongodb/<br>sudo chmod -R 755 /var/log/mongodb/  </p></blockquote><p>可选的操作：<br>默认的mongoDB配置文件一般都在/etc/mongod.conf<br>如果有个性化的mongoDB配置文件，就统一放在这里</p><blockquote><p>sudo mkdir -p /data/db/conf/<br>sudo chmod -R 755 /data/db/conf/  </p></blockquote><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><blockquote><p>sudo vim /etc/mongod.conf 编辑以下内容</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   http://docs.mongodb.org/manual/reference/configuration-options/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Where and how to store data.</span></span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/db/mongodb/</span><br><span class="line">  journal:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line"><span class="comment">#  engine:</span></span><br><span class="line"><span class="comment">#  mmapv1:</span></span><br><span class="line"><span class="comment">#  wiredTiger:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># where to write logging data.</span></span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: <span class="literal">true</span></span><br><span class="line">  path: /var/<span class="built_in">log</span>/mongodb/mongod.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># network interfaces</span></span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 0.0.0.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># how the process runs</span></span><br><span class="line">processManagement:</span><br><span class="line">  fork: <span class="literal">true</span>  <span class="comment"># fork and run in background</span></span><br><span class="line">  pidFilePath: /data/db/conf/mongod.pid  <span class="comment"># location of pidfile</span></span><br><span class="line">  timeZoneInfo: /usr/share/zoneinfo</span><br><span class="line"></span><br><span class="line"><span class="comment"># security:</span></span><br><span class="line">  <span class="comment"># authorization:enabled</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#operationProfiling:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#replication:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sharding:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Enterprise-Only Options:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#auditLog:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#snmp:</span></span><br></pre></td></tr></table></figure><p>保存退出，基本配置到此完成。</p><h1 id="mongoDB在Ubuntu18-的使用"><a href="#mongoDB在Ubuntu18-的使用" class="headerlink" title="mongoDB在Ubuntu18 的使用"></a>mongoDB在Ubuntu18 的使用</h1><ul><li>启动mongoDB（分服务端启动和客户端启动）<br>必须先启动服务端，客户端才能正常使用。<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2></li></ul><ol><li>服务端启动<blockquote><p>mongod –config /etc/mongod.conf # “/etc/mongod.conf” 为配置文件路径，根据自己的配置文件修改</p></blockquote></li></ol><p>或者</p><blockquote><p>sudo service mongod start</p></blockquote><p>运行成功以后：<br><img src= "/customize/img/loading.gif" data-lazy-src="2.png" alt="2.png"></p><ol start="2"><li>服务端关闭<blockquote><p>mongod –config /etc/mongod.conf –shutdown</p></blockquote></li></ol><p>或者</p><blockquote><p>sudo service mongod stop</p></blockquote><ol start="3"><li>服务端重启<blockquote><p>sudo service mongod restart</p></blockquote></li></ol><p>4, 服务端状态检查</p><blockquote><p>sudo netstat -tunlp | grep mongod</p></blockquote><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ol><li>登陆客户端<blockquote><p>mongo</p></blockquote></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">xx@xx:/usr/<span class="built_in">local</span>$ mongo</span><br><span class="line">MongoDB shell version v4.0.10</span><br><span class="line">connecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb</span><br><span class="line">Implicit session: session &#123; <span class="string">&quot;id&quot;</span> : UUID(<span class="string">&quot;c424cadd-e847-4973-adfb-6e15e4684689&quot;</span>) &#125;</span><br><span class="line">MongoDB server version: 4.0.10</span><br><span class="line">Server has startup warnings: </span><br><span class="line">2019-06-08T14:27:52.771+0800 I STORAGE  [initandlisten] </span><br><span class="line">2019-06-08T14:27:52.772+0800 I STORAGE  [initandlisten] ** WARNING: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine</span><br><span class="line">2019-06-08T14:27:52.772+0800 I STORAGE  [initandlisten] **          See http://dochub.mongodb.org/core/prodnotes-filesystem</span><br><span class="line">2019-06-08T14:27:59.524+0800 I CONTROL  [initandlisten] </span><br><span class="line">2019-06-08T14:27:59.524+0800 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled <span class="keyword">for</span> the database.</span><br><span class="line">2019-06-08T14:27:59.524+0800 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.</span><br><span class="line">2019-06-08T14:27:59.524+0800 I CONTROL  [initandlisten] </span><br><span class="line">---</span><br><span class="line">Enable MongoDB<span class="string">&#x27;s free cloud-based monitoring service, which will then receive and display</span></span><br><span class="line"><span class="string">metrics about your deployment (disk utilization, CPU, operation statistics, etc).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The monitoring data will be available on a MongoDB website with a unique URL accessible to you</span></span><br><span class="line"><span class="string">and anyone you share the URL with. MongoDB may use this information to make product</span></span><br><span class="line"><span class="string">improvements and to suggest MongoDB products and deployment options to you.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">To enable free monitoring, run the following command: db.enableFreeMonitoring()</span></span><br><span class="line"><span class="string">To permanently disable this reminder, run the following command: db.disableFreeMonitoring()</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt; </span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>出现类似这样的画面，就说明进入了mongoDB的命令行操作页面了。</p><ol start="2"><li>退出客户端<br>输出“exit”即可<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">MongoDB shell version v4.0.10</span><br><span class="line">connecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb</span><br><span class="line">Implicit session: session &#123; <span class="string">&quot;id&quot;</span> : UUID(<span class="string">&quot;c424cadd-e847-4973-adfb-6e15e4684689&quot;</span>) &#125;</span><br><span class="line">MongoDB server version: 4.0.10</span><br><span class="line">Server has startup warnings: </span><br><span class="line">2019-06-08T14:27:52.771+0800 I STORAGE  [initandlisten] </span><br><span class="line">2019-06-08T14:27:52.772+0800 I STORAGE  [initandlisten] ** WARNING: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine</span><br><span class="line">2019-06-08T14:27:52.772+0800 I STORAGE  [initandlisten] **          See http://dochub.mongodb.org/core/prodnotes-filesystem</span><br><span class="line">2019-06-08T14:27:59.524+0800 I CONTROL  [initandlisten] </span><br><span class="line">2019-06-08T14:27:59.524+0800 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled <span class="keyword">for</span> the database.</span><br><span class="line">2019-06-08T14:27:59.524+0800 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.</span><br><span class="line">2019-06-08T14:27:59.524+0800 I CONTROL  [initandlisten] </span><br><span class="line">---</span><br><span class="line">Enable MongoDB<span class="string">&#x27;s free cloud-based monitoring service, which will then receive and display</span></span><br><span class="line"><span class="string">metrics about your deployment (disk utilization, CPU, operation statistics, etc).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The monitoring data will be available on a MongoDB website with a unique URL accessible to you</span></span><br><span class="line"><span class="string">and anyone you share the URL with. MongoDB may use this information to make product</span></span><br><span class="line"><span class="string">improvements and to suggest MongoDB products and deployment options to you.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">To enable free monitoring, run the following command: db.enableFreeMonitoring()</span></span><br><span class="line"><span class="string">To permanently disable this reminder, run the following command: db.disableFreeMonitoring()</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt; exit</span></span><br><span class="line"><span class="string">bye</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h1 id="mongoDB在Ubuntu18-的卸载"><a href="#mongoDB在Ubuntu18-的卸载" class="headerlink" title="mongoDB在Ubuntu18 的卸载"></a>mongoDB在Ubuntu18 的卸载</h1>一顿操作猛如虎..<blockquote><p>sudo service mongod stop<br>sudo apt-get purge mongodb-org*<br>sudo rm -r /var/log/mongodb<br>sudo rm -r /data/db/mongodb<br>sudo rm -r /etc/apt/sources.list.d/mongodb-org-4.0.list</p></blockquote></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>emm,主要的坑还是在版本支持上，其他的基本也是按部就班了。<br>装这个玩意要耐心，别一顿“下一步下一步”就完了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web后端 </tag>
            
            <tag> 小技能 </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> mongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：URL编码解码</title>
      <link href="article/6974/"/>
      <url>article/6974/</url>
      
        <content type="html"><![CDATA[<p>用python3比较强大的Django开发web处理爬虫采集到的某些带URL的数据，发现一些编码问题。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： ubuntu 18.04LTS</span><br><span class="line">python : 3.6.8</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>用python3比较强大的Django开发web处理爬虫采集到的某些带URL的数据，</p><p>发现一些编码问题，也好解决。做个记录方便自己复制！</p><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from urllib.parse import quote</span><br><span class="line">text = quote(text, &#x27;utf-8&#x27;)</span><br></pre></td></tr></table></figure><h1 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from urllib.parse import unquote</span><br><span class="line">text = unquote(text, &#x27;utf-8&#x27;)</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>烂笔头，烂笔头。</p><p>下次要用直接趴拉这个博文来复制好了。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> ubuntu </tag>
            
            <tag> Linux </tag>
            
            <tag> Web后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web后端：Django模组ORM多属性更新</title>
      <link href="article/8682/"/>
      <url>article/8682/</url>
      
        <content type="html"><![CDATA[<p>有时候我们需要同时（一次性）更新某个用户的多个字段。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04</span><br><span class="line">IDE: JetBrains pycharm 2019.2.4 x64</span><br><span class="line">Python: 3.6.9</span><br><span class="line">Django: 3.0.5</span><br><span class="line">djangorestframework: 3.11.0</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>有时候我们需要同时（一次性）更新某个用户的多个字段。</p><p>一个个属性的去修改保存太麻烦了，但是架不住django的ORM就是厉害。</p><h1 id="项目应用下models-py"><a href="#项目应用下models-py" class="headerlink" title="项目应用下models.py"></a>项目应用下models.py</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class magnetInfo(models.Model):</span><br><span class="line">    mtitle = models.CharField(max_length=255, verbose_name=&#x27;名称&#x27;, unique=True)</span><br><span class="line">    mdate = models.DateTimeField(verbose_name=&#x27;发布日期&#x27;, null=True)</span><br><span class="line">    mpublisher = models.CharField(max_length=255, default=&quot;未知&quot;, verbose_name=&#x27;发布人&#x27;, null=True)</span><br><span class="line">    magnet = models.TextField(verbose_name=&#x27;磁性链接&#x27;, null=True)</span><br><span class="line">    magnetSpare = models.TextField(verbose_name=&#x27;备用磁性链接&#x27;, null=True)</span><br><span class="line">    msize = models.CharField(max_length=255, verbose_name=&#x27;文件大小&#x27;, null=True)</span><br><span class="line">    morigin = models.CharField(max_length=255, verbose_name=&#x27;网站来源&#x27;, null=True)</span><br><span class="line">    murl = models.URLField(verbose_name=&#x27;源链接&#x27;, null=True)</span><br></pre></td></tr></table></figure><h1 id="磁性链接数据"><a href="#磁性链接数据" class="headerlink" title="磁性链接数据"></a>磁性链接数据</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;mtitle&quot;: &quot;物语系列合集（化物语 伪物语 猫物语(黑) 猫物语(白) 倾物语 囮物语 鬼物语 恋物语 花物语 凭物语 终物语 历物语 伤物语 终物语第二季 续·终物语）  Monogatari Series  [10bit BD1080p][HEVC-x265] 内详&quot;,</span><br><span class="line">    &quot;mdate&quot;: &quot;2019-07-29 14:18&quot;,</span><br><span class="line">    &quot;mpublisher&quot;: &quot;ReinForcee&quot;,</span><br><span class="line">    &quot;magnet&quot;: &quot;magnet:?xt=urn:btih:TM4GWRHXKCTS3LGB7LVS6NKBV5GWH4MT&amp;dn=&amp;tr=http%3A%2F%2F104.238.198.186%3A8000%2Fannounce&amp;tr=udp%3A%2F%2F104.238.198.186%3A8000%2Fannounce&amp;tr=http%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&amp;tr=udp%3A%2F%2Ftracker3.itzmx.com%3A6961%2Fannounce&amp;tr=http%3A%2F%2Ftracker4.itzmx.com%3A2710%2Fannounce&amp;tr=http%3A%2F%2Ftracker.publicbt.com%3A80%2Fannounce&amp;tr=http%3A%2F%2Ftracker.prq.to%2Fannounce&amp;tr=http%3A%2F%2Fopen.acgtracker.com%3A1096%2Fannounce&amp;tr=https%3A%2F%2Ft-115.rhcloud.com%2Fonly_for_ylbud&amp;tr=http%3A%2F%2Ftracker1.itzmx.com%3A8080%2Fannounce&amp;tr=http%3A%2F%2Ftracker2.itzmx.com%3A6961%2Fannounce&amp;tr=udp%3A%2F%2Ftracker1.itzmx.com%3A8080%2Fannounce&amp;tr=udp%3A%2F%2Ftracker2.itzmx.com%3A6961%2Fannounce&amp;tr=udp%3A%2F%2Ftracker3.itzmx.com%3A6961%2Fannounce&amp;tr=udp%3A%2F%2Ftracker4.itzmx.com%3A2710%2Fannounce&amp;tr=http%3A%2F%2Fnyaa.tracker.wf%3A7777%2Fannounce&amp;tr=http%3A%2F%2Fanidex.moe%3A6969%2Fannounce&amp;tr=http%3A%2F%2Ftracker.anirena.com%3A80%2Fannounce&quot;,</span><br><span class="line">    &quot;magnetSpare&quot;: &quot;magnet:?xt=urn:btih:TM4GWRHXKCTS3LGB7LVS6NKBV5GWH4MT&amp;dn=&amp;tr=http%3A%2F%2F104.238.198.186%3A8000%2Fannounce&amp;tr=udp%3A%2F%2F104.238.198.186%3A8000%2Fannounce&amp;tr=http%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&amp;tr=udp%3A%2F%2Ftracker3.itzmx.com%3A6961%2Fannounce&amp;tr=http%3A%2F%2Ftracker4.itzmx.com%3A2710%2Fannounce&amp;tr=http%3A%2F%2Ftracker.publicbt.com%3A80%2Fannounce&amp;tr=http%3A%2F%2Ftracker.prq.to%2Fannounce&amp;tr=http%3A%2F%2Fopen.acgtracker.com%3A1096%2Fannounce&amp;tr=https%3A%2F%2Ft-115.rhcloud.com%2Fonly_for_ylbud&amp;tr=http%3A%2F%2Ftracker1.itzmx.com%3A8080%2Fannounce&amp;tr=http%3A%2F%2Ftracker2.itzmx.com%3A6961%2Fannounce&amp;tr=udp%3A%2F%2Ftracker1.itzmx.com%3A8080%2Fannounce&amp;tr=udp%3A%2F%2Ftracker2.itzmx.com%3A6961%2Fannounce&amp;tr=udp%3A%2F%2Ftracker3.itzmx.com%3A6961%2Fannounce&amp;tr=udp%3A%2F%2Ftracker4.itzmx.com%3A2710%2Fannounce&amp;tr=http%3A%2F%2Fnyaa.tracker.wf%3A7777%2Fannounce&amp;tr=http%3A%2F%2Fanidex.moe%3A6969%2Fannounce&amp;tr=http%3A%2F%2Ftracker.anirena.com%3A80%2Fannounce&quot;,</span><br><span class="line">    &quot;msize&quot;: &quot;29.1GB&quot;,</span><br><span class="line">    &quot;morigin&quot;: &quot;dmhy&quot;,</span><br><span class="line">    &quot;murl&quot;: &quot;https://share.dmhy.org/?keyword=%E9%BB%91%E7%8C%ABtopics/view/521371_Monogatari_Series_10bit_BD1080p_HEVC-x265.html&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="项目应用下views-py视图文件"><a href="#项目应用下views-py视图文件" class="headerlink" title="项目应用下views.py视图文件"></a>项目应用下views.py视图文件</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 太长我就省略了</span><br><span class="line">magnetInfo.object.create(mtitle=&#x27;物语系列合集（化物语 伪物语 猫物语(黑) 猫物语(白)..&#x27;.....)</span><br></pre></td></tr></table></figure><h1 id="用于更新的数据字典"><a href="#用于更新的数据字典" class="headerlink" title="用于更新的数据字典"></a>用于更新的数据字典</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">up_info = &#123;</span><br><span class="line">    &quot;mtitle&quot;: &quot;物语系列合集（化物语 伪物语 猫物语(黑) 猫物语(白) 倾物语 囮物语 鬼物语 恋物语 花物语 凭物语 终物语 历物语 伤物语 终物语第二季 续·终物语）  Monogatari Series  [10bit BD1080p][HEVC-x265] 内详&quot;,</span><br><span class="line">    &quot;mdate&quot;: &quot;2019-07-29 14:18&quot;,</span><br><span class="line">    &quot;mpublisher&quot;: &quot;ReinForcee&quot;,</span><br><span class="line">    &quot;magnet&quot;: &quot;magnet:?xt=urn:btih:TM4GWRHXKCTS3LGB7LVS6NKBV5GWH4MT&amp;dn=&amp;tr=http%3A%2F%2F104.238.198.186%3A8000%2Fannounce&amp;tr=udp%3A%2F%2F104.238.198.186%3A8000%2Fannounce&amp;tr=http%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&amp;tr=udp%3A%2F%2Ftracker3.itzmx.com%3A6961%2Fannounce&amp;tr=http%3A%2F%2Ftracker4.itzmx.com%3A2710%2Fannounce&amp;tr=http%3A%2F%2Ftracker.publicbt.com%3A80%2Fannounce&amp;tr=http%3A%2F%2Ftracker.prq.to%2Fannounce&amp;tr=http%3A%2F%2Fopen.acgtracker.com%3A1096%2Fannounce&amp;tr=https%3A%2F%2Ft-115.rhcloud.com%2Fonly_for_ylbud&amp;tr=http%3A%2F%2Ftracker1.itzmx.com%3A8080%2Fannounce&amp;tr=http%3A%2F%2Ftracker2.itzmx.com%3A6961%2Fannounce&amp;tr=udp%3A%2F%2Ftracker1.itzmx.com%3A8080%2Fannounce&amp;tr=udp%3A%2F%2Ftracker2.itzmx.com%3A6961%2Fannounce&amp;tr=udp%3A%2F%2Ftracker3.itzmx.com%3A6961%2Fannounce&amp;tr=udp%3A%2F%2Ftracker4.itzmx.com%3A2710%2Fannounce&amp;tr=http%3A%2F%2Fnyaa.tracker.wf%3A7777%2Fannounce&amp;tr=http%3A%2F%2Fanidex.moe%3A6969%2Fannounce&amp;tr=http%3A%2F%2Ftracker.anirena.com%3A80%2Fannounce&quot;,</span><br><span class="line">    &quot;magnetSpare&quot;: &quot;magnet:?xt=urn:btih:TM4GWRHXKCTS3LGB7LVS6NKBV5GWH4MT&amp;dn=&amp;tr=http%3A%2F%2F104.238.198.186%3A8000%2Fannounce&amp;tr=udp%3A%2F%2F104.238.198.186%3A8000%2Fannounce&amp;tr=http%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&amp;tr=udp%3A%2F%2Ftracker3.itzmx.com%3A6961%2Fannounce&amp;tr=http%3A%2F%2Ftracker4.itzmx.com%3A2710%2Fannounce&amp;tr=http%3A%2F%2Ftracker.publicbt.com%3A80%2Fannounce&amp;tr=http%3A%2F%2Ftracker.prq.to%2Fannounce&amp;tr=http%3A%2F%2Fopen.acgtracker.com%3A1096%2Fannounce&amp;tr=https%3A%2F%2Ft-115.rhcloud.com%2Fonly_for_ylbud&amp;tr=http%3A%2F%2Ftracker1.itzmx.com%3A8080%2Fannounce&amp;tr=http%3A%2F%2Ftracker2.itzmx.com%3A6961%2Fannounce&amp;tr=udp%3A%2F%2Ftracker1.itzmx.com%3A8080%2Fannounce&amp;tr=udp%3A%2F%2Ftracker2.itzmx.com%3A6961%2Fannounce&amp;tr=udp%3A%2F%2Ftracker3.itzmx.com%3A6961%2Fannounce&amp;tr=udp%3A%2F%2Ftracker4.itzmx.com%3A2710%2Fannounce&amp;tr=http%3A%2F%2Fnyaa.tracker.wf%3A7777%2Fannounce&amp;tr=http%3A%2F%2Fanidex.moe%3A6969%2Fannounce&amp;tr=http%3A%2F%2Ftracker.anirena.com%3A80%2Fannounce&quot;,</span><br><span class="line">    &quot;msize&quot;: &quot;29.1GB&quot;,</span><br><span class="line">    &quot;morigin&quot;: &quot;dmhy&quot;,</span><br><span class="line">    &quot;murl&quot;: &quot;https://share.dmhy.org/?keyword=%E9%BB%91%E7%8C%ABtopics/view/521371_Monogatari_Series_10bit_BD1080p_HEVC-x265.html&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="传统的逐个字段更新"><a href="#传统的逐个字段更新" class="headerlink" title="传统的逐个字段更新"></a>传统的逐个字段更新</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m = magnetInfo.object.get(UID=&#x27;ADBES682BOEO&#x27;)</span><br><span class="line">m.name = up_info[&#x27;mtitle&#x27;]</span><br><span class="line">m.mobile = up_info[&#x27;mdate&#x27;]</span><br><span class="line">m.mail = up_info[&#x27;magnet&#x27;]</span><br><span class="line">...</span><br><span class="line">m.save()</span><br></pre></td></tr></table></figure><h1 id="一顿操作猛如虎"><a href="#一顿操作猛如虎" class="headerlink" title="一顿操作猛如虎"></a>一顿操作猛如虎</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m = magnetInfo.object.filter(mtitle=&#x27;物语系列合集（化物语 伪物语 猫物语(黑) 猫物语(白)..&#x27;)</span><br><span class="line">m.update(**up_info)</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>相当的厉害，感觉自己就是傻子，甚至用for循环来写。</p><p>然而现在加入了批量多属性更新的操作方式。</p><p>而且听说有一个更强大批量更新，可以做到多条数据批量插入的ORM方法，速度比hbase批量存储还要快。</p><p>bulk_create()方法！</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Web后端 </tag>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> Django </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：计算绝对值的几种方式</title>
      <link href="article/53670/"/>
      <url>article/53670/</url>
      
        <content type="html"><![CDATA[<p>绝对值的计算做个小记录。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: JetBrains Pycharm 2019.2.4 x64  </span><br><span class="line">语言: Python 3.7.4</span><br></pre></td></tr></table></figure><hr><h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line"> </span><br><span class="line">def demoTest_value1():</span><br><span class="line">    a = float(input(&#x27;1.请输入一个数字：&#x27;))</span><br><span class="line">    if a &gt;= 0:</span><br><span class="line">        a = a</span><br><span class="line">    else:</span><br><span class="line">        a = -a</span><br><span class="line">    print(&#x27;绝对值为：%f&#x27; % a)</span><br><span class="line"> </span><br><span class="line">def demoTest_value2():</span><br><span class="line">    a = float(input(&#x27;2.请输入一个数字：&#x27;))</span><br><span class="line">    a = abs(a)</span><br><span class="line">    print(&#x27;绝对值为：%f&#x27; % a)</span><br><span class="line"> </span><br><span class="line">def demoTest_value3():</span><br><span class="line">    a = float(input(&#x27;3.请输入一个数字：&#x27;))</span><br><span class="line">    a = math.fabs(a)</span><br><span class="line">    print(&#x27;绝对值为：%f&#x27; % a)</span><br><span class="line"> </span><br><span class="line">demoTest_value1()</span><br><span class="line">demoTest_value2()</span><br><span class="line">demoTest_value3()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔：关于mysql数据库的思考</title>
      <link href="article/19033/"/>
      <url>article/19033/</url>
      
        <content type="html"><![CDATA[<p>项目上为什么建表时不设置外键？</p><span id="more"></span><h1 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h1><p>这两日，我一直被某件事情苦恼着。</p><p>情景大概是这样的，我需要采集网络小说，建表的时候，我遇到了一个问题。</p><p>子表B里到底要不要设定一个外键与主表A联系起来？</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>很多情况下，大多数的考虑肯定就是，当然是要的，<br>这既能提高查询性能，又能节省存储空间，<br>毕竟外键字段只是存储id而已，数据多起来以后，节省空间的效果是显著的。</p><p>嗯，没毛病，我就是这样想的。</p><p>但是后来，我在开发过程中让我意识到了，由于使用这个外键导致的开发难度的增加了数倍。</p><p>在使用爬虫采集数据的时候，由于这个外键的关系，<br>爬虫在插入数据库时，就必须优先插入主表A数据，<br>然后再查询这个主表A某条数据的id，<br>写入子表B的数据的外键字段中，<br>最后再执行子表插入。</p><p>原本的数据插入流程变成了：<br>插入→查询→修改→插入</p><p>咋一看，这似乎没什么大不了的，但是如果是多线程爬虫的话，这无疑访问数据库的数据就翻了数倍<br>如果数据库庞大的话，查询时间恐怕令人发指。</p><p>这之后还要考虑到增量更新的问题，那么这个开发的难度又会更上一层楼了。</p><p>所以，我到底要不要选择在这里使用外键，让我很是困扰。</p><h1 id="寻找答案"><a href="#寻找答案" class="headerlink" title="寻找答案"></a>寻找答案</h1><p>于是，找到一篇博文，<a target="_blank" rel="noopener" href="https://blog.csdn.net/MoRan_Lei/article/details/79700264">数据库中使用外键和不使用外键有什么区别</a></p><p>上面很好的探讨了该问题，其中反方观点中，第三点这样写到：</p><ul><li>不用外键时数据管理简单，操作方便，性能高（导入导出等操作，在insert,   update,   delete   数据的时候更快）eg:在海量的数据库中想都不要去想外键，试想，一个程序每天要insert数百万条记录，当存在外键约束的时候，每次要去扫描此记录是否合格，一般还不止一个字段有外键，这样扫描的数量是成级数的增长！我的一个程序入库在3个小时做完，如果加上外键，需要28个小时！</li></ul><p>这样描述就挺符合我现在遇到的问题。</p><p>文章的结论，总结是这样的：</p><ul><li><p>在大型系统中（性能要求不高，安全要求高），使用外键；在大型系统中（性能要求高，安全自己控制），不用外键；<br>小系统随便，最好用外键。</p></li><li><p>用外键要适当，不能过分追求。</p></li><li><p>不用外键而用程序控制数据一致性和完整性时，应该写一层来保证，然后各个应用通过这个层来访问数据库。</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我重新审视了一下，自己开发的个人项目。</p><p>首先，这是个人项目，它的定位并不是一个大型系统。</p><p>“小系统随便，最好用外键”，但是造成爬虫开发难度和采集时间的大幅增加，这不划算。</p><p>所以，虽然不甘心，但是应该放弃在这里使用外键。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔心得 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：基于jquery图片懒加载</title>
      <link href="article/61105/"/>
      <url>article/61105/</url>
      
        <content type="html"><![CDATA[<p>对img和div的背景图片进行懒加载。<br>在data-original写入真正的链接。<br>html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div data-original&#x3D;&quot;example1.jpg&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;img data-original&#x3D;&quot;example2.jpg&quot;&gt;</span><br></pre></td></tr></table></figure><p>javascript</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 注意: 需要引入jQuery</span><br><span class="line">    (function() &#123;</span><br><span class="line">        &#x2F;&#x2F; 获取window的引用:</span><br><span class="line">    var $window &#x3D; $(window);</span><br><span class="line">     &#x2F;&#x2F; 获取包含data-original属性的img，并以jQuery对象存入数组:</span><br><span class="line">    var lazyImgs &#x3D; $(&#39;img[data-original]&#39;)</span><br><span class="line">var xxx&#x3D;[]</span><br><span class="line">$(&#39;img[data-original],div[data-original]&#39;).each(function(index,element)&#123;</span><br><span class="line">xxx.push($(this))</span><br><span class="line">&#125;)</span><br><span class="line">    &#x2F;&#x2F; 定义事件函数:</span><br><span class="line">    var onScroll &#x3D; function() &#123;</span><br><span class="line">        &#x2F;&#x2F; 获取页面滚动的高度:</span><br><span class="line">        var wtop &#x3D; $window.scrollTop();</span><br><span class="line">         &#x2F;&#x2F; 判断是否还有未加载的img:</span><br><span class="line">        if (xxx.length &gt; 0) &#123;</span><br><span class="line">            &#x2F;&#x2F; 获取可视区域高度:</span><br><span class="line">            var wheight &#x3D; $window.height();</span><br><span class="line">            &#x2F;&#x2F; 存放待删除的索引:</span><br><span class="line">            var loadedIndex &#x3D; [];</span><br><span class="line">            &#x2F;&#x2F; 循环处理数组的每个img元素:</span><br><span class="line">            $.each(xxx, function (index, i) &#123;</span><br><span class="line">                &#x2F;&#x2F; 判断是否在可视范围内:</span><br><span class="line">                if (i.offset().top - wtop &lt; wheight) &#123;</span><br><span class="line">                    &#x2F;&#x2F;区分img与div元素区别</span><br><span class="line">if(i[0].tagName &#x3D;&#x3D;&#x3D; &#39;IMG&#39;)&#123;</span><br><span class="line">                        &#x2F;&#x2F;设置img的src属性</span><br><span class="line">i.attr(&#39;src&#39;, i.attr(&#39;data-original&#39;));</span><br><span class="line">&#125;else if(i[0].tagName &#x3D;&#x3D;&#x3D; &#39;DIV&#39;)&#123;</span><br><span class="line">                        &#x2F;&#x2F;设置div背景图片</span><br><span class="line">i.css(&quot;background-image&quot;,&quot;url(&quot;+i.attr(&#39;data-original&#39;)+&#39;)&#39;)</span><br><span class="line">&#125;</span><br><span class="line">                    &#x2F;&#x2F; 添加到待删除数组:</span><br><span class="line">                    loadedIndex.unshift(index);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            &#x2F;&#x2F; 删除已处理的对象:</span><br><span class="line">            $.each(loadedIndex, function (i,index) &#123;</span><br><span class="line">                xxx.splice(index, 1);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    &#x2F;&#x2F;进入页面先执行一次</span><br><span class="line">    onScroll();</span><br><span class="line">    &#x2F;&#x2F;绑定scroll事件</span><br><span class="line">    $(window).scroll(onScroll);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：vue中的slot（插槽）</title>
      <link href="article/47725/"/>
      <url>article/47725/</url>
      
        <content type="html"><![CDATA[<p>#未命名插槽<br>slot未命名时，每个<slot>标签内都会生成父组件中提供的内容。<br>父组件app.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div id&#x3D;&#39;app&#39;&gt;</span><br><span class="line">        &lt;slottest&gt;</span><br><span class="line">            &lt;h1&gt;Here might be a page title&lt;&#x2F;h1&gt;</span><br><span class="line">                  </span><br><span class="line">            &lt;p&gt;A paragraph for the main content.&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;And another one.&lt;&#x2F;p&gt;</span><br><span class="line">                  </span><br><span class="line">            &lt;p&gt;Here&#39;s some contact info&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;slottest&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import slottest from &#39;.&#x2F;components&#x2F;slottest&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    slottest</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>子组件slottest.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">&lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;div&gt; </span><br><span class="line">&lt;&#x2F;template&gt; </span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123; </span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>渲染HTML如下<br><img src= "/customize/img/loading.gif" data-lazy-src="1.png" alt="image.png"><br>如果子<em>组件中</em>没有包含任何一个 <slot> 元素，则任何传入它的内容都会被抛弃。</p><p>#命名插槽<br>父组件app.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id&#x3D;&#39;app&#39;&gt;</span><br><span class="line">            &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;</span><br><span class="line">        &lt;slottest&gt;</span><br><span class="line">            &lt;h1 slot&#x3D;&quot;header&quot;&gt;Here might be a page title&lt;&#x2F;h1&gt;</span><br><span class="line">                  </span><br><span class="line">            &lt;p&gt;A paragraph for the main content.&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;And another one.&lt;&#x2F;p&gt;</span><br><span class="line">                  </span><br><span class="line">            &lt;p slot&#x3D;&quot;footer&quot;&gt;Here&#39;s some contact info&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;slottest&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import slottest from &#39;.&#x2F;components&#x2F;slottest&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    slottest</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>子组件slottest.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">    &lt;slot name&#x3D;&quot;header&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;header&gt;</span><br><span class="line">  &lt;main&gt;</span><br><span class="line">    &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;main&gt;</span><br><span class="line">  &lt;footer&gt;</span><br><span class="line">    &lt;slot name&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;footer&gt;</span><br><span class="line">  &lt;&#x2F;div&gt; </span><br><span class="line">&lt;&#x2F;template&gt; </span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123; </span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>渲染完后html结构<br><img src= "/customize/img/loading.gif" data-lazy-src="2.png" alt="image.png"><br>#默认内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type&#x3D;&quot;submit&quot;&gt;</span><br><span class="line">  &lt;slot&gt;Submit&lt;&#x2F;slot&gt;</span><br><span class="line">&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><p>如果父组件为这个插槽提供了内容，则默认的内容会被替换掉。<br>#作用域插槽 | 带数据的插槽<br>作用域插槽要求，在slot上面绑定数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot name&#x3D;&quot;up&quot; :data&#x3D;&quot;data&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line"> export default &#123;</span><br><span class="line">    data: function()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        data: [&#39;zhangsan&#39;,&#39;lisi&#39;,&#39;wanwu&#39;,&#39;zhaoliu&#39;,&#39;tianqi&#39;,&#39;xiaoba&#39;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;father&quot;&gt;</span><br><span class="line">    &lt;h3&gt;这里是父组件&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;!--第一次使用：用flex展示数据--&gt;</span><br><span class="line">    &lt;child&gt;</span><br><span class="line">      &lt;template slot-scope&#x3D;&quot;user&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;tmpl&quot;&gt;</span><br><span class="line">          &lt;span v-for&#x3D;&quot;item in user.data&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;child&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--第二次使用：用列表展示数据--&gt;</span><br><span class="line">    &lt;child&gt;</span><br><span class="line">      &lt;template slot-scope&#x3D;&quot;user&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li v-for&#x3D;&quot;item in user.data&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">      &lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;child&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--第三次使用：直接显示数据--&gt;</span><br><span class="line">    &lt;child&gt;</span><br><span class="line">      &lt;template slot-scope&#x3D;&quot;user&quot;&gt;</span><br><span class="line">       &#123;&#123;user.data&#125;&#125;</span><br><span class="line">      &lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;child&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--第四次使用：不使用其提供的数据, 作用域插槽退变成匿名插槽--&gt;</span><br><span class="line">    &lt;child&gt;</span><br><span class="line">      我就是模板</span><br><span class="line">    &lt;&#x2F;child&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;child&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;这里是子组件&lt;&#x2F;h3&gt;</span><br><span class="line">    &#x2F;&#x2F; 作用域插槽</span><br><span class="line">    &lt;slot  :data&#x3D;&quot;data&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line"> export default &#123;</span><br><span class="line">    data: function()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        data: [&#39;zhangsan&#39;,&#39;lisi&#39;,&#39;wanwu&#39;,&#39;zhaoliu&#39;,&#39;tianqi&#39;,&#39;xiaoba&#39;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/customize/img/loading.gif" data-lazy-src="3.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：Ubuntu安装nodeJS</title>
      <link href="article/16258/"/>
      <url>article/16258/</url>
      
        <content type="html"><![CDATA[<p>我本来以为会挺复杂，结果很意外发现是很简单的东西，时间久了不用，又容易忘记，干脆“烂笔头”记录一下！</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Ubuntu 16.04  Tencent CVM</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近因为娱乐嘛，所以在玩MC，然后找了一个不错的图形界面管理MC服务器的项目，于是就想说部署来试试看。<br>它的部署依赖了nodeJS环境，之前我只在Win系统下尝试安装过，没试过在Unbuntu下安装，这回做个记录。</p><h1 id="Ubuntu-apt-get命令安装"><a href="#Ubuntu-apt-get命令安装" class="headerlink" title="Ubuntu apt-get命令安装"></a>Ubuntu apt-get命令安装</h1><blockquote><p>安装前更新一下 apt-get 包，确定自己安装的是apt上最新版本的nodejs<br>sudo apt-get update<br>apt-get 上的nodeJS更新了包也还是那么老(4.x版本，坑死我了)，于是用行命令定位一下，安装nodejs 10<br>curl -sL <a target="_blank" rel="noopener" href="https://deb.nodesource.com/setup_10.x">https://deb.nodesource.com/setup_10.x</a> | sudo -E bash -</p></blockquote><blockquote><p>安装 nodejs 本体<br>sudo apt-get install -y nodejs</p></blockquote><blockquote><p>安装 npm (理解为属于nodejs的“apt-get install”就行了233)<br>sudo apt-get install -y nodejs</p></blockquote><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><blockquote><p>检查node版本<br>node -v</p></blockquote><p>建议安装nodejs的版本，至少8.X以上。最新的稳定的版本是10.X。如果是第一次使用，无特殊历史原因，可以直接安装nodeJS 10</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>真的好意外，我还以为要好多东西要配置什么的，所以才单独看了一篇博客，打算记录…结果一不注意就让我装完了..好吧，既然博文都开了篇了就记录一下好了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：typescript 的 类型</title>
      <link href="article/26610/"/>
      <url>article/26610/</url>
      
        <content type="html"><![CDATA[<p>布尔、字符串、数字、数组、对象<br>在原生数组的基础上<br>##元组 Tuple<br>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为<code>string</code>和<code>number</code>类型的元组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Declare a tuple type</span><br><span class="line">let x: [string, number];</span><br><span class="line">&#x2F;&#x2F; Initialize it</span><br><span class="line">x &#x3D; [&#39;hello&#39;, 10]; &#x2F;&#x2F; OK</span><br><span class="line">&#x2F;&#x2F; Initialize it incorrectly</span><br><span class="line">x &#x3D; [10, &#39;hello&#39;]; &#x2F;&#x2F; Error&#96;&lt;&#x2F;pre&gt;</span><br></pre></td></tr></table></figure><p>当访问一个已知索引的元素，会得到正确的类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(x[0].substr(1)); &#x2F;&#x2F; OK</span><br><span class="line">console.log(x[1].substr(1)); &#x2F;&#x2F; Error, &#39;number&#39; does not have &#39;substr&#39;</span><br></pre></td></tr></table></figure><p>当访问一个越界的元素，会使用联合类型替代：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x[3] &#x3D; &#39;world&#39;; &#x2F;&#x2F; OK, 字符串可以赋值给(string | number)类型</span><br><span class="line">console.log(x[5].toString()); &#x2F;&#x2F; OK, &#39;string&#39; 和 &#39;number&#39; 都有 toString</span><br><span class="line">x[6] &#x3D; true; &#x2F;&#x2F; Error, 布尔不是(string | number)类型</span><br></pre></td></tr></table></figure><p>##枚举<br>num类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enum Color &#123;Red, Green, Blue&#125;</span><br><span class="line">let c: Color &#x3D; Color.Green;</span><br></pre></td></tr></table></figure><p>编译出来为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var Color;</span><br><span class="line">(function (Color) &#123;</span><br><span class="line">    Color[Color[&quot;Red&quot;] &#x3D; 0] &#x3D; &quot;Red&quot;;</span><br><span class="line">    Color[Color[&quot;Green&quot;] &#x3D; 1] &#x3D; &quot;Green&quot;;</span><br><span class="line">    Color[Color[&quot;Blue&quot;] &#x3D; 2] &#x3D; &quot;Blue&quot;;</span><br><span class="line">&#125;)(Color || (Color &#x3D; &#123;&#125;));</span><br><span class="line">var c &#x3D; Color.Green;</span><br></pre></td></tr></table></figure><p>默认从0开始，也可以手动指定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">enum Color &#123;Red &#x3D; 1, Green, Blue&#125;</span><br><span class="line">let c: Color &#x3D; Color.Green; &#x2F;&#x2F;1</span><br><span class="line">&#x2F;&#x2F;编译出来如下</span><br><span class="line">var Color;</span><br><span class="line">(function (Color) &#123;</span><br><span class="line">    Color[Color[&quot;Red&quot;] &#x3D; 1] &#x3D; &quot;Red&quot;;</span><br><span class="line">    Color[Color[&quot;Green&quot;] &#x3D; 2] &#x3D; &quot;Green&quot;;</span><br><span class="line">    Color[Color[&quot;Blue&quot;] &#x3D; 3] &#x3D; &quot;Blue&quot;;</span><br><span class="line">&#125;)(Color || (Color &#x3D; &#123;&#125;));</span><br><span class="line">var c &#x3D; Color.Green; &#x2F;&#x2F;2</span><br><span class="line"></span><br><span class="line">console.log(Color)&#x2F;&#x2F;&#123;1: &quot;Red&quot;, 2: &quot;Green&quot;, 3: &quot;Blue&quot;, Red: 1, Green: 2, Blue: 3&#125;</span><br></pre></td></tr></table></figure><p>也可以全部手动赋值</p><p>##Any<br>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 any类型来标记这些变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let notSure: any &#x3D; 4;</span><br><span class="line">notSure &#x3D; &quot;maybe a string instead&quot;;</span><br><span class="line">notSure &#x3D; false; &#x2F;&#x2F; okay, definitely a boolean</span><br></pre></td></tr></table></figure><p>##Void<br>某种程度上来说，<code>void</code>类型像是与<code>any</code>类型相反，它表示没有任何类型。 当一个<strong>函数没有返回值时</strong>，你通常会见到其返回值类型是 <code>void</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function warnUser(): void &#123;</span><br><span class="line">    console.log(&quot;This is my warning message&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明一个<code>void</code>类型的变量没有什么大用，因为你只能为它赋予<code>undefined</code>和<code>null</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let unusable: void &#x3D; undefined;</span><br></pre></td></tr></table></figure><p>##Never<br>never类型表示的是那些永不存在的值的类型。 例如， never类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是 never类型，当它们被永不为真的类型保护所约束时。</p><p>never类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是never的子类型或可以赋值给never类型（除了never本身之外）。 即使 any也不可以赋值给never。</p><p>下面是一些返回never类型的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 返回never的函数必须存在无法达到的终点</span><br><span class="line">function error(message: string): never &#123;</span><br><span class="line">    throw new Error(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 推断的返回值类型为never</span><br><span class="line">function fail() &#123;</span><br><span class="line">    return error(&quot;Something failed&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 返回never的函数必须存在无法达到的终点</span><br><span class="line">function infiniteLoop(): never &#123;</span><br><span class="line">    while (true) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考链接<br><a target="_blank" rel="noopener" href="https://www.tslang.cn/docs/handbook/basic-types.html">typescript官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> CSS </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：滚动条的样式</title>
      <link href="article/28080/"/>
      <url>article/28080/</url>
      
        <content type="html"><![CDATA[<p>有时候在某些布局上面，内容太多，而范围很小，为了不影响布局，这是我们可能会设置滚动条，如overflow:scroll;</p><p>但是浏览器的默认滚动条又太难看，而且与整体页面风格很不搭，这时我们可以通过css3来实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*&#x2F;  </span><br><span class="line">::-webkit-scrollbar  </span><br><span class="line">&#123;  </span><br><span class="line">    width: 4px;  </span><br><span class="line">    height: 4px;  </span><br><span class="line">    background-color: #F5F5F5;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">&#x2F;*定义滚动条轨道 内阴影+圆角*&#x2F;  </span><br><span class="line">::-webkit-scrollbar-track  </span><br><span class="line">&#123;  </span><br><span class="line">    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);  </span><br><span class="line">    border-radius: 10px;  </span><br><span class="line">    background-color: #FFF;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">&#x2F;*定义滑块 内阴影+圆角*&#x2F;  </span><br><span class="line">::-webkit-scrollbar-thumb  </span><br><span class="line">&#123;  </span><br><span class="line">    border-radius: 10px;  </span><br><span class="line">    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);  </span><br><span class="line">    background-color: #AAA;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>::-webkit-scrollbar 滚动条整体部分<br>::-webkit-scrollbar-track 滚动条的轨道（里面装有Thumb）<br>::-webkit-scrollbar-track-piece 内层轨道<br>::-webkit-scroll-thumb 滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条）<br>::-webkit-scrollbar-button 滚动条的轨道的两端按钮<br>::-webkit-scrollbar-corner 边角，即两个滚动条的交汇处</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> css </tag>
            
            <tag> Jquery </tag>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】：匿名代理、透传代理和精英代理之间的区别</title>
      <link href="article/11259/"/>
      <url>article/11259/</url>
      
        <content type="html"><![CDATA[<p>匿名代理、透传代理和精英代理之间的区别!</p><span id="more"></span><p>作为一个代理的普通用户，你也许不知道你在用的代理到底是透明的，匿名的还是精英的。<br>你也许会倾向于使用精英代理，正如它名字指示的那样。那么这几种代理到底有什么区别呢？</p><p>首先，代理一般会在HTTP的Header中传输以下3个字段：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REMOTE_ADDR</span><br><span class="line">HTTP_X_FORWARDED_FOR</span><br><span class="line">HTTP_VIA</span><br></pre></td></tr></table></figure><p>REMOTE_ADDR总是发送代理服务器的IP地址。</p><h1 id="透传代理"><a href="#透传代理" class="headerlink" title="透传代理"></a>透传代理</h1><p>对于透传代理（Transparent Proxy）来说，你真实IP地址会被放在HTTP_X_FORWARDED_FOR里面。</p><p>这意味着网站可以知道代理的IP，还知道你真正的IP地址。</p><p>HTTP_VIA头也会发送，显示你正在使用代理服务器</p><h1 id="匿名代理"><a href="#匿名代理" class="headerlink" title="匿名代理"></a>匿名代理</h1><p>匿名代理不会把你的真实IP写在__HTTP_X_FORWARDED_FOR__头里面。</p><p>但是HTTP_VIA头还是透露了您正在使用一个代理服务器。</p><h1 id="精英代理"><a href="#精英代理" class="headerlink" title="精英代理"></a>精英代理</h1><p>精英代理只发送REMOTE_ADDR头,因此让你看起来像一个普通互联网用户不使用代理。</p><h1 id="检测精英代理"><a href="#检测精英代理" class="headerlink" title="检测精英代理"></a>检测精英代理</h1><p>精英代理并非不可以检测。</p><p>网站可以检查这个IP，是否使用了常用的代理接口（如8080、3128、8080、3128）。</p><p>可以使用以下网站来检测你是否匿名:<a target="_blank" rel="noopener" href="http://whoer.net/ext">http://whoer.net/ext</a> 或 <a target="_blank" rel="noopener" href="https://whoer.net/zh#extended">https://whoer.net/zh#extended</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔心得 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：踩坑笔记本</title>
      <link href="article/10203/"/>
      <url>article/10203/</url>
      
        <content type="html"><![CDATA[<h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: webStrom 2021.3.1 x64  </span><br><span class="line">语言: nodeJs v14.15.4</span><br><span class="line">语言: javascript</span><br></pre></td></tr></table></figure><hr><h1 id="npx"><a href="#npx" class="headerlink" title="npx"></a>npx</h1><p>npx 会自动查找当前依赖包中的可执行文件。<br>如果找不到，就会去 PATH 里找。<br>如果依然找不到，就会帮你安装。<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h1 id="IE浏览器"><a href="#IE浏览器" class="headerlink" title="IE浏览器"></a>IE浏览器</h1><h2 id="IE11"><a href="#IE11" class="headerlink" title="IE11"></a>IE11</h2><p>IE11中相同的get请求多次发送时，<br>会直接读取本地的缓存，相同的get请求会返回相同的值，<br>但是F12打开调试又会重新向服务器发送请求。<br>简单的解决方法就是在请求的url后面加一串随机数，或者改成post请求。</p><h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h2 id="预览图片"><a href="#预览图片" class="headerlink" title="预览图片"></a>预览图片</h2><p>在vue中使用FileReader()预览失败，绑定的src没有改变。<br>预测可能是转成base64过长，处理有问题，<br>于是改成使用URL.createObjectURL()来处理。<br>URL.createObjectURL()处理后生成了一个临时的链接，直接赋值给src就行。<br><a target="_blank" rel="noopener" href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL">相关文档</a></p><h2 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h2><p>beforeCreate最好不要改动data里的数据，否则可能会出现无法监听的情况，</p><p>模板中需要使用data进行渲染时，先给data默认的初始值，created之后再进行更改（如ajax）改成需要的值。</p><h2 id="Vue中给标签属性绑定值"><a href="#Vue中给标签属性绑定值" class="headerlink" title="Vue中给标签属性绑定值"></a>Vue中给标签属性绑定值</h2><p>给属性绑定值时并非</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;&#123;&#123;e.head&#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure><p>而是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img :src&#x3D;&quot;bList.head&quot;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web前端 </category>
          
          <category> JavaScript </category>
          
          <category> 疑难杂症 </category>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：Vue-router基础</title>
      <link href="article/17355/"/>
      <url>article/17355/</url>
      
        <content type="html"><![CDATA[<p>#Vue Router是什么<br>Vue Router 是 <a target="_blank" rel="noopener" href="http://cn.vuejs.org/">Vue.js</a> 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。包含的功能有：</p><ul><li>  嵌套的路由/视图表</li><li>  模块化的、基于组件的路由配置</li><li>  路由参数、查询、通配符</li><li>  基于 Vue.js 过渡系统的视图过渡效果</li><li>  细粒度的导航控制</li><li>  带有自动激活的 CSS class 的链接</li><li>  HTML5 历史模式或 hash 模式，在 IE9 中自动降级</li><li>  自定义的滚动条行为<br>#一个使用Vue Router创建单页面应用的简单例子<br>Html<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;vue-router&#x2F;dist&#x2F;vue-router.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;h1&gt;Hello App!&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    &lt;!-- 使用 router-link 组件来导航. --&gt;</span><br><span class="line">    &lt;!-- 通过传入 &#96;to&#96; 属性指定链接. --&gt;</span><br><span class="line">    &lt;!-- &lt;router-link&gt; 默认会被渲染成一个 &#96;&lt;a&gt;&#96; 标签 --&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;foo&quot;&gt;Go to Foo&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;bar&quot;&gt;Go to Bar&lt;&#x2F;router-link&gt;</span><br><span class="line">  &lt;&#x2F;p&gt;</span><br><span class="line">  &lt;!-- 路由出口 --&gt;</span><br><span class="line">  &lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>JavaScript<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 0. 如果使用模块化机制编程，导入Vue和VueRouter，要调用 Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 1. 定义 (路由) 组件。</span><br><span class="line">&#x2F;&#x2F; 可以从其他文件 import 进来</span><br><span class="line">const Foo &#x3D; &#123; template: &#39;&lt;div&gt;foo&lt;&#x2F;div&gt;&#39; &#125;</span><br><span class="line">const Bar &#x3D; &#123; template: &#39;&lt;div&gt;bar&lt;&#x2F;div&gt;&#39; &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2. 定义路由</span><br><span class="line">&#x2F;&#x2F; 每个路由应该映射一个组件。 其中&quot;component&quot; 可以是</span><br><span class="line">&#x2F;&#x2F; 通过 Vue.extend() 创建的组件构造器，</span><br><span class="line">&#x2F;&#x2F; 或者，只是一个组件配置对象。</span><br><span class="line">&#x2F;&#x2F; 我们晚点再讨论嵌套路由。</span><br><span class="line">const routes &#x3D; [</span><br><span class="line">  &#123; path: &#39;&#x2F;foo&#39;, component: Foo &#125;,</span><br><span class="line">  &#123; path: &#39;&#x2F;bar&#39;, component: Bar &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3. 创建 router 实例，然后传 &#96;routes&#96; 配置</span><br><span class="line">&#x2F;&#x2F; 你还可以传别的配置参数, 不过先这么简单着吧。</span><br><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes &#x2F;&#x2F; (缩写) 相当于 routes: routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 4. 创建和挂载根实例。</span><br><span class="line">&#x2F;&#x2F; 记得要通过 router 配置参数注入路由，</span><br><span class="line">&#x2F;&#x2F; 从而让整个应用都有路由功能</span><br><span class="line">const app &#x3D; new Vue(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(&#39;#app&#39;)</span><br><span class="line">&#x2F;&#x2F;也可以直接写入el:&quot;#app&quot;,略去$mount(&#39;#app&#39;)</span><br><span class="line">&#x2F;&#x2F; 现在，应用已经启动了！</span><br></pre></td></tr></table></figure></li></ul><p>#动态路由匹配<br>我们经常需要把某种模式匹配到的所有路由，全都映射到同个组件。例如，我们有一个 User 组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 vue-router 的路由路径中使用“动态路径参数”(dynamic segment) 来达到这个效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;html不变</span><br><span class="line">&#x2F;&#x2F;通过$route.params获取路径信息</span><br><span class="line">const User &#x3D; &#123;</span><br><span class="line">  template: &#39;&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;&#x2F;div&gt;&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const User &#x3D; &#123;</span><br><span class="line">  template: &#39;&lt;div&gt;User&lt;&#x2F;div&gt;&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#x2F;&#x2F; 动态路径参数 以冒号开头</span><br><span class="line">    &#123; path: &#39;&#x2F;user&#x2F;:id&#39;, component: User &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在一个路由中设置多段“路径参数”，对应的值都会设置到 $route.params 中。<br>|模式|    匹配路径    |$route.params|<br>|–|–|–|<br>/user/:username    |/user/evan    |{ username: ‘evan’ }<br>/user/:username/post/:post_id    |/user/evan/post/123|    { username: ‘evan’, post_id: 123 }</p><p>#响应路由参数的变化<br>当使用路由参数时，例如从 /user/foo 导航到 /user/bar，<strong>原来的组件实例会被复用</strong>。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，<strong>这也意味着组件的生命周期钩子不会再被调用</strong>。</p><p>复用组件时，如果想对路由参数的变化作出响应的话，可以简单地 watch (监测变化) $route 对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const User &#x3D; &#123;</span><br><span class="line">  template: &#39;...&#39;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    &#39;$route&#39; (to, from) &#123;</span><br><span class="line">      &#x2F;&#x2F; 对路由变化作出响应...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者使用 2.2 中引入的 <code>beforeRouteUpdate</code> <a target="_blank" rel="noopener" href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html">导航守卫</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const User &#x3D; &#123;</span><br><span class="line">  template: &#39;...&#39;,</span><br><span class="line">  beforeRouteUpdate (to, from, next) &#123;</span><br><span class="line">    &#x2F;&#x2F; react to route changes...</span><br><span class="line">    &#x2F;&#x2F; don&#39;t forget to call next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> CSS </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：正则验证中文名</title>
      <link href="article/33381/"/>
      <url>article/33381/</url>
      
        <content type="html"><![CDATA[<p>中文名少数名族</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^[\u4E00-\u9FA5\uf900-\ufa2d·s]&#123;2,20&#125;$&#x2F;</span><br></pre></td></tr></table></figure><p>身份证号简单验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：如何重置MySQL中表中自增列的初始值</title>
      <link href="article/28847/"/>
      <url>article/28847/</url>
      
        <content type="html"><![CDATA[<p>Django中如果model.py写为AUTOFiled,id就会自增。但是用delete删除以后，新增的数据id只会接着往下排列。于是…</p><span id="more"></span><p>首先报上一波，我开发的运行环境</p><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04LTS</span><br><span class="line">Software: mysql Ubuntu版</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在mysql的数据库设计中，一般都会设计自增的数字列，用作业务无关的主键。 在数据库出现频繁的删除操作或者清空操作之后，其自增的值仍然会自动增长，如果需要重新开始该如何做呢？</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol><li>alter table<blockquote><p>delete from table_name;<br>ALTER TABLE table_name AUTO_INCREMENT = 1; </p></blockquote></li></ol><p>如果数据库表中的数据很多，则删除操作会持续比较久，这个问题需要注意。</p><ol start="2"><li>truncate<blockquote><p>truncate table_name;</p></blockquote></li></ol><p>直接清空数据,但是由于不能回滚，所以此操作是危险的，使用时需要谨慎。</p><h1 id="两者的比较"><a href="#两者的比较" class="headerlink" title="两者的比较"></a>两者的比较</h1><p>主要的区别如下：</p><ol><li><p>truncate速度快，不做日志记录，故无法进行rollback操作。 delete反之；</p></li><li><p>truncate会重置索引和自增初始值, delete则不会；</p></li><li><p>truncate不会触发trigger，而delete则会触发。</p></li></ol><h1 id="以下是使用python的MySQLdb模块实现的方法实例"><a href="#以下是使用python的MySQLdb模块实现的方法实例" class="headerlink" title="以下是使用python的MySQLdb模块实现的方法实例"></a>以下是使用python的MySQLdb模块实现的方法实例</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import MySQLdb</span><br><span class="line"><span class="comment"># 删除表数据并重置ID</span></span><br><span class="line">def Refresh_ID(connect,table_name):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    :param connect: 连接对象</span></span><br><span class="line"><span class="string">    :param table_name: 表名</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 使用cursor()方法获取操作游标</span></span><br><span class="line">    cursor = connect.cursor()</span><br><span class="line">    sql1 = <span class="string">&quot;DELETE FROM &#123;table&#125;&quot;</span>.format(table=table_name)</span><br><span class="line">    sql2 = <span class="string">&quot;ALTER TABLE &#123;table&#125; AUTO_INCREMENT = 1;&quot;</span>.format(table=table_name)</span><br><span class="line">    try:</span><br><span class="line">        cursor.execute(sql1)</span><br><span class="line">        cursor.execute(sql2)</span><br><span class="line">        connect.commit()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;删除表数据并重置ID 时发生错误:%s&quot;</span>%e)</span><br></pre></td></tr></table></figure><p>这个代码只是一个样例，对于整个操作来讲，它只是一个部分，仅作参考。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - Ubuntu - mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：Python 3.x中安装web.py</title>
      <link href="article/3361/"/>
      <url>article/3361/</url>
      
        <content type="html"><![CDATA[<p>直接通过pip intall 无法安装web.py。发现了一个简单的解决办法。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Ubuntu 18.04   </span><br><span class="line">IDE: JetBrains Python 2018.2.4 x64  </span><br><span class="line">语言: Python 3.66  </span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近决定从python2.7转移到3.x上工作。 </p><p>使用数据库的时候，依然选用了之前比较感兴趣的web.py，但安装的时候似乎发现有各种问题。</p><h1 id="安装办法"><a href="#安装办法" class="headerlink" title="安装办法"></a>安装办法</h1><p>运行如下命令：</p><blockquote><p>pip install web.py==0.40.dev0</p></blockquote><p>这个版本可以直接通过pip安装web.py</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip如何自动导出和安装依赖！</title>
      <link href="article/22674/"/>
      <url>article/22674/</url>
      
        <content type="html"><![CDATA[<p>很简单的东西，时间久了不用，又容易忘记，干脆“烂笔头”记录一下！</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Ubuntu 18.04  </span><br><span class="line">Python: 3.6.6</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在查看别人的Python项目时，经常会看到一个requirements.txt文件，里面记录了当前程序的所有依赖包及其精确版本号。<br>其作用是用来在另一台PC上重新构建项目所需要的运行环境依赖。  </p><h1 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h1><p>requirements.txt可以通过pip命令自动生成和安装</p><blockquote><p>生成requirements.txt文件<br>pip freeze &gt; requirements.txt</p></blockquote><blockquote><p>安装requirements.txt依赖<br>pip install -r requirements.txt</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>requirements.txt这个文件名并不是一定的..你也可以命名233.txt或者piplist.txt都可以。requirements.txt这个名字只是业界共识的习惯命名方式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：Ubuntu安装部署IPProxy代理池</title>
      <link href="article/31248/"/>
      <url>article/31248/</url>
      
        <content type="html"><![CDATA[<p>项目需要，在此部署一个代理IP池，在github上寻找到一个名为<a target="_blank" rel="noopener" href="https://github.com/qiyeboy/IPProxyPool">IPProxy</a>项目</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04LTS  </span><br><span class="line">Python 3.6.6</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>项目的数据需要爬虫的支持，爬虫需要则需要IP代理池，来提高采集速度。由于爬取对象多少都会对同IP的请求量做出限制。</p><p>于是就在在github上寻找到一个名为<a target="_blank" rel="noopener" href="https://github.com/qiyeboy/IPProxyPool">IPProxy</a>项目，这是一个代理池。</p><p>但是看起来也有一年不更新了..加上一些自己项目的需要，会对这个代理池进行特化的重构。</p><p>fork要是提交过去，也不知道领不领情就是了..2333</p><h1 id="下载IPProxy"><a href="#下载IPProxy" class="headerlink" title="下载IPProxy"></a>下载IPProxy</h1><p><a target="_blank" rel="noopener" href="https://github.com/qiyeboy/IPProxyPool">IPProxy</a>点击此处，到有关页面下载或者运行（前提本机已经安装git工具）如下命令：</p><blockquote><p>git clone <a target="_blank" rel="noopener" href="https://github.com/qiyeboy/IPProxyPool.git">https://github.com/qiyeboy/IPProxyPool.git</a></p></blockquote><p>在这里为了方便我的做法是，使用Pycharm。VCS&gt;Checkout from Version Control&gt;Git:  </p><p><img src= "/customize/img/loading.gif" data-lazy-src="1.png" alt="1.png">  </p><p>将克隆地址“<a target="_blank" rel="noopener" href="https://github.com/qiyeboy/IPProxyPool.git%E2%80%9D%E5%A4%8D%E5%88%B6%E8%BF%9B%E5%8E%BB%E7%A1%AE%E5%AE%9A%E4%B9%9F%E8%A1%8C%E3%80%82">https://github.com/qiyeboy/IPProxyPool.git”复制进去确定也行。</a></p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>该项目中的readme.md说明文件中这样提到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.安装sqlite数据库(一般系统内置):</span><br><span class="line">apt-get install sqlite3</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">2.安装requests,chardet,web.py,gevent psutil:</span><br><span class="line">pip install requests chardet web.py sqlalchemy gevent psutil</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">3.安装lxml:</span><br><span class="line">apt-get install python-lxml</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">注意：</span><br><span class="line"></span><br><span class="line">* python3下的是pip3</span><br><span class="line">* 有时候使用的gevent版本过低会出现自动退出情况，请使用pip install gevent --upgrade更新)</span><br><span class="line">* 在python3中安装web.py，不能使用pip，直接下载py3版本的[源码](https://codeload.github.com/webpy/webpy/zip/py3)进行安装</span><br></pre></td></tr></table></figure><p>其实也不用上面说的这么麻烦就是啦…我给出我的快速部署方案。</p><p>将项目中的requirements.txt文件的内容改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">chardet==2.3.0</span><br><span class="line">gevent==1.2.0</span><br><span class="line">greenlet==0.4.11</span><br><span class="line">lxml==4.2.5</span><br><span class="line">psutil==5.4.8</span><br><span class="line">redis==2.10.5</span><br><span class="line">requests==2.12.4</span><br><span class="line">SQLAlchemy==1.1.4</span><br><span class="line">web.py==0.40.dev0</span><br></pre></td></tr></table></figure><p>你可以根据自己的需要选择是否创建虚拟环境。<br>这里以Ubuntu18.04为例，在requirements.txt的目录中，打开终端的命令窗口，并运行如下命令：</p><blockquote><p>sudo apt-get install -y python3-dev build-essential libssl-dev libffi-dev libffi-dev libffi-dev libxml2 libxml2-dev libxslt1-dev zlib1g-dev</p></blockquote><blockquote><p>pip install -r requirements.txt</p></blockquote><p>安装所需要的依赖包，并依照requirements.txt完成pip list的安装。</p><h1 id="运行使用"><a href="#运行使用" class="headerlink" title="运行使用"></a>运行使用</h1><p>这一步都很简答了，其实项目说明书解释得很清楚。<br>将项目目录clone到当前文件夹</p><p>$ git clone </p><p>切换工程目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd IPProxyPool</span><br></pre></td></tr></table></figure><p>运行脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python IPProxy.py</span><br></pre></td></tr></table></figure><p>成功运行后，打印信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IPProxyPool-----&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;beginning</span><br><span class="line">http:&#x2F;&#x2F;0.0.0.0:8000&#x2F;</span><br><span class="line">IPProxyPool-----&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;db exists ip:0</span><br><span class="line">IPProxyPool-----&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;now ip num &lt; MINNUM,start crawling...</span><br><span class="line">IPProxyPool-----&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Success ip num :134,Fail ip num:7882</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>更多用法参考原项目说明<a target="_blank" rel="noopener" href="https://github.com/qiyeboy/IPProxyPool">IPProxy</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - Ubuntu - python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：Ubuntu安装Redis数据库</title>
      <link href="article/2247/"/>
      <url>article/2247/</url>
      
        <content type="html"><![CDATA[<p>由于项目需要，所以打算重新在Ubuntu18上安装Redis数据库，营造测试环境。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04LTS</span><br><span class="line">Software: Redis Ubuntu版</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>项目的后台服务器，使用的还是Ubuntu16.04就连腾讯云也在提示更新了。但是并不知道Ubuntu18装上Redis会有哪些不同，于是在此做出尝试。</p><h1 id="Redis在Linux-Ubuntu中安装"><a href="#Redis在Linux-Ubuntu中安装" class="headerlink" title="Redis在Linux Ubuntu中安装"></a>Redis在Linux Ubuntu中安装</h1><p>安装办法一般分为两种用：</p><ol><li>从官网<a target="_blank" rel="noopener" href="https://redis.io/">Redis</a>下载离线包安装</li><li>直接通过Ubuntu终端输入命令来安装</li></ol><p>由于以前尝试过使用离线包安装了，本次打算通过命令行在终端中实现安装，并以此为例。</p><blockquote><p>安装前先更新一下apt<br>sudo apt-get update</p></blockquote><blockquote><p>安装Redis服务器端命令<br>sudo apt-get install redis-server</p></blockquote><p>安装不出以外的话，一般都会有如下信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">正在读取软件包列表... 完成</span><br><span class="line">正在分析软件包的依赖关系树       </span><br><span class="line">正在读取状态信息... 完成       </span><br><span class="line">将会同时安装下列软件：</span><br><span class="line">  libjemalloc1 redis-tools</span><br><span class="line">建议安装：</span><br><span class="line">  ruby-redis</span><br><span class="line">下列【新】软件包将被安装：</span><br><span class="line">  libjemalloc1 redis-server redis-tools</span><br><span class="line">升级了 0 个软件包，新安装了 3 个软件包，要卸载 0 个软件包，有 14 个软件包未被升级。</span><br><span class="line">需要下载 634 kB 的归档。</span><br><span class="line">解压缩后会消耗 3,007 kB 的额外空间。</span><br><span class="line">您希望继续执行吗？ [Y/n] y</span><br><span class="line">获取:1 http://cn.archive.ubuntu.com/ubuntu bionic/universe amd64 libjemalloc1 amd64 3.6.0-11 [82.4 kB]</span><br><span class="line">获取:2 http://cn.archive.ubuntu.com/ubuntu bionic/universe amd64 redis-tools amd64 5:4.0.9-1 [516 kB]</span><br><span class="line">获取:3 http://cn.archive.ubuntu.com/ubuntu bionic/universe amd64 redis-server amd64 5:4.0.9-1 [35.4 kB]</span><br><span class="line">已下载 634 kB，耗时 4秒 (170 kB/s)      </span><br><span class="line">正在选中未选择的软件包 libjemalloc1。</span><br><span class="line">(正在读取数据库 ... 系统当前共安装有 172042 个文件和目录。)</span><br><span class="line">正准备解包 .../libjemalloc1_3.6.0-11_amd64.deb  ...</span><br><span class="line">正在解包 libjemalloc1 (3.6.0-11) ...</span><br><span class="line">正在选中未选择的软件包 redis-tools。</span><br><span class="line">正准备解包 .../redis-tools_5%3a4.0.9-1_amd64.deb  ...</span><br><span class="line">正在解包 redis-tools (5:4.0.9-1) ...</span><br><span class="line">正在选中未选择的软件包 redis-server。</span><br><span class="line">正准备解包 .../redis-server_5%3a4.0.9-1_amd64.deb  ...</span><br><span class="line">正在解包 redis-server (5:4.0.9-1) ...</span><br><span class="line">正在处理用于 ureadahead (0.100.0-20) 的触发器 ...</span><br><span class="line">正在设置 libjemalloc1 (3.6.0-11) ...</span><br><span class="line">正在处理用于 libc-bin (2.27-3ubuntu1) 的触发器 ...</span><br><span class="line">正在处理用于 systemd (237-3ubuntu10.3) 的触发器 ...</span><br><span class="line">正在处理用于 man-db (2.8.3-2ubuntu0.1) 的触发器 ...</span><br><span class="line">正在设置 redis-tools (5:4.0.9-1) ...</span><br><span class="line">正在设置 redis-server (5:4.0.9-1) ...</span><br><span class="line">Created symlink /etc/systemd/system/redis.service → /lib/systemd/system/redis-server.service.</span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/redis-server.service → /lib/systemd/system/redis-server.service.</span><br><span class="line">正在处理用于 ureadahead (0.100.0-20) 的触发器 ...</span><br><span class="line">正在处理用于 systemd (237-3ubuntu10.3) 的触发器 ...</span><br></pre></td></tr></table></figure><p>安装完成后，Redis服务器会自动启动，在此检查Redis服务器程序是否正常，有四种方法：</p><blockquote><p>检查Redis服务器系统进程<br>ps -aux|grep redis</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root       4639  0.0  0.2  72796  4140 pts/0    T    21:09   0:00 sudo apt-get install redis-server</span><br><span class="line">redis      5715  0.1  0.1  58548  2256 ?        Ssl  21:11   0:00 /usr/bin/redis-server 127.0.0.1:6379</span><br><span class="line">xx         5876  0.0  0.0  21536  1044 pts/0    S+   21:15   0:00 grep --color=auto redis</span><br></pre></td></tr></table></figure><blockquote><p>通过启动命令检查Redis服务器状态<br>sudo /etc/init.d/redis-server status</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">● redis-server.service - Advanced key-value store</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/redis-server.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Thu 2018-11-01 21:11:47 CST; 6min ago</span><br><span class="line">     Docs: http://redis.io/documentation,</span><br><span class="line">           man:redis-server(1)</span><br><span class="line"> Main PID: 5715 (redis-server)</span><br><span class="line">    Tasks: 4 (<span class="built_in">limit</span>: 2293)</span><br><span class="line">   CGroup: /system.slice/redis-server.service</span><br><span class="line">           └─5715 /usr/bin/redis-server 127.0.0.1:6379</span><br><span class="line"></span><br><span class="line">11月 01 21:11:47 RQ systemd[1]: Starting Advanced key-value store...</span><br><span class="line">11月 01 21:11:47 RQ systemd[1]: redis-server.service: Can<span class="string">&#x27;t open PID file …tory</span></span><br><span class="line"><span class="string">11月 01 21:11:47 RQ systemd[1]: Started Advanced key-value store.</span></span><br><span class="line"><span class="string">Hint: Some lines were ellipsized, use -l to show in full.</span></span><br></pre></td></tr></table></figure><blockquote><p>通过端口监听检查Redis服务器状态<br>netstat -nlt|grep 6379</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN     </span><br><span class="line">tcp6       0      0 ::1:6379                :::*                    LISTEN  </span><br></pre></td></tr></table></figure><blockquote><p>通过简单的启动命令检查<br>redis-server</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6009:C 01 Nov 21:22:59.236 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">6009:C 01 Nov 21:22:59.236 <span class="comment"># Redis version=4.0.9, bits=64, commit=00000000, modified=0, pid=6009, just started</span></span><br><span class="line">6009:C 01 Nov 21:22:59.236 <span class="comment"># Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span></span><br><span class="line">6009:M 01 Nov 21:22:59.237 <span class="comment"># You requested maxclients of 10000 requiring at least 10032 max file descriptors.</span></span><br><span class="line">6009:M 01 Nov 21:22:59.237 <span class="comment"># Server can&#x27;t set maximum open files to 10032 because of OS error: Operation not permitted.</span></span><br><span class="line">6009:M 01 Nov 21:22:59.237 <span class="comment"># Current maximum open files is 4096. maxclients has been reduced to 4064 to compensate for low ulimit. If you need higher maxclients increase &#x27;ulimit -n&#x27;.</span></span><br><span class="line">6009:M 01 Nov 21:22:59.237 <span class="comment"># Creating Server TCP listening socket *:6379: bind: Address already in use</span></span><br></pre></td></tr></table></figure><p>查得到的东西，就说明它跑得正开心。但是这里说的，是redis的服务端。</p><h1 id="通过命令行客户端访问Redis"><a href="#通过命令行客户端访问Redis" class="headerlink" title="通过命令行客户端访问Redis"></a>通过命令行客户端访问Redis</h1><p>一般来说，安装Redis服务器，它会把服务端和客户端都安装了。</p><p>在本机输入redis-cli命令就可以启动，客户端程序访问Redis服务器</p><blockquote><p>redis-cli</p></blockquote><p>成功以后，如下显示（ctr+c即可退出）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h1 id="Redis的配置"><a href="#Redis的配置" class="headerlink" title="Redis的配置"></a>Redis的配置</h1><ol><li>使用Redis的访问账号<br>默认情况下，访问Redis服务器是不需要密码的，出于增加安全性需要设置Redis服务器的访问密码。</li></ol><p>密码：redis233666888</p><p>用vim(如果没有，建议安装，很简单)打开Redis服务器的配置文件redis.conf</p><blockquote><p>sudo vim /etc/redis/redis.conf</p></blockquote><p>敲下“/”然后输入requirepass，这是vim的搜索功能<br><img src= "/customize/img/loading.gif" data-lazy-src="1.png" alt="1.png"></p><p>取消注释requirepass,并且修改</p><blockquote><p>requirepass redis233666888</p></blockquote><p><img src= "/customize/img/loading.gif" data-lazy-src="2.png" alt="2.png"></p><ol start="2"><li>设置服务端可以远程访问<br>Redis服务器不允许远程访问，只允许本机访问，所以需要设置打开远程访问的功能</li></ol><p>用vim(如果没有，建议安装，很简单)打开Redis服务器的配置文件redis.conf</p><blockquote><p>sudo vim /etc/redis/redis.conf</p></blockquote><p>敲下“/”然后输入bind，这是vim的搜索功能(回车以后，按下“n”为查找下一个，“N”为查找上一个！)<br><img src= "/customize/img/loading.gif" data-lazy-src="3.png" alt="3.png"></p><p>把bind 127.0.0.1 ::1注释掉</p><blockquote><p># bind 127.0.0.1 ::1</p></blockquote><ol start="3"><li><p>修改完成，重启生效</p><blockquote><p>sudo /etc/init.d/redis-server restart</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ ok ] Restarting redis-server (via systemctl): redis-server.service.</span><br></pre></td></tr></table></figure></li><li><p>带密码登陆redis客户端</p><blockquote><p>redis-cli -a redis233666888</p></blockquote></li><li><p>监听redis的端口</p><blockquote><p>netstat -nlt|grep 6379</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN     </span><br><span class="line">tcp6       0      0 :::6379                 :::*                    LISTEN</span><br></pre></td></tr></table></figure><p>可以观察到，IP地址从127.0.0.1变成了四个0，表示已经支持远程登陆。</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>安装和配置使用，大概就这么多内容了。关于如何操作Redis那不是本次博文的的主题，日后有机会，再进行说明吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web后端 </tag>
            
            <tag> 小技能 </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疑难杂症：上传GitHub提示：noting to commit,working tree clean。</title>
      <link href="article/14779/"/>
      <url>article/14779/</url>
      
        <content type="html"><![CDATA[<p>帮人远程弄hexo的时候，碰到了这样的错误。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10  </span><br><span class="line">IDE： JetBrains Pycharm 2018.2.4 x64  </span><br><span class="line">Python: 3.6.2</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>使用“hexo d”命令，上传博客到GitHubPages时出现了这样的提示。</p><blockquote><p>报错信息：”nothing to commit, working tree clean”</p></blockquote><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>在网上查了许久，上面所描述的情况多种多样。但是就我个人认为，主要的原因是：</p><p>是因为并没有修改要提交的项目，报的提示的意思是，项目（文件夹）没有被修改，没必要提交。</p><p>而hexo进行提交博客，需要使用hexo d命令，但是它是需要是使用 hexo-deployer-git 包的，</p><p>如果没有安装，它检索不到博文，进而提交时，让github发现项目没有发生变化，于是提交失败，弹出这种提示。</p><p>那么安装 hexo-deployer-git 就行了。</p><blockquote><p>npm install hexo-deployer-git</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其他的情况碰到noting to commit,working tree clean，同理。首先要让你的项目产生变化，才能提交。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 疑难杂症 - Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疑难杂症：PyMySQL插入数据时报错：&#39;latin-1&#39; codec can&#39;t encode character 的解决方案</title>
      <link href="article/29445/"/>
      <url>article/29445/</url>
      
        <content type="html"><![CDATA[<p>这两天在用python写DAO轮子，方便之后爬虫的数据存储。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10  </span><br><span class="line">IDE: JetBrains Pycharm 2018.2.4 x64  </span><br><span class="line">Python: 3.6.2</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>尝试在用INSERT INTO进行插入数据的时候，出现了报错。</p><blockquote><p>报错信息：”latin-1’ codec can’t encode character”</p></blockquote><p>这一般是因为编码不一致导致的，部分报错代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    <span class="comment"># 创建连接对象</span></span><br><span class="line">    conn = MySQLdb.connect(</span><br><span class="line">        host=connect_dict[<span class="string">&quot;host&quot;</span>],</span><br><span class="line">        port=connect_dict[<span class="string">&quot;port&quot;</span>],</span><br><span class="line">        user=connect_dict[<span class="string">&quot;user&quot;</span>],</span><br><span class="line">        passwd=connect_dict[<span class="string">&quot;passwd&quot;</span>],</span><br><span class="line">        db=connect_dict[<span class="string">&quot;db&quot;</span>],</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">return</span> conn</span><br><span class="line">except Exception as e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;FTP登陆失败，请检查主机号、用户名、密码是否正确:%s&quot;</span>%e)</span><br><span class="line">    sys.exit(0)</span><br></pre></td></tr></table></figure><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>由于当初创建数据库时，选择的编码格式为UTF8，所以在用PyMySQL模块实例化连接对象的时候，要加入对编码的声明。</p><blockquote><p>使用XXX.set_character_set(‘utf8’)来处理即可</p></blockquote><p>将其部分修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> try:</span><br><span class="line">    <span class="comment"># 创建连接对象</span></span><br><span class="line">    conn = MySQLdb.connect(</span><br><span class="line">        host=connect_dict[<span class="string">&quot;host&quot;</span>],</span><br><span class="line">        port=connect_dict[<span class="string">&quot;port&quot;</span>],</span><br><span class="line">        user=connect_dict[<span class="string">&quot;user&quot;</span>],</span><br><span class="line">        passwd=connect_dict[<span class="string">&quot;passwd&quot;</span>],</span><br><span class="line">        db=connect_dict[<span class="string">&quot;db&quot;</span>],</span><br><span class="line">    )</span><br><span class="line">    conn.set_character_set(<span class="string">&#x27;utf8&#x27;</span>)      <span class="comment"># 声明编码格式</span></span><br><span class="line">    <span class="built_in">return</span> conn</span><br><span class="line">except Exception as e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;FTP登陆失败，请检查主机号、用户名、密码是否正确:%s&quot;</span>%e)</span><br><span class="line">    sys.exit(0)</span><br></pre></td></tr></table></figure><p>即可解决这个问题！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 疑难杂症 - python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：使用操作FTP服务器实例！（上传，下载，遍历删除等）</title>
      <link href="article/48354/"/>
      <url>article/48354/</url>
      
        <content type="html"><![CDATA[<p>项目的需要，利用ftplib模块开发的FTP客户端</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10</span><br><span class="line">IDE: JetBrains Python 2018.2.4 x64</span><br><span class="line">语言: Pytthon 3.65</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>年初的时候在知乎上查了许久，得知了几个不错的图床。其中一个名为<a target="_blank" rel="noopener" href="https://tu.aixinxi.net/index.php">爱信息图床</a>的图床吸引了的注意。</p><p>这个图床能托管的不仅仅是图，还可以托管很多各种文件，并提供CDN服务，很强大，但是很可惜的是它没有API接口，一切只能通过注册登陆上传。</p><p>抱着试一试的心情，我向站点上看到的举报邮箱发出Email，经过一番沟通，居然申请到了专属的FTP通道，很是开心。</p><p>于是Python的FTP操作需求就在这里诞生了，本文进行详细的开发。</p><h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><p>Python中官方包中自带有的ftplib模块定义了FTP类，首先来了解一下该模块所带的方法以及其作用</p><blockquote><p>ftp登陆连接<br>from ftplib import FTP            # 加载ftp模块<br>ftp=FTP()                         # 设置变量<br>ftp.set_debuglevel(2)             # 打开调试级别2，显示详细信息<br>ftp.connect(“IP”,”port”)          # 连接的ftp sever和端口<br>ftp.login(“user”,”password”)      # 连接的用户名，密码<br>print ftp.getwelcome()            # 打印出欢迎信息<br>ftp.cmd(“xxx/xxx”)                # 进入远程目录<br>bufsize=1024                      # 设置的缓冲区大小<br>filename=”filename.txt”           # 需要下载的文件<br>file_handle=open(filename,”wb”).write #以写模式在本地打开文件<br>ftp.retrbinaly(“RETR filename.txt”,file_handle,bufsize) # 接收服务器上文件并写入本地文件<br>ftp.set_debuglevel(0)             # 关闭调试模式<br>ftp.quit()                        # 退出ftp  </p><p>ftp相关命令操作<br>ftp.cwd(pathname)                 # 设置FTP当前操作的路径<br>ftp.dir()                         # 显示目录下所有目录信息<br>ftp.nlst()                        # 获取目录下的文件<br>ftp.mkd(pathname)                 # 新建远程目录<br>ftp.pwd()                         # 返回当前所在位置<br>ftp.rmd(dirname)                  # 删除远程目录<br>ftp.delete(filename)              # 删除远程文件<br>ftp.rename(fromname, toname)      # 将fromname修改名称为toname。<br>ftp.storbinaly(“STOR filename.txt”,file_handel,bufsize)  # 上传目标文件<br>ftp.retrbinary(“RETR filename.txt”,file_handel,bufsize)  # 下载FTP文件  </p></blockquote><p>示例代码演示，具体用法已于注释中写出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ftp演示，首先要在本机或远程服务器开启ftp功能</span></span><br><span class="line">import sys,os,ftplib,socket,hashlib</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=====================FTP客户端=====================&quot;</span>);</span><br><span class="line">HOST = <span class="string">&#x27;&#x27;</span>  <span class="comment"># FTP主机地址</span></span><br><span class="line">username = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 用户名</span></span><br><span class="line">password = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 密码</span></span><br><span class="line">buffer_size = 8192  <span class="comment"># 缓冲区大小</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接登陆</span></span><br><span class="line">def connect():</span><br><span class="line">    try:</span><br><span class="line">        ftp = ftplib.FTP(HOST)  <span class="comment"># 实例化FTP对象</span></span><br><span class="line">        ftp.login(username, password)  <span class="comment"># 登录</span></span><br><span class="line">        ftp.set_pasv(False)  <span class="comment"># 如果被动模式由于某种原因失败，请尝试使用活动模式。</span></span><br><span class="line">        <span class="built_in">print</span>(ftp.getwelcome())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;已连接到： %s&#x27;</span> % HOST)</span><br><span class="line">        <span class="built_in">return</span> ftp</span><br><span class="line">    except (socket.error,socket.gaierror):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;FTP登陆失败，请检查主机号、用户名、密码是否正确&quot;</span>)</span><br><span class="line">        sys.exit(0)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取目录下文件或文件夹详细信息</span></span><br><span class="line">def dirInfo(ftp):</span><br><span class="line">    ftp.dir()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取目录下文件或文件夹的列表信息，并清洗去除“. ..”</span></span><br><span class="line">def nlstListInfo(ftp):</span><br><span class="line">    files_list = ftp.nlst()</span><br><span class="line">    <span class="built_in">return</span> [file <span class="keyword">for</span> file <span class="keyword">in</span> files_list <span class="keyword">if</span> file != <span class="string">&quot;.&quot;</span> and file !=<span class="string">&quot;..&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前路径</span></span><br><span class="line">def pwdinfo(ftp):</span><br><span class="line">    pwd_path = ftp.pwd()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;FTP当前路径:&quot;</span>, pwd_path)</span><br><span class="line">    <span class="built_in">return</span> ftp.pwd()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中断并退出</span></span><br><span class="line">def disconnect(ftp):</span><br><span class="line">    ftp.quit()  <span class="comment"># FTP.close()：单方面的关闭掉连接。FTP.quit():发送QUIT命令给服务器并关闭掉连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录跳转</span></span><br><span class="line">def pwdSkip(ftp,dirPathName):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    跳转到指定目录</span></span><br><span class="line"><span class="string">    :param ftp: 调用connect()方法的变量</span></span><br><span class="line"><span class="string">    :param dirPathName: FTP服务器的绝对路径</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    try:</span><br><span class="line">        ftp.cwd(dirPathName)             <span class="comment"># 重定向到指定路径</span></span><br><span class="line">    except ftplib.error_perm:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;不可以进入目录：&quot;%s&quot;&#x27;</span> % dirPathName)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;当前所在位置:%s&quot;</span> % ftp.pwd())  <span class="comment"># 返回当前所在位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断文件与目录</span></span><br><span class="line">def checkFileDir(ftp,file_name):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    判断当前目录下的文件与文件夹</span></span><br><span class="line"><span class="string">    :param ftp: 实例化的FTP对象</span></span><br><span class="line"><span class="string">    :param file_name: 文件名/文件夹名</span></span><br><span class="line"><span class="string">    :return:返回字符串“File”为文件，“Dir”问文件夹，“Unknow”为无法识别</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    rec = <span class="string">&quot;&quot;</span></span><br><span class="line">    try:</span><br><span class="line">        rec = ftp.cwd(file_name)   <span class="comment"># 需要判断的元素</span></span><br><span class="line">        ftp.cwd(<span class="string">&quot;..&quot;</span>)   <span class="comment"># 如果能通过路劲打开必为文件夹，在此返回上一级</span></span><br><span class="line">    except ftplib.error_perm as fe:</span><br><span class="line">        rec = fe <span class="comment"># 不能通过路劲打开必为文件，抓取其错误信息</span></span><br><span class="line">    finally:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Not a directory&quot;</span> <span class="keyword">in</span> str(rec):</span><br><span class="line">            <span class="built_in">return</span> <span class="string">&quot;File&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;Current directory is&quot;</span> <span class="keyword">in</span> str(rec):</span><br><span class="line">            <span class="built_in">return</span> <span class="string">&quot;Dir&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">return</span> <span class="string">&quot;Unknow&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件名加密</span></span><br><span class="line">def fileNameMD5(filepath):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    文件名加密MD5</span></span><br><span class="line"><span class="string">    :param filepath: 本地需要加密的文件绝对路径</span></span><br><span class="line"><span class="string">    :return: 返回加密后的文件名</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    file_name = os.path.split(filepath)[-1]     <span class="comment"># 获取文件全名</span></span><br><span class="line">    encryption = hashlib.md5()      <span class="comment"># 实例化MD5</span></span><br><span class="line">    try:</span><br><span class="line">        file_format = os.path.splitext(file_name)[-1]  <span class="comment"># 截取文件格式</span></span><br><span class="line">        file_name_section = os.path.splitext(file_name)[0]</span><br><span class="line">    except IndexError as e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s 文件有误！未发现后缀格式！报错信息：%s&#x27;</span> %(file_name,e))</span><br><span class="line">        <span class="built_in">return</span> <span class="string">&quot;无后缀格式的文件&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        encryption.update(file_name_section.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        newname = <span class="string">&quot;zzuliacgn_&quot;</span> + encryption.hexdigest() + <span class="string">&quot;.&quot;</span> + file_format</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;MD5加密前为 ：&#x27;</span> + file_name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;MD5加密后为 ：&#x27;</span> + newname)</span><br><span class="line">        <span class="built_in">return</span> newname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传文件</span></span><br><span class="line">def upload(ftp, filepath,file_name = None):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    上传文件</span></span><br><span class="line"><span class="string">    :param ftp: 实例化的FTP对象</span></span><br><span class="line"><span class="string">    :param filepath: 上传文件的本地路径</span></span><br><span class="line"><span class="string">    :param file_name: 上传后的文件名（结合fileNameMD5()方法用）</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    f = open(filepath, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> file_name == None:</span><br><span class="line">        file_name = os.path.split(filepath)[-1]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> find(ftp, file_name) or file_name == <span class="string">&quot;无后缀格式的文件&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 已存在或识别为无后缀格式的文件,上传终止&quot;</span>%file_name) <span class="comment"># 上传本地文件,同名文件会替换</span></span><br><span class="line">        <span class="built_in">return</span> False</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        try:</span><br><span class="line">            ftp.storbinary(<span class="string">&#x27;STOR %s&#x27;</span>%file_name, f, buffer_size)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;成功上传文件： &quot;%s&quot;&#x27;</span> %file_name)</span><br><span class="line">        except ftplib.error_perm:</span><br><span class="line">            <span class="built_in">return</span> False</span><br><span class="line">    <span class="built_in">return</span> True</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line">def download(ftp, filename):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    下载文件</span></span><br><span class="line"><span class="string">    :param ftp: 实例化的FTP对象</span></span><br><span class="line"><span class="string">    :param filename: 需要从FTP下载的文件名</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    f = open(filename,<span class="string">&quot;wb&quot;</span>).write</span><br><span class="line">    try:</span><br><span class="line">        ftp.retrbinary(<span class="string">&quot;RETR %s&quot;</span>%filename, f, buffer_size)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;成功下载文件： &quot;%s&quot;&#x27;</span> % filename)</span><br><span class="line">    except ftplib.error_perm:</span><br><span class="line">        <span class="built_in">return</span> False</span><br><span class="line">    <span class="built_in">return</span> True</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找是否存在指定文件或目录</span></span><br><span class="line">def find(ftp,filename):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    查找是否存在指定文件或目录</span></span><br><span class="line"><span class="string">    :param ftp:  实例化的FTP对象</span></span><br><span class="line"><span class="string">    :param filename:  需要查询是否存在的文件名</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    ftp_f_list = ftp.nlst()  <span class="comment"># 获取目录下文件、文件夹列表</span></span><br><span class="line">    <span class="keyword">if</span> filename <span class="keyword">in</span> ftp_f_list:</span><br><span class="line">        <span class="built_in">return</span> True</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">return</span> False</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否有存在指定目录并创建</span></span><br><span class="line">def mkdir(ftp,dirpath):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    检查是否有存在指定目录并创建（懒人用的方法）</span></span><br><span class="line"><span class="string">    :param ftp: 实例化的FTP对象</span></span><br><span class="line"><span class="string">    :param dirpath: 需要创建的文件夹名及路径</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> find(ftp, dirpath):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s目录已存在！自行跳转到该目录！&quot;</span>%dirpath)</span><br><span class="line">        pwdSkip(ftp, dirpath)       <span class="comment"># 设置FTP当前操作的路径</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未发现%s同名文件夹！&quot;</span> % dirpath)</span><br><span class="line">        try:</span><br><span class="line">            ftp.mkd(dirpath)    <span class="comment"># 新建远程目录</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;创建新目录%s！并自行跳转到该目录！&quot;</span> % dirpath)</span><br><span class="line">            pwdSkip(ftp, dirpath)    <span class="comment"># 设置FTP当前操作的路径</span></span><br><span class="line">        except ftplib.error_perm:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;目录已经存在或无法创建&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除目录下文件</span></span><br><span class="line">def DeleteFile(ftp,filepath = <span class="string">&quot;/&quot;</span>,file_name = None):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    删除目录下文件,字面意思</span></span><br><span class="line"><span class="string">    :param ftp: 实例化的FTP对象</span></span><br><span class="line"><span class="string">    :param filepath: 操作的路径，默认值“/”</span></span><br><span class="line"><span class="string">    :param file_name: 需要删除的文件名，若不填，默认删除目录下所有的文件</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    pwdSkip(ftp,filepath)   <span class="comment"># 跳转到操作目录</span></span><br><span class="line">    <span class="keyword">if</span> find(ftp,file_name) and file_name != None:</span><br><span class="line">        ftp.delete(file_name)   <span class="comment"># 删除文件</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 已删除！&quot;</span>%file_name)</span><br><span class="line">    <span class="keyword">elif</span> file_name == None:</span><br><span class="line">        <span class="comment"># print(&quot;file_name:%s 将删除 %s 目录下所有文件（目录除外）！&quot; % (file_name,ftp.pwd()))</span></span><br><span class="line">        filelist = nlstListInfo(ftp)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> filelist:</span><br><span class="line">            <span class="keyword">if</span> checkFileDir(ftp,i) == <span class="string">&quot;File&quot;</span>:</span><br><span class="line">                ftp.delete(i)  <span class="comment"># 删除文件</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;%s 是文件，已删除！&quot;</span> % i)</span><br><span class="line">            <span class="keyword">elif</span> checkFileDir(ftp,i) == <span class="string">&quot;Dir&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;%s 是文件夹&quot;</span> % i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;%s 无法识别，跳过&quot;</span> % i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 未找到，删除中止！&quot;</span> % file_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除目录下的空文件夹</span></span><br><span class="line">def DeleteDir(ftp,dirpath,dir_name = None):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    删除目录下的空文件夹，非空文件夹和文件不会删除</span></span><br><span class="line"><span class="string">    :param ftp: 实例化的FTP对象</span></span><br><span class="line"><span class="string">    :param dirpath: 操作的路径</span></span><br><span class="line"><span class="string">    :param dir_name: 需要删除的文件夹名，若不填，默认删除目录下所有的文件</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    pwdSkip(ftp, dirpath)  <span class="comment"># 跳转到操作目录</span></span><br><span class="line">    <span class="keyword">if</span> find(ftp,dir_name) and dir_name != None:</span><br><span class="line">        ftp.delete(dir_name)   <span class="comment"># 删除文件</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 已删除！&quot;</span>%dir_name)</span><br><span class="line">    <span class="keyword">elif</span> dir_name == None:</span><br><span class="line">        <span class="comment"># print(&quot;file_name:%s 将删除 %s 目录下所有文件夹（文件除外）！&quot; % (dir_name,ftp.pwd()))</span></span><br><span class="line">        filelist = nlstListInfo(ftp)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> filelist:</span><br><span class="line">            <span class="keyword">if</span> checkFileDir(ftp,i) == <span class="string">&quot;File&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;%s 是文件，不与理会！&quot;</span> % i)</span><br><span class="line">            <span class="keyword">elif</span> checkFileDir(ftp,i) == <span class="string">&quot;Dir&quot;</span>:</span><br><span class="line">                try:</span><br><span class="line">                    ftp.rmd(i)  <span class="comment"># 删除文件)  # 重定向到指定路径</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;%s 是文件夹，已删除！&quot;</span> % i)</span><br><span class="line">                except ftplib.error_perm as e:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;无法删除 %s，文件夹里似乎还有东西！报错信息：&quot;%s&quot;&#x27;</span> %(i,e))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;%s 无法识别，跳过&quot;</span> % i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 未找到，删除中止！&quot;</span> % dir_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询目录下的非空文件夹</span></span><br><span class="line">def listdir(ftp,fulllist):</span><br><span class="line">    dir_list = []</span><br><span class="line">    haveDir_list = []</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> fulllist:  <span class="comment"># 遍历文件夹</span></span><br><span class="line">        <span class="keyword">if</span> checkFileDir(ftp, file) == <span class="string">&quot;Dir&quot;</span>:  <span class="comment"># 判断是否是文件夹，是文件夹才打开</span></span><br><span class="line">            dir_list.append(file)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> dir_list:  <span class="comment"># 遍历文件夹</span></span><br><span class="line">        ftp.cwd(file)</span><br><span class="line">        <span class="keyword">if</span> nlstListInfo(ftp) != []:  <span class="comment"># 判断是否是文件夹，是文件夹才打开</span></span><br><span class="line">            haveDir_list.append(file)</span><br><span class="line">        ftp.cwd(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">    <span class="built_in">return</span> haveDir_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归器</span></span><br><span class="line">def TraversingIter(ftp,path = <span class="string">&quot;/&quot;</span>):</span><br><span class="line">    ftp.cwd(path)</span><br><span class="line">    haveDir_list = listdir(ftp, nlstListInfo(ftp))</span><br><span class="line">    <span class="keyword">if</span> haveDir_list == []:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s&quot;</span>%(ftp.pwd()))</span><br><span class="line">        <span class="built_in">return</span> ftp.pwd()</span><br><span class="line">    it = iter(haveDir_list)</span><br><span class="line">    <span class="built_in">return</span> TraversingIter(ftp,next(it))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历删除文件夹或文件</span></span><br><span class="line">def DeleteDirFiles(ftp,dirpath = <span class="string">&quot;/&quot;</span>):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    搜索（遍历）删除文件夹或文件</span></span><br><span class="line"><span class="string">    :param ftp: 调用connect()方法的变量</span></span><br><span class="line"><span class="string">    :param dirpath:限定搜索的路径范围，默认值为“/”根目录</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    path = <span class="string">&quot;&quot;</span></span><br><span class="line">    pwdSkip(ftp, dirpath)</span><br><span class="line">    <span class="keyword">while</span> dirpath != path:</span><br><span class="line">        path = TraversingIter(ftp, dirpath)</span><br><span class="line">        DeleteFile(ftp, path)    <span class="comment">#删除该目录下所有文件</span></span><br><span class="line">        DeleteDir(ftp, path)    <span class="comment">#删除该目录下所有文件</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;删除完毕!%s目录下已清空&quot;</span>%dirpath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line">def main():</span><br><span class="line">    <span class="comment"># 连接登陆ftp（必须的）</span></span><br><span class="line">    ftp = connect()</span><br><span class="line">    try:</span><br><span class="line">        <span class="comment"># 以下是各种方法的使用示例</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取目录下文件或文件夹详细信息</span></span><br><span class="line">        dirInfo(ftp)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取目录下文件或文件夹的列表信息，并清洗去除“. ..”</span></span><br><span class="line">        nlstListInfo(ftp)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取当前路径</span></span><br><span class="line">        pwdinfo(ftp)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 目录跳转</span></span><br><span class="line">        pwdSkip(ftp, <span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断文件与目录</span></span><br><span class="line">        file_name = <span class="string">&quot;test&quot;</span>  <span class="comment"># 需要判断的文件名或者是文件夹名</span></span><br><span class="line">        checkFileDir(ftp, file_name)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 文件名加密并上传</span></span><br><span class="line">        filepath = <span class="string">&quot;D:\\workspace\\PythonSpace\\Spyder\\RequestsSpyder\\1.jpg&quot;</span>  <span class="comment"># 需要加密的文件名的绝对路径</span></span><br><span class="line">        file_name = fileNameMD5(filepath)   <span class="comment"># 此函数，仅用于本地，一般结合上传文件方法使用</span></span><br><span class="line">        upload(ftp, filepath, file_name)    <span class="comment"># 上文件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 下载文件</span></span><br><span class="line">        dirPathName = <span class="string">&quot;/&quot;</span></span><br><span class="line">        pwdSkip(ftp, dirPathName)   <span class="comment"># 跳转到FTP上的/目录，根据自己的需要修改</span></span><br><span class="line">        filename = <span class="string">&quot;test&quot;</span>   <span class="comment"># 需要从FTP上下载的文件名</span></span><br><span class="line">        download(ftp, filename)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查找是否存在指定文件或目录</span></span><br><span class="line">        filename = <span class="string">&quot;test&quot;</span></span><br><span class="line">        <span class="keyword">if</span> find(ftp, filename):     <span class="comment"># 此函数，一般结合其他方法使用,返回值为True&amp;False</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;存在&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;不存在&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查是否有存在指定目录并创建</span></span><br><span class="line">        dirpath = <span class="string">&quot;test&quot;</span>        <span class="comment"># 想要创建的文件夹名</span></span><br><span class="line">        mkdir(ftp, dirpath)     <span class="comment"># 在FTP新建一个名为“test”的文件夹</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 删除目录下文件</span></span><br><span class="line">        filepath = <span class="string">&quot;/test&quot;</span>      <span class="comment"># 需要删除的文件所在的路径</span></span><br><span class="line">        file_name = <span class="string">&quot;test233.jpg&quot;</span>       <span class="comment"># 需要删除的文件名</span></span><br><span class="line">        DeleteFile(ftp, filepath, file_name)    <span class="comment"># 如果filepath，file_name不传值，默认filepath为“/”目录，file_name默认为None(详见该方法的说明)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 删除目录下的文件夹</span></span><br><span class="line">        filepath = <span class="string">&quot;/test&quot;</span></span><br><span class="line">        file_name = <span class="string">&quot;test233.jpg&quot;</span></span><br><span class="line">        DeleteFile(ftp, filepath, file_name)        <span class="comment"># 用法同上，只是它只删除空的文件夹，不删除文件和非空文件夹</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查询目录下的非空文件夹</span></span><br><span class="line">        listdir(ftp, nlstListInfo(ftp))     <span class="comment"># 此方法一般不单独使用，需结合 nlstListInfo()方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历删除文件夹或文件</span></span><br><span class="line">        DeleteDirFiles(ftp)        <span class="comment"># 删光光！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ....</span></span><br><span class="line"></span><br><span class="line">    except ftplib.error_perm as e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    finally:</span><br><span class="line">        <span class="comment"># 退出ftp（必须的）</span></span><br><span class="line">        disconnect(ftp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过这次机会，对这个模块有了挺深的了解。并不难，很好摸清。ftplib模块说真的，并不强大，但是对比了一下成品的FTP客户端，我也释怀了。</p><p>总的来说马马虎虎吧？有了自己开发的这个样例，那么今后有关的1FTP的自动化部署就简单多了！</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：判断FTP服务器目录里是文件夹还是文件的方案！</title>
      <link href="article/19100/"/>
      <url>article/19100/</url>
      
        <content type="html"><![CDATA[<p>Python原生的ftplib模块本身并不支持分辨FTP服务器上到底是文件夹还是文件。在这里，我总结了一个办法。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10  </span><br><span class="line">IDE: JetBrains Python 2018.2.4 x64  </span><br><span class="line">语言: Pytthon 3.65  </span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Python原生的ftplib模块本身并不支持分辨FTP服务器上到底是文件夹还是文件。  </p><p>也许会有人认为为啥不用os.path.isdir()和os.path.isfile()方法来分辨，在这里我可以很明确的讲。</p><p>对于在FTP服务器进行分辨文件夹还是文件这个需求上，os.path.isdir()和os.path.isfile()几乎没有作用！误判率极高！</p><h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><p>经过一番思考，我想出了这样的解决思路。</p><p>使用ftplib模块的ftp.cwd()方法向目录下所有元素发出打开目录的请求，<br>然后用try错误抓取错误信息，<br>最后通过对错误信息进行if判断，来达成分辨FTP服务器某一目录下谁是文件谁是文件夹的目的。</p><p>关键代码示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def checkFileDir(ftp,file_name):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    判断当前目录下的文件与文件夹</span></span><br><span class="line"><span class="string">    :param ftp: 实例化的FTP对象</span></span><br><span class="line"><span class="string">    :param file_name: 文件名/文件夹名</span></span><br><span class="line"><span class="string">    :return:返回字符串“File”为文件，“Dir”问文件夹，“Unknow”为无法识别</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    rec = <span class="string">&quot;&quot;</span></span><br><span class="line">    try:</span><br><span class="line">        rec = ftp.cwd(file_name)   <span class="comment"># 需要判断的元素</span></span><br><span class="line">        ftp.cwd(<span class="string">&quot;..&quot;</span>)   <span class="comment"># 如果能通过路劲打开必为文件夹，在此返回上一级</span></span><br><span class="line">    except ftplib.error_perm as fe:</span><br><span class="line">        rec = fe <span class="comment"># 不能通过路劲打开必为文件，抓取其错误信息</span></span><br><span class="line">    finally:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Not a directory&quot;</span> <span class="keyword">in</span> str(rec):</span><br><span class="line">            <span class="built_in">return</span> <span class="string">&quot;File&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;Current directory is&quot;</span> <span class="keyword">in</span> str(rec):</span><br><span class="line">            <span class="built_in">return</span> <span class="string">&quot;Dir&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">return</span> <span class="string">&quot;Unknow&quot;</span></span><br></pre></td></tr></table></figure><p>使用FileZilla客户端查看FTP服务器：<br><img src= "/customize/img/loading.gif" data-lazy-src="1.png" alt="1.png">  </p><p>使用示例代码判断的效果图：<br><img src= "/customize/img/loading.gif" data-lazy-src="2.png" alt="2.png"></p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疑难杂症：Python操作FTP时，TimeoutError: [WinError 10060] 由于连接方在一段时间后没有正确答复或连接的主机没有反应，连接尝试失败。</title>
      <link href="article/26469/"/>
      <url>article/26469/</url>
      
        <content type="html"><![CDATA[<p>尝试完使用客户端登陆FTP服务器，以后便开始着手使用Python进行FTP操作。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windows10  </span><br><span class="line">IDE： JetBrains Pycharm 2018.2.4 x64  </span><br><span class="line">Python： 3.6.2</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>根据近日写的简单实例，进一步编写，<a target="_blank" rel="noopener" href="https://desirefire.github.io/2018/10/22/Python%EF%BC%9APython%E8%BF%9E%E6%8E%A5FTP%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/">Python连接FTP服务器的简单实例</a><br>发现，能够通过Python登陆FTP,但是却无法进行如下操作：</p><blockquote><p>ftp.dir()                         #显示目录下所有目录信息<br>ftp.nlst()                        #获取目录下的文件<br>ftp.mkd(pathname)                 #新建远程目录  </p></blockquote><p>这是ftplib模块自带的方法，用于FTP操作时获取信息的，当使用它们的时候出现如下报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">=====================FTP客户端=====================</span><br><span class="line">220---------- Welcome to Pure-FTPd [privsep] [TLS] ----------</span><br><span class="line">220-You are user number 1 of 50 allowed.</span><br><span class="line">220-Local time is now 17:38. Server port: 21.</span><br><span class="line">220-This is a private system - No anonymous login</span><br><span class="line">220-IPv6 connections are also welcome on this server.</span><br><span class="line">220 You will be disconnected after 15 minutes of inactivity.</span><br><span class="line">已连接到： ftp.aixinxi.net</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;D:/workspace/PythonSpace/Spyder/Spyder_aixinxi/aixinxi_FTPlogin.py&quot;</span>, line 139, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    main()</span><br><span class="line">  File <span class="string">&quot;D:/workspace/PythonSpace/Spyder/Spyder_aixinxi/aixinxi_FTPlogin.py&quot;</span>, line 118, <span class="keyword">in</span> main</span><br><span class="line">    mkdir(ftp,dirpath)</span><br><span class="line">  File <span class="string">&quot;D:/workspace/PythonSpace/Spyder/Spyder_aixinxi/aixinxi_FTPlogin.py&quot;</span>, line 84, <span class="keyword">in</span> mkdir</span><br><span class="line">    <span class="keyword">if</span> find(ftp, dirpath):</span><br><span class="line">  File <span class="string">&quot;D:/workspace/PythonSpace/Spyder/Spyder_aixinxi/aixinxi_FTPlogin.py&quot;</span>, line 76, <span class="keyword">in</span> find</span><br><span class="line">    ftp_f_list = ftp.nlst()  <span class="comment">#获取目录下文件、文件夹列表</span></span><br><span class="line">  File <span class="string">&quot;D:\Anaconda3\lib\ftplib.py&quot;</span>, line 559, <span class="keyword">in</span> nlst</span><br><span class="line">    self.retrlines(cmd, files.append)</span><br><span class="line">  File <span class="string">&quot;D:\Anaconda3\lib\ftplib.py&quot;</span>, line 468, <span class="keyword">in</span> retrlines</span><br><span class="line">    with self.transfercmd(cmd) as conn, \</span><br><span class="line">  File <span class="string">&quot;D:\Anaconda3\lib\ftplib.py&quot;</span>, line 399, <span class="keyword">in</span> transfercmd</span><br><span class="line">    <span class="built_in">return</span> self.ntransfercmd(cmd, rest)[0]</span><br><span class="line">  File <span class="string">&quot;D:\Anaconda3\lib\ftplib.py&quot;</span>, line 361, <span class="keyword">in</span> ntransfercmd</span><br><span class="line">    source_address=self.source_address)</span><br><span class="line">  File <span class="string">&quot;D:\Anaconda3\lib\socket.py&quot;</span>, line 724, <span class="keyword">in</span> create_connection</span><br><span class="line">    raise err</span><br><span class="line">  File <span class="string">&quot;D:\Anaconda3\lib\socket.py&quot;</span>, line 713, <span class="keyword">in</span> create_connection</span><br><span class="line">    sock.connect(sa)</span><br><span class="line">TimeoutError: [WinError 10060] 由于连接方在一段时间后没有正确答复或连接的主机没有反应，连接尝试失败。</span><br></pre></td></tr></table></figure><p>主要保存信息：</p><blockquote><p>TimeoutError: [WinError 10060] 由于连接方在一段时间后没有正确答复或连接的主机没有反应，连接尝试失败。</p></blockquote><p>经过一番查询，从stackoverflow上找到了答案，<a target="_blank" rel="noopener" href="https://stackoverflow.com/questions/3451817/python-ftplib-timing-out">Python ftplib超时</a>  </p><p>很可能是主动和被动模式之间的冲突。确保满足以下条件之一：</p><p>首先确保服务器支持PASV模式，并且您的客户端正在设置PASV模式，如果服务器不支持被动模式，则防火墙必须支持主动模式FTP传输。  </p><p>文档中说到，在Python 2.1及更高版本中默认为被动模式。</p><p>在活动模式（非PASV）中，客户端发送PORT命令，告诉服务器在该端口上启动DATA连接，这需要您的防火墙知道PORT命令，以便它可以将传入的DATA连接转发给您 - 几乎没有防火墙支持这个。</p><p>在被动模式下，客户端打开DATA连接，服务器使用它（服务器在打开数据连接时是“被动”）。</p><p>如果没有使用被动模式，请执行ftp.set_pasv(True)并查看是否会产生影响。</p><p>在这里，我的需求是需要主动模式！</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>在发送FTP登陆请求的代码中，加入：</p><blockquote><p>ftp.set_pasv(False)  # 如果被动模式由于某种原因失败，请尝试使用活动模式。</p></blockquote><p>以下是我为操作FTP服务器而用Python开发的控制器的部分代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接登陆</span></span><br><span class="line">import sys,os,ftplib,socket,hashlib</span><br><span class="line">def connect():</span><br><span class="line">    try:</span><br><span class="line">        ftp = ftplib.FTP(HOST)  <span class="comment"># 实例化FTP对象</span></span><br><span class="line">        ftp.login(username, password)  <span class="comment"># 登录</span></span><br><span class="line">        ftp.set_pasv(False)  <span class="comment"># 如果被动模式由于某种原因失败，请尝试使用活动模式。</span></span><br><span class="line">        <span class="built_in">print</span>(ftp.getwelcome())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;已连接到： %s&#x27;</span> % HOST)</span><br><span class="line">        <span class="built_in">return</span> ftp</span><br><span class="line">    except (socket.error,socket.gaierror):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;FTP登陆失败，请检查主机号、用户名、密码是否正确&quot;</span>)</span><br><span class="line">        sys.exit(0)</span><br></pre></td></tr></table></figure><p>即可解决这个问题！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 疑难杂症 - FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疑难杂症：FTP无法登陆，发送AUTH TLS时提示：无法连接到服务器</title>
      <link href="article/35537/"/>
      <url>article/35537/</url>
      
        <content type="html"><![CDATA[<p>使用FileZilla连接服务器的时候，无法登陆，从FTP日志中看到客户端在执行AUTH TLS命令后，提示“无法连接到服务器”的错误信息。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10  </span><br><span class="line">SoftWare: FileZilla 3.37.4</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>使用FileZilla连接服务器的时候，无法登陆，从FTP日志中看到客户端在执行AUTH TLS命令后，提示“无法连接到服务器”的错误信息，具体内容如下面的日志所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">状态: 正在连接 xxxx...</span><br><span class="line">状态: 连接建立，等待欢迎消息...</span><br><span class="line">响应: 220---------- Welcome to Pure-FTPd [privsep] [TLS] ----------</span><br><span class="line">响应: 220-You are user number 2 of 50 allowed.</span><br><span class="line">响应: 220-Local time is now 16:41. Server port: 21.</span><br><span class="line">响应: 220-This is a private system - No anonymous login</span><br><span class="line">响应: 220 You will be disconnected after 15 minutes of inactivity.</span><br><span class="line">命令: AUTH TLS</span><br><span class="line">错误: 无法连接到服务器</span><br></pre></td></tr></table></figure><p>在爱信息图床给予的说明文本里，这样说到：</p><blockquote><p>tips：个别FTP软件如果无法获取目录列表，请修改连接模式为“活动模式”即可。</p></blockquote><p>故此推断,这是由于FTP服务器不支持FTP over TLS的连接方式（FileZilla默认为此模式）。FTP over TLS是指客户端显式请求（客户端发送”AUTH TLS”命令）对FTP会话加密。虚拟主机服务器会拒绝请求TLS的连接。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>登陆时设置FTP客户端不要求会话加密，即采用普通的FTP会话方式。</p><p>以FileZilla软件为例，客户在管理站点的时候，“加密”选择为“只使用普通FTP（不安全）”即可，如下图所示：</p><p><img src= "/customize/img/loading.gif" data-lazy-src="1.png" alt="1.png">  </p><p>即可解决这个问题！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 疑难杂症 - FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：Python连接FTP服务器的简单实例!</title>
      <link href="article/29748/"/>
      <url>article/29748/</url>
      
        <content type="html"><![CDATA[<p>因为项目的需要，现在做一个简单的python链接FTP的尝试</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10  </span><br><span class="line">IDE: JetBrains Python 2018.2.4 x64  </span><br><span class="line">语言: Pytthon 3.65  </span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>年初的时候在知乎上查了许久，得知了几个不错的图床。其中一个名为<a target="_blank" rel="noopener" href="https://tu.aixinxi.net/index.php">爱信息图床</a>的图床吸引了的注意。</p><p>这个图床能托管的不仅仅是图，还可以托管很多各种文件，并提供CDN服务，很强大，但是很可惜的是它没有API接口，一切只能通过注册登陆上传。</p><p>抱着试一试的心情，我向站点上看到的举报邮箱发出Email，经过一番沟通，居然申请到了专属的FTP通道，很是开心。<br>于是Python的FTP操作需求就在这里诞生了，本文进行一个最低限度尝试，以后再进行详细的开发。</p><h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><p>Python中官方包中自带有的ftplib模块定义了FTP类，可用来实现简单的ftp函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from ftplib import FTP</span><br><span class="line">ip = <span class="string">&#x27;192.168.8.88&#x27;</span></span><br><span class="line">port = 21</span><br><span class="line">def test_ftp():</span><br><span class="line">    ftp=FTP()</span><br><span class="line">    ftp.connect(ip,port)</span><br><span class="line">    ftp.login(<span class="string">&quot;ftpuser&quot;</span>,<span class="string">&quot;123&quot;</span>)<span class="comment">#如果是匿名登录，直接ftp.login()</span></span><br><span class="line">    files = ftp.dir()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test_ftp()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：获取函数的参数名和参数名的默认值</title>
      <link href="article/33343/"/>
      <url>article/33343/</url>
      
        <content type="html"><![CDATA[<p>学习某些框架的时候，它们的方法具体要传什么参，估计还要一个个查。在Pycharm一般可以用ctrl+p来查看，但是如果有些看不了可用此法。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10  </span><br><span class="line">IDE: JetBrains Python 2018.2.4 x64  </span><br><span class="line">语言: Pytthon 3.6.5  </span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>方便开发中更好更快的了解一个函数的使用</p><h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">def f(a=1, b=2, c=3):</span><br><span class="line">  <span class="built_in">print</span>(locals())<span class="comment">#在函数内获取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用inspect模块，简单方便</span></span><br><span class="line">import inspect</span><br><span class="line"></span><br><span class="line">inspect.getfullargspec(f)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用f的内置方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取默认值,如果参数名没有默认值则不在其中：</span></span><br><span class="line"><span class="built_in">print</span>(f.__defaults__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用__code__</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#总参数个数</span></span><br><span class="line"><span class="built_in">print</span>(f.__code__.co_argcount)</span><br><span class="line"></span><br><span class="line"><span class="comment">#总参数名</span></span><br><span class="line"><span class="built_in">print</span>(f.__code__.co_varnames)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：Pycharm用Ctrl+鼠标滚轮调节代码字体大小!</title>
      <link href="article/63217/"/>
      <url>article/63217/</url>
      
        <content type="html"><![CDATA[<p>开虚拟机摆弄Ubuntu写程序..感觉代码看得费眼，太小了。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04  </span><br><span class="line">IDE: JetBrains Pycharm 2018.2.4 x64</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>为了方便开发，简单步骤设置一下！特别是review的时候，能够自由缩放比较方便！  </p><h1 id="修改设置"><a href="#修改设置" class="headerlink" title="修改设置"></a>修改设置</h1><blockquote><p>File –&gt; Setting –&gt; Editor –&gt; General –&gt; 勾选Change font size (zoom) with Ctrl+Mouse Wheel </p></blockquote><p>即可，使用Ctrl+鼠标滚轮调节代码字体大小</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>方便使用，一秒看懂。当小技巧来做个记录！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疑难杂症：解决github提交commit,contributions不统计显示绿色的问题</title>
      <link href="article/55003/"/>
      <url>article/55003/</url>
      
        <content type="html"><![CDATA[<p>最近使用GitHub Desktop时,发现自己好多次的commits都没有被记录在Contributions中,但是点开项目详情里面可以看到自己的commit确实上传成功了,所以就忧伤了,为什么没有绿呢?</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04  </span><br><span class="line">IDE: JetBrains Pycharm 2018.2.4 x64  </span><br><span class="line">Python: 3.6.2</span><br><span class="line">Django: 2.0.3</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>最近更换Ubuntu18.04使用Pycharm上传Github时,发现自己好多次的commits都没有被记录在Contributions中,但是点开项目详情里面可以看到自己的commit确实上传成功了,所以就忧伤了,为什么没有绿呢?</p><p>查看了github的help页，找到了有关github贡献值的计算说明。</p><ol><li><p>问题和拉取请求<br>如果问题和拉取请求是在独立存储库中打开而不是分叉，则它们将显示在您的贡献图上。</p></li><li><p>提交<br>如果提交符合以下所有条件，则会在您的贡献图表上显示：</p></li></ol><blockquote><p>用于提交的电子邮件地址与您的GitHub帐户相关联。<br>提交是在独立的存储库中进行的，而不是fork。<br>提交的内容如下：<br>在存储库的默认分支（通常master）<br>在gh-pages分支中（对于具有Project Pages站点的存储库）  </p></blockquote><p>此外，至少满足下面条件中的一个（主要针对你Commit的仓库不是你创建的）：</p><blockquote><p>你是这个仓库的协作者，或者是这个版本库的拥有组织中的一员<br>你fork过这个仓库<br>你对这个仓库发起过pull request或者issue<br>你对这个仓库标记了Star  </p></blockquote><h1 id="不计算捐款的常见原因"><a href="#不计算捐款的常见原因" class="headerlink" title="不计算捐款的常见原因"></a>不计算捐款的常见原因</h1><p>笔记：</p><blockquote><p>要显示在您的个人资料贡献图表中，共同创作的提交必须符合与一位作者的提交相同的标准。<br>当合并拉取请求并且压缩提交时，只有合并拉取请求的用户和打开拉取请求的用户才会收到贡献积分。拉取请求的其他任何贡献者都不会获得贡献积分。<br>当重新提交提交时，提交的原始作者和重新提交的人，无论是在命令行还是在GitHub上，都会收到贡献信用。  </p></blockquote><h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>发现在github网站上修改提交都可以记录,但就是我本地的客户端不可以。<br>然后我在github上点击紫色头像提交记录的详细内容查看,他说我的作者是无效的。<br>后来查了下发现是邮箱用户名不对。<br>先用git show 发现邮箱那里跟github的账号邮箱不一样！<br><img src= "/customize/img/loading.gif" data-lazy-src="1.png" alt="1.png"><br>我的邮箱地址写错成了一个逗号..“，com”，好吧服了。<br>再次核对一下Github邮箱一直，登陆Github!<br><img src= "/customize/img/loading.gif" data-lazy-src="2.png" alt="2.png"></p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>在该项目有“.git”文件夹的目录下，打开Ubuntu终端使用git命令：</p><blockquote><p>git config –global user.name “username”<br>git config –global user.email “<a href="mailto:&#x75;&#x73;&#101;&#114;&#x6e;&#x61;&#x6d;&#x65;&#x40;&#x6d;&#97;&#105;&#108;&#46;&#99;&#x6f;&#109;">&#x75;&#x73;&#101;&#114;&#x6e;&#x61;&#x6d;&#x65;&#x40;&#x6d;&#97;&#105;&#108;&#46;&#99;&#x6f;&#109;</a>”</p></blockquote><p>将配置文件的邮箱修改为正确的邮箱地址，然后通过继续终端使用命令行方式提交一次。</p><blockquote><p>git commit -m “test”<br>git push origin master  </p></blockquote><p>这次的提交就会出现小绿点了。这时再使用</p><blockquote><p>git show</p></blockquote><p>来验证一下，是否修改成功。成功以后，重启Pycharm，它也会同步。这样使用它上传github的时候也不会穿错了。</p><p><strong>可是问题来了，如果不想放弃之前的那些用错邮箱的提交怎么办？</strong></p><p>只要在Github的setting中，把之前错误的邮箱地址添加上去即可！<br><img src= "/customize/img/loading.gif" data-lazy-src="3.png" alt="3.png"></p><p>如此以来，完美解决即可解决这个问题！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 疑难杂症 - Github - Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web后端：Django的models.py中on_delete=models.CASCADE的作用</title>
      <link href="article/6561/"/>
      <url>article/6561/</url>
      
        <content type="html"><![CDATA[<p>细读Django官方文档是浑然不知“on_delete=models.CASCADE”是干啥用的。于是查了查..</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04  </span><br><span class="line">IDE: JetBrains Pycharm 2018.2.4 x64  </span><br><span class="line">Python: 3.6.2</span><br><span class="line">Django: 2.0.3</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>今日想设计一下小说网站的数据库，并通过django的models模块来实现，</p><p>练习Django中的一对多关系，使用Foreign关键字创建多对一的关系，Foreign(外键所在类对象的名字)</p><p>在翻读查阅Django官方文档是浑然不知“on_delete=models.CASCADE”是干啥用的。</p><p>以前似乎没注意用过这个东西，于是简单的去了解一下。</p><h1 id="on-delete-models-CASCADE级联删除"><a href="#on-delete-models-CASCADE级联删除" class="headerlink" title="on_delete=models.CASCADE级联删除"></a>on_delete=models.CASCADE级联删除</h1><p>比如：书籍和作者的关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 作者</span></span><br><span class="line">class writer(models.Model):</span><br><span class="line">    name = mode.CharField(max_length=30)</span><br><span class="line">    </span><br><span class="line">    def __str__(self):</span><br><span class="line">        <span class="built_in">return</span> self.name</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 书籍信息</span></span><br><span class="line">class book(models.Model):</span><br><span class="line">    title = mode.CharField(max_length=100)</span><br><span class="line">    <span class="comment"># ForeignKey() 定义多对一关系</span></span><br><span class="line">    the_writer = models.ForeignKey(writer)</span><br><span class="line">    </span><br><span class="line">    def __str__(self):</span><br><span class="line">        <span class="built_in">return</span> self.title </span><br></pre></td></tr></table></figure><blockquote><p>第一次创建的时候，在Book类的the_writer字段的第二个参数我没有添加on_delete=models.CASCADE,在使用python manage.py makeigrations 进行迁移的时候的出错了。</p></blockquote><p>报错信息为: </p><blockquote><p>TypeError: <strong>init</strong>() missing 1 required positional argument:”on_delete”</p></blockquote><p>之后加上“on_delete=models.CASCADE”来解决问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 作者</span></span><br><span class="line">class writer(models.Model):</span><br><span class="line">    name = mode.CharField(max_length=30)</span><br><span class="line">    </span><br><span class="line">    def __str__(self):</span><br><span class="line">        <span class="built_in">return</span> self.name</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 书籍信息</span></span><br><span class="line">class book(models.Model):</span><br><span class="line">    title = mode.CharField(max_length=100)</span><br><span class="line">    <span class="comment"># ForeignKey() 定义多对一关系</span></span><br><span class="line">    the_writer = models.ForeignKey(writer, on_delete=models.CASCADE)</span><br><span class="line">    </span><br><span class="line">    def __str__(self):</span><br><span class="line">        <span class="built_in">return</span> self.title </span><br></pre></td></tr></table></figure><p>经过筛查，在创建多对一的关系的,需要在Foreign的第二参数中加入on_delete=models.CASCADE  主外关系键中，级联删除，也就是当删除主表的数据时候从表中的数据也随着一起删除。</p><p>详细文档,可以访问官方文档进行了解<br><a target="_blank" rel="noopener" href="https://docs.djangoproject.com/zh-hans/2.1/topics/db/models/">https://docs.djangoproject.com/zh-hans/2.1/topics/db/models/</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>简单话来讲，Django中使用models处理多对一（“书多对作者一”）的情况时，on_delete=models.CASCADE是必须加上的。而当删除“作者”的时候，相应他的“书籍”也会一起连带删除！</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Web后端 </tag>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> 小技能 </tag>
            
            <tag> Django </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疑难杂症：Django查询models对象报错：TypeError: __str__ returned non-string (typedecimal.Decimal)</title>
      <link href="article/55457/"/>
      <url>article/55457/</url>
      
        <content type="html"><![CDATA[<p>建立下zzuliacgn的novel模块时，碰到了一些错误。因为确实没试过小说网站数据库设计，顺便用Django的model做一些新的尝试。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10  </span><br><span class="line">操作系统 ： Ubuntu 18.04  </span><br><span class="line">IDE: JetBrains Pycharm 2018.2.4 x64  </span><br><span class="line">浏览器： Google Chrome 版本 67.0.3396.99（正式版本） （64 位）&amp;&amp; FireFox Developer Edition 版本63.0b4  (64位)  </span><br><span class="line">Python: 3.6.2</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>Django查询models对象报错：TypeError: <strong>str</strong> returned non-string (typedecimal.Decimal)<br>错误代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class ApplStockPrice(models.Model):</span><br><span class="line">    Date = models.CharField(max_length=20)</span><br><span class="line">    Open = models.DecimalField(max_digits=20,decimal_places=5)</span><br><span class="line">    High = models.DecimalField(max_digits=20,decimal_places=5)</span><br><span class="line">    Low = models.DecimalField(max_digits=20,decimal_places=5)</span><br><span class="line">    Close = models.DecimalField(max_digits=20,decimal_places=5)</span><br><span class="line">    Adj_Close = models.DecimalField(max_digits=20,decimal_places=6)</span><br><span class="line">    Volume = models.DecimalField(max_digits=20,decimal_places=2)</span><br><span class="line"> </span><br><span class="line">    def __str__(self):</span><br><span class="line">        <span class="built_in">return</span> self.Close</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现时由于函数返回的是str，但是之前传的值是Decimal所导致。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>在这里修改一下返回值把如下部分的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def __str__(self):</span><br><span class="line">    <span class="built_in">return</span> self.Close</span><br></pre></td></tr></table></figure><p>将其修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def __str__(self):</span><br><span class="line">    <span class="built_in">return</span> str(self.Close)</span><br></pre></td></tr></table></figure><p>即可解决这个问题！类似的错误还有TypeError: <strong>str</strong> returned non-string (type tuple)。同理！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 疑难杂症 - python - Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疑难杂症：Python3.6 报错can&#39;t concat str to bytes</title>
      <link href="article/16931/"/>
      <url>article/16931/</url>
      
        <content type="html"><![CDATA[<p>今日老同学来问我有关Python爬虫urllib的一些用法，恰逢错误一道。于是以此做个记录…</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10  </span><br><span class="line">IDE: JetBrains Pycharm 2018.2.4 x64  </span><br><span class="line">浏览器： Google Chrome 版本 67.0.3396.99（正式版本） （64 位）&amp;&amp; FireFox Developer Edition 版本63.0b4  (64位)  </span><br><span class="line">Python: 3.6.2</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>尝试了来自老同学发来的urllib爬虫代码，目的是为了通过使用get请求发送json。Python3.6.2发送请求的时候，出现报错。</p><blockquote><p>报错信息：”can’t concat str to bytes.”</p></blockquote><p>报错代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># send http</span></span><br><span class="line">import urllib.request</span><br><span class="line">The_id = <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="comment"># name = &quot;233666888&quot;</span></span><br><span class="line">department = <span class="string">&quot;233666888&quot;</span></span><br><span class="line">position = <span class="string">&quot;233666888&quot;</span></span><br><span class="line">phone = <span class="string">&quot;233666888&quot;</span></span><br><span class="line">email = <span class="string">&quot;233666888&quot;</span></span><br><span class="line">data = &#123;&#125;</span><br><span class="line">data[<span class="string">&#x27;id&#x27;</span>] = The_id</span><br><span class="line"><span class="comment"># data[&#x27;name&#x27;] = name</span></span><br><span class="line">data[<span class="string">&#x27;department&#x27;</span>] = department</span><br><span class="line">data[<span class="string">&#x27;position&#x27;</span>] = position</span><br><span class="line">data[<span class="string">&#x27;phone&#x27;</span>] = phone</span><br><span class="line">data[<span class="string">&#x27;email&#x27;</span>] = email</span><br><span class="line">my_headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># url = &#x27;http://172.19.237.1:8091/web/index.jsp&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">my_request = urllib.request.Request(url,data = data,headers = my_headers)</span><br><span class="line">my_responese = urllib.request.urlopen(my_request)</span><br><span class="line">my_html = my_responese.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(my_html)</span><br></pre></td></tr></table></figure><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>这是因为encode返回的是bytes型的数据，不可以和str相加。</p><blockquote><p>使用urllib.parse.urlencode(data).encode(encoding=’UTF8’)来处理即可</p></blockquote><p>将其部分修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># url = &#x27;http://172.19.237.1:8091/web/index.jsp&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">params = urllib.parse.urlencode(data).encode(encoding=<span class="string">&#x27;UTF8&#x27;</span>)</span><br><span class="line">my_request = urllib.request.Request(url,data = params,headers = my_headers)</span><br><span class="line">my_responese = urllib.request.urlopen(my_request)</span><br><span class="line">my_html = my_responese.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(my_html)</span><br></pre></td></tr></table></figure><p>即可解决这个问题！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 疑难杂症 - python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疑难杂症：Python3.x 报错POST data should be bytes or an iterable of bytes...</title>
      <link href="article/19568/"/>
      <url>article/19568/</url>
      
        <content type="html"><![CDATA[<p>今日老同学来问我有关Python爬虫urllib的一些用法，恰逢错误一道。于是以此做个记录…</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10  </span><br><span class="line">IDE： JetBrains Pycharm 2018.2.4 x64  </span><br><span class="line">浏览器： Google Chrome 版本 67.0.3396.99（正式版本） （64 位）&amp;&amp; FireFox Developer Edition 版本63.0b4  (64位)  </span><br><span class="line">Python： 3.6.2</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>尝试了来自老同学发来的urllib爬虫代码，目的是为了通过使用python3.x执行post请求时报错</p><blockquote><p>报错信息：”POST data should be bytes or an iterable of bytes. It cannot be of type str.”</p></blockquote><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>发现需要在urlencode语句后加encode(encoding=’UTF8’)</p><blockquote><p>params = urllib.parse.urlencode(data)</p></blockquote><p>将其修改为：</p><blockquote><p>params = urllib.parse.urlencode(data).encode(encoding=’UTF8’)</p></blockquote><p>想详细了解更多有关Github贡献计算的规则可以到官网了解更多：</p><blockquote><p><a target="_blank" rel="noopener" href="https://help.github.com/articles/why-are-my-contributions-not-showing-up-on-my-profile/">https://help.github.com/articles/why-are-my-contributions-not-showing-up-on-my-profile/</a></p></blockquote><p>即可解决更多问题！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 疑难杂症 - python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：Pycharm中配置Anaconda以及pip源配置！</title>
      <link href="article/43622/"/>
      <url>article/43622/</url>
      
        <content type="html"><![CDATA[<p>Anaconda是一套Python整合包，包含Python官方的库以及一些市面上常用到的第三方库。可以节省一些时间，不用纠结在包之间的是否兼容的问题，别人已经整理好了。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10  </span><br><span class="line">IDE: JetBrains Pycharm 2018.2.4 x64</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在学习推荐系统、机器学习、数据挖掘时，Python是非常强大的工具，也有很多很强大的模块，但是模块的安装却是一件令人头疼的事情。</p><p>现在有个工具——Anaconda，他已经帮我们集成好了很多工具了！Anaconda里面集成了很多关于python科学计算的第三方库，主要是安装方便，而Python是一个编译器，如果不使用Anaconda，那么安装起来会比较痛苦，各个库之间的依赖性就很难连接的很好。</p><p>在Windows中，Pycharm 和 Anaconda结合起来，岂不是美哉！</p><h1 id="下载安装Anaconda"><a href="#下载安装Anaconda" class="headerlink" title="下载安装Anaconda"></a>下载安装Anaconda</h1><p>点击<a target="_blank" rel="noopener" href="https://www.anaconda.com/download/">Anaconda</a>，注意对应自己想要安装的Python版本就行了。</p><blockquote><p>注意：因为Anaconda是自带Python的，所以不需要自己再去下载安装Python了，当然，如果你已经安装了Python也不要紧，不会发生冲突的！</p></blockquote><h1 id="下载安装Pycharm"><a href="#下载安装Pycharm" class="headerlink" title="下载安装Pycharm"></a>下载安装Pycharm</h1><p>装个小软件还是简单的呐。建议使用这个编辑器吧，个人感觉还是很好用的。如果你是已经安装了Pycharm了，那么可以直接跳到下一步。</p><p>它会自动找到你安装的Python，安装时按提示来就是了。</p><h1 id="Pycharm中配置Anaconda的解释器"><a href="#Pycharm中配置Anaconda的解释器" class="headerlink" title="Pycharm中配置Anaconda的解释器"></a>Pycharm中配置Anaconda的解释器</h1><p>具体做法是：File-&gt;Default settings-&gt;Default project-&gt;project interpreter</p><p>接着点击 project interpreter 的右边的小齿轮，选择 add local ，选择Anaconda文件路径下的python.exe。接着Pycharm会更新解释器，导入模块等，要稍等一点时间</p><h1 id="pip源配置"><a href="#pip源配置" class="headerlink" title="pip源配置"></a>pip源配置</h1><p>让我们先来解决第一个问题，相信这个问题也是让很多人都感到头疼的，因为如果不进行配置的话，安装python库的时候默认是使用国外的源，这时候下载速度会很慢！国内的源下载速度要好很多。<br>当然如果你能自己解决翻墙问题的话，这一步也可以跳过。</p><ol><li>在windows文件管理器中，输入%APPDATA%,回车</li></ol><p><img src= "/customize/img/loading.gif" data-lazy-src="1.png" alt="1.png"></p><ol start="2"><li>找到对应的文件夹pip文件夹，然后在pip文件夹中编辑pip.ini文件（如果没有，自己就新建一个！）</li></ol><p><img src= "/customize/img/loading.gif" data-lazy-src="2.png" alt="2.png"><br><img src= "/customize/img/loading.gif" data-lazy-src="3.png" alt="3.png"></p><ol start="3"><li>最后再新建的pip.ini文件中输入一下内容：<blockquote><p>[global]<br>index-url = <a target="_blank" rel="noopener" href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p></blockquote></li></ol><h1 id="Anaconda的源配置"><a href="#Anaconda的源配置" class="headerlink" title="Anaconda的源配置"></a>Anaconda的源配置</h1><p>在安装了Anaconda后，我们也可以使用Anaconda来进行Python库的安装，同样的也需要进行源的配置。（其实使用pip，Anaconda来进行Python库的安装都是差不多，不过个人比较喜欢用Anaconda）</p><p>这个配置方法就很简单了，你只需要在配置了Anaconda的Pycharm中的终端（Terminal）输入一下命令即可：</p><blockquote><p>conda config –add channels <a target="_blank" rel="noopener" href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</a></p></blockquote><blockquote><p>conda config –set show_channel_urls yes</p></blockquote><h1 id="conda的包管理"><a href="#conda的包管理" class="headerlink" title="conda的包管理"></a>conda的包管理</h1><p>Anaconda为我们提供方便的包管理命令——conda!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看已经安装的packages</span></span><br><span class="line">conda list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个指定环境的已安装包</span></span><br><span class="line">conda list -n python34</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找package信息</span></span><br><span class="line">conda search numpy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装scipy</span></span><br><span class="line">conda install scipy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装package</span></span><br><span class="line"><span class="comment"># 如果不用-n指定环境名称，则被安装在当前活跃环境</span></span><br><span class="line">(以 numpy 包名为例！)</span><br><span class="line">conda install -n python37 numpy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新package</span></span><br><span class="line">conda update -n python37 numpy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除package</span></span><br><span class="line">conda remove -n python37 numpy</span><br></pre></td></tr></table></figure><p>由于conda将conda、python等都视为package，因此，完全可以使用conda来管理conda和python的版本，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新conda，保持conda最新</span></span><br><span class="line">conda update conda</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新Anaconda</span></span><br><span class="line">conda update anaconda</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新python</span></span><br><span class="line">conda update python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 傻瓜式一条龙服务更新指令</span></span><br><span class="line">conda update conda &amp;&amp; conda update anaconda &amp;&amp; conda update python</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - Pycharm - python - Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：通过pycharm使用git（三）!</title>
      <link href="article/21379/"/>
      <url>article/21379/</url>
      
        <content type="html"><![CDATA[<p>使用git+pycharm有一段时间了，算是稍有点心得，这边整理一下，可能有的方法不是最优，欢迎交流，可能还是习惯敲命令去使用git，不过其实pycharm已经帮忙做了很多了，我们可以不用记住那么多的命令的。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10  </span><br><span class="line">IDE: JetBrains Pycharm 2018.2.4 x64</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>使用git+pycharm有一段时间了，算是稍有点心得，这边整理一下，可能有的方法不是最优，欢迎交流，可能还是习惯敲命令去使用git，不过其实pycharm已经帮忙做了很多了，我们可以不用记住那么多的命令的。</p><h1 id="Pycahrm进行merge分支"><a href="#Pycahrm进行merge分支" class="headerlink" title="Pycahrm进行merge分支"></a>Pycahrm进行merge分支</h1><p>因为平时开发在dev中，开发完毕后需要把它合并到master上<br>我们可以先到dev下更新一些东西，然后commit上去（origin dev）,我的习惯是如果项目较小，可以不用origin dev，本地的dev只是一个临时的分支，合并到master后就可以删掉，不用上传到origin dev.<br>之后checkout到本地的master上，dev新增的东西是看不到的，在master上去merge dev<br><img src= "/customize/img/loading.gif" data-lazy-src="1.png" alt="1.png"><br>merge之后，会发现，刚才dev更新的东西，master也更新了，之后提交到origin master,merge之后相当于已经commit过了，所以直接push，或者你修改点什么，再重新commit and push<br><img src= "/customize/img/loading.gif" data-lazy-src="2.png" alt="2.png"><br>之后就可以看到origin master已经和本地的dev代码一致了  </p><h1 id="创建git忽略文件"><a href="#创建git忽略文件" class="headerlink" title="创建git忽略文件"></a>创建git忽略文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">touch .gitignore <span class="comment">#创建.gitignore</span></span><br><span class="line">vim .gitignore <span class="comment">#通过vim打开</span></span><br><span class="line"></span><br><span class="line">.ignore 配置规则见参考文章</span><br><span class="line"></span><br><span class="line">进入vi修改后，要退出的话，先按Esc，然后按<span class="built_in">shift</span> 和冒号键，然后就可以回到命令行：</span><br><span class="line">：q 在文件未作任何修改的情况下退出。</span><br><span class="line">：q! 强制退出，不保存对文件所作的修改。</span><br><span class="line">：wq 保存对文件所作的修改并退出。</span><br><span class="line">：w 保存文件。</span><br></pre></td></tr></table></figure><p>暂未发现pycharm2018 2.4如何创建git忽略文件，在此直接使用的是普通的文本创建。</p><h1 id="其他git命令"><a href="#其他git命令" class="headerlink" title="其他git命令"></a>其他git命令</h1><p>git status -s: 查看文件状态</p><p>git add 1.py: 添加文件到modifed/unstage状态</p><p>git commit -m: “描述文字”: 添加文件到stage状态</p><p>git commit -am: “描述文字”: 文件已存在于仓库时可以使用这种方法跳过add</p><p>git log –oneline –graph: 查看版本记录（oneline 以及 graph方式）</p><p>git checkout xxxxxxx:回到之前的 xxxxx 的版本</p><p>git branch dev：创建 dev 分支</p><p>git branch：查看分支</p><p>git checkou dev：切换到分支</p><p>git checkout -b dev1：建立并切换到分支 dev1</p><p>git checkout -d dev:删除 dev 分支</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在IDE里面下载git项目纯属是为了方便在本地开发和整理。也不用每次都那么麻烦的用命令行操作了。<br>如果是git初学者，建议还是不要那么早就用这么偷懒的工具就是了233。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：通过pycharm使用git（二）!</title>
      <link href="article/45390/"/>
      <url>article/45390/</url>
      
        <content type="html"><![CDATA[<p>使用git+pycharm有一段时间了，算是稍有点心得，这边整理一下，可能有的方法不是最优，欢迎交流，可能还是习惯敲命令去使用git，不过其实pycharm已经帮忙做了很多了，我们可以不用记住那么多的命令的。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10  </span><br><span class="line">IDE: JetBrains Pycharm 2018.2.4 x64</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>使用git+pycharm有一段时间了，算是稍有点心得，这边整理一下，可能有的方法不是最优，欢迎交流，可能还是习惯敲命令去使用git，不过其实pycharm已经帮忙做了很多了，我们可以不用记住那么多的命令的。</p><h1 id="Pycahrm提交git项目"><a href="#Pycahrm提交git项目" class="headerlink" title="Pycahrm提交git项目"></a>Pycahrm提交git项目</h1><p>用Pycharm在本地新建一个文件，在其上单机右键，按图中箭头，将文件添加到本地repo<br><img src= "/customize/img/loading.gif" data-lazy-src="1.png" alt="1.png"><br>也可以不用add，直接commit 整个目录<br><img src= "/customize/img/loading.gif" data-lazy-src="2.png" alt="2.png"><br>之后选择commit and push 就提交上去了<br><img src= "/customize/img/loading.gif" data-lazy-src="3.png" alt="3.png"><br>过程中会很明确的，这里是从本地的master上传到origin远端的master上，可以自行修改<br><img src= "/customize/img/loading.gif" data-lazy-src="4.png" alt="4.png"><br>如果网络不出问题，基本过一会就成功了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在IDE里面下载git项目纯属是为了方便在本地开发和整理。也不用每次都那么麻烦的用命令行操作了。<br>如果是git初学者，建议还是不要那么早就用这么偷懒的工具就是了233。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：通过pycharm使用git（一）!</title>
      <link href="article/21087/"/>
      <url>article/21087/</url>
      
        <content type="html"><![CDATA[<p>使用git+pycharm有一段时间了，算是稍有点心得，这边整理一下，可能有的方法不是最优，欢迎交流，可能还是习惯敲命令去使用git，不过其实pycharm已经帮忙做了很多了，我们可以不用记住那么多的命令的。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10  </span><br><span class="line">IDE: JetBrains Pycharm 2018.2.4 x64</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>使用git+pycharm有一段时间了，算是稍有点心得，这边整理一下，可能有的方法不是最优，欢迎交流，可能还是习惯敲命令去使用git，不过其实pycharm已经帮忙做了很多了，我们可以不用记住那么多的命令的。</p><h1 id="Pycharm添加git项目"><a href="#Pycharm添加git项目" class="headerlink" title="Pycharm添加git项目"></a>Pycharm添加git项目</h1><p>随便建立一个项目，然后 VCS &gt; Checkout form Version control &gt; Git<br><img src= "/customize/img/loading.gif" data-lazy-src="1.png" alt="1.png"><br>在需要下载的git仓库地址复制下来<br><img src= "/customize/img/loading.gif" data-lazy-src="2.png" alt="2.png"><br>将地址粘贴在图中相应的位置，其他的设置根根据自己的需要来修改，最后按下clone等一会就能完成下载了<br><img src= "/customize/img/loading.gif" data-lazy-src="3.png" alt="3.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在IDE里面下载git项目纯属是为了方便在本地开发和整理。也不用每次都那么麻烦的用命令行操作了。<br>如果是git初学者，建议还是不要那么早就用这么偷懒的工具就是了233。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：打印对象的所有属性值的方法!</title>
      <link href="article/45024/"/>
      <url>article/45024/</url>
      
        <content type="html"><![CDATA[<p>开发中的需要，简单代码实现，打印对象的所有属性值的方法！</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10  </span><br><span class="line">IDE: JetBrains Python 2018.2.4 x64  </span><br><span class="line">语言: Pytthon 3.65</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>开发中的需要，简单代码实现，打印对象的所有属性值的方法！直接用命令某些情景下不太方便，在这里使用打印的方式来展示。</p><h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def prn_obj(obj): </span><br><span class="line">  <span class="built_in">print</span> <span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;%s:%s&#x27;</span> % item <span class="keyword">for</span> item <span class="keyword">in</span> obj.__dict__.items()]) </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：Ubuntu18.04安装Nginx！</title>
      <link href="article/58114/"/>
      <url>article/58114/</url>
      
        <content type="html"><![CDATA[<p>更新过Ubuntu18后还没有尝试过安装Nginx,安装一次看看有没有什么不同的要注意的地方。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04LTS</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>没什么背景，项目测试需要，本地安装Nginx也是为了测试。</p><h1 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h1><p>在Ubuntu中，右键打开终端，在终端中输入以下命令：</p><blockquote><p>sudo apt-get install nginx</p></blockquote><p><img src= "/customize/img/loading.gif" data-lazy-src="1.png" alt="终端安装"></p><p>Ubuntu安装之后的文件结构大致为：</p><ol><li>所有的配置文件都在/etc/nginx下，并且每个虚拟主机已经安排在了/etc/nginx/sites-available下  </li><li>程序文件在/usr/sbin/nginx  </li><li>日志放在了/var/log/nginx中  </li><li>并已经在/etc/init.d/下创建了启动脚本nginx  </li><li>默认的虚拟主机的目录设置在了/var/www/nginx-default (有的版本 默认的虚拟主机的目录设置在了/var/www, 请参考/etc/nginx/sites-available里的配置)</li></ol><h1 id="Nginx操作命令"><a href="#Nginx操作命令" class="headerlink" title="Nginx操作命令"></a>Nginx操作命令</h1><pre><code>查看版本：sudo /usr/sbin/nginx -v启动：sudo /usr/sbin/nginx停止：sudo /usr/sbin/nginx -s stop重启：sudo /usr/sbin/nginx -s reload</code></pre><p>通过浏览器访问对应的IP地址，如果是本机话，访问“127.0.0.1”即可查看nginx运行结果:<br><img src= "/customize/img/loading.gif" data-lazy-src="2.png" alt="安装测试"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>就目前来开，似乎没有什么特别的变化。之后对一下它如果搭配上uwsgi+Django有没有什么变化。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - Web后端 - 小技能 - Ubuntu - Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：设计网页，常见的宽度！</title>
      <link href="article/151/"/>
      <url>article/151/</url>
      
        <content type="html"><![CDATA[<p>网页设计中，宽度的设置，是没有绝对固定的值的，根据我们的需求出发。<br>只能说从常用的那几种分辨率来入手。</p><span id="more"></span><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>初学html是老师告诉我们的是一般960px，</p><p>现在应该有好多这样宽度的设计，不过现在显示屏的设备一般在1024以上了，</p><p>比如现在的笔记本一般是1336*768，</p><p>这有那些大头的显示屏分辨率保持在1024左右，</p><p>新的液晶显示屏也都已经达到了1440*900的分辨率，</p><p>所以现在设计的话一般是960px,980px,1000px,1024px！</p><p>而且好多现在也都是做成自适应的方式！因为最近手持移动设备屏幕越来越大，网络越来越发达，流量也越来越多，网站并不局限于在pc上浏览，<br>平板与手机已经占据大多数！所以要综合考虑！<br>所以，定宽模式就不再赘述了，如果不是初学者，感觉定宽模式是需要经量避免的。<br>最好的做法就是做成自适应模式！</p><h1 id="自适应模式"><a href="#自适应模式" class="headerlink" title="自适应模式"></a>自适应模式</h1><p>可能很多人听过，响应式布局，尤其前几年 H5 崛起的时候，很多初级网页设计师都觉得，网页设计以后就应该支持全平台，那些老的定宽规格都应该被淘汰。但是，宽度自适应模式和响应式设计不是完全相等的。</p><p>响应式设计，是在多种平台下可以良好显示和运行的一种框架，在不同的宽度下回展现出不同的排版和样式。</p><p>响应式布局，Boostrap就是一个很好的例子。早些时候我是不信邪的，后来说真的，开发响应式网页是真的累，如果不是专职做前端的，过程会很痛苦。<br>我不怎么推荐大家去使用响应式设计，因为局限性太大，实际的项目开发时长可能还不如 PC、移动端分别开制作。</p><p>而一般自适应宽模式，是让主内容区域可以随画布的拉伸而做调整，让整个浏览器的画布区域被最大化利用，展示更多的文字信息或图像，带来更好的浏览体验（设计得好的情况下）。</p><p>如果不是真的有需求，还没入坑的同学还是别入这个坑了，特别是没有团队开发的情况下。</p><h1 id="常用的分辨率大小"><a href="#常用的分辨率大小" class="headerlink" title="常用的分辨率大小"></a>常用的分辨率大小</h1><p>Boostrap3 中原生支持的网页宽度为：1200px、992px、768px<br>目前来说常见的设备网页宽度为：1920px 1600px 1440px 1280px 1140px 960px 768px 640px 320px<br>浏览器能够直接测试用的移动设备网页宽度为：1024px 768px 414px 411px 375px 360px 320px<br>这么多分辨率，光是看看就感觉头大了吧。<br>一个人去做完它们全部的响应式，我感觉怕是要疯掉了。而且分辨率年年都在变化，越来越大。</p><p>整合成前端CSS代码，大致如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@media (max-width: 1920px) &#123;&#125;</span><br><span class="line">@media (max-width: 1600px) &#123;&#125;</span><br><span class="line">@media (max-width: 1440px) &#123;&#125;</span><br><span class="line">@media (max-width: 1280px) &#123;&#125;</span><br><span class="line">@media (max-width: 1140px) &#123;&#125;</span><br><span class="line">@media (max-width: 1024px) &#123;&#125;</span><br><span class="line">@media (max-width: 992px) &#123;&#125;</span><br><span class="line">@media (max-width: 960px) &#123;&#125;</span><br><span class="line">@media (max-width: 768px) &#123;&#125;</span><br><span class="line">@media (max-width: 640px) &#123;&#125;</span><br><span class="line">@media (max-width: 414px) &#123;&#125;</span><br><span class="line">@media (max-width: 411px) &#123;&#125;</span><br><span class="line">@media (max-width: 375px) &#123;&#125;</span><br><span class="line">@media (max-width: 360px) &#123;&#125;</span><br><span class="line">@media (max-width: 320px) &#123;&#125;  </span><br></pre></td></tr></table></figure><p>方便日后取用。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>写响应式前端,真是可怕，果然还是后端好啊，网站设计这种事情，还是非常需要一个专业网站设计师的，对于一套网站来说，应该是以设计师为主导的，如果一个设计师不能设计好网站的所有细节的话， 那我觉得这不能称之为一个称职的网页设计师。2333orz</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔：关于前端响应式的一些吐槽</title>
      <link href="article/26917/"/>
      <url>article/26917/</url>
      
        <content type="html"><![CDATA[<p>随便扯个蛋，写前端写得我郁闷了。</p><span id="more"></span><p>首先，我确实不打算有过太深入得招致。我之所以折腾前端是为了服务自己的从业方向—后端。</p><p>有句话是这么讲，技多不压身，但是贪多嚼不烂也是个很大的问题。</p><p>今天开发有关响应式网页的时候，虽然也不是第一次这么干了，但是心中的某种感觉确实越来越强烈。</p><p>响应式网页的成本和投入真的太大了，这个真的不是靠个Boostrap就能解决的。我看过很多网站他们对于网页移动端支持，给我感觉几乎可以说半放弃的态度。</p><p>有条件的，主力必定会在移动端app上下大功夫，然后在弄一个小分辨率的网页样式，就完了。</p><p>就比如说：<a target="_blank" rel="noopener" href="http://book.sfacg.com/">http://book.sfacg.com</a> 整个网站，严格上来讲，它根本没有去做响应式。而且是直接第一次访问的时候，它获取了分辨率大小就直接跳转类似与 <a target="_blank" rel="noopener" href="https://m.sfacg.com/">https://m.sfacg.com/</a> 开头带m的网页，如果把窗口拉大，也不会从m前缀变成www前缀。</p><p>这样办，是真的省事啊。我不知道该说自己是学到了，还是自己吃了亏了。</p><p>响应式网页开发的成本果然不低，移动端的分辨率千奇百怪，想要完美响应式，这工作量真的是太高了。</p><p>事实上，我也觉得自己有点恐怖。</p><p>一个人，去做一整个Web项目。</p><p>自己设计前端排版、寻找素材；<br>自己实现前端的开发；<br>自己完成后端的开发；<br>自己完成数据库的设计和实施；<br>自己完成网站的服务器部署；<br>自己完成网站的运营和维护；<br>自己去做推广；  </p><p>真的是，好累。在开发上，团队的力量是强大的。</p><p>真是郁闷极了。讲真还是写爬虫，写web后端好啊…前端的遇到的问题，都是玄学问题，玩不来玩不来。</p><p>想换换口味，干些别的事情了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔心得 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】：发布一个 GitHub 仓库时需要注意的东西</title>
      <link href="article/8242/"/>
      <url>article/8242/</url>
      
        <content type="html"><![CDATA[<p>本文全部源于我个人总结，绝对不保证权威性，反正我自己做到不坑你们，你们信不信就是你们的事了。另外，我自己是做到了遵守这些准则的。</p><p>GitHub 对我来说是在自己没有工作的时候应该好好整出一个优秀的账号的网站，据说对以后找工作啥的有帮助。所以开仓库就一定要注意了，最近我看到很多人开仓库开的很暴力，而且在很早之前我就想过要写篇博客讲这个了，今天才填坑真是对不起。</p><p><b>请大家期待我即将出的国内使用 Gradle 的正确姿势的教程，会有文字博客和视频教程。绝对天地良心，保证不坑，随后还会附带 Travis CI 的部署教程，也绝对保证不坑。</p><p>毕竟，教程要是坑，怎能带你入坑？</b></p><span id="more"></span><h2 id="什么是暴力开仓库"><a href="#什么是暴力开仓库" class="headerlink" title="什么是暴力开仓库?"></a>什么是暴力开仓库?</h2><p>就是开很糟糕的仓库，放在开源界会被鄙视的项目。</p><p>这里排除 IntelliJ-Community 这种比较特殊的仓库，因为人家第一不怕网速慢，第二人家把包都放在仓库里面，免得各种版本不对，这是针对公司的做法 （比如你自己公司也用 Git ，那么这么做是无可厚非的，但是个人项目最好注意一下）。</p><p>这也是构建工具出现的原因——由于老是有库，版本还老是换，导致仓库太大了。</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>首先，一个稍微正常点的 Git 仓库都一定要注意的东西有：</p><ol><li>不要上传目标文件，除非你以非程序员为目标用户</li><li>不要上传与仓库本身无关的文件（你需要 gitignore ）</li><li>尽可能有 LICENSE 和 README</li></ol><p><b>为什么不要上传目标文件?</b><br>先说一句，目标文件包含 Code Generator 生成的代码，比如 Lex 和 Yacc 生成的 Lexer 和 Parser。</p><p>什么意思呢？举个例子，我有一个 Java 的仓库， 然后我把所有编译生成的*.class 文件全部上传（注意是编译生成的，如果你有手写的字节码当我没说），这就很智障了。 你当用户是傻的啊。。。</p><ol><li>如果是想 review 你的代码，不需要看也无法看*.class 的内容</li><li>大量的*.class 以及每次编译都导致的更新（因为你编译一次，对应的*.class 也会变）会让仓库变得巨大（因为 Git 等同对待二进制文件），每次 push 都会很慢</li><li>如果是想 clone 你的仓库，看见那巨大的仓库体积一般人都会知难而退</li><li>几乎每次增量编译都会影响到 Git 监控，虽然目前我没遇到过不过这一定会导致后期 git gc 和 git commit 很慢</li></ol><p>这已经是十分充分的理由了。所以， JVM 程序员把*.class ，*.apk 和*.jar 加入 gitignore 吧； Rust 程序员把 Cargo.lock 和*.exe 之类的加入 gitignore 吧； Gradle 用户把 build 目录和.gradle 目录加入 gitignore 吧。</p><p>一般情况下，目标文件是放在 GitHub 的 release 界面的。 比如我之前看到过一个 E 站客户端，就是在 release 界面放了个 apk。毕竟这种东西有时体积不能控制，但你又要面向不方便自己构建的人使用，那就在 release 里面放目标文件吧。</p><h2 id="与仓库本身无关的文件"><a href="#与仓库本身无关的文件" class="headerlink" title="与仓库本身无关的文件"></a>与仓库本身无关的文件</h2><p>我觉得这没什么难理解的。</p><p>比如：</p><p>我写了一个音乐播放器，我上传了我拿来测试的一堆 wav/ape/flac 文件。<br>我写了一个压缩工具，然后把我拿来测试的 100 多 mb 的文件上传上去了。<br>我上传了.idea/workspace.xml<br>我上传了测试用的.db 文件<br>这都是不好的，而且为什么不好，我觉得用屁股想都想得到。</p><p>如果确实有这个需求怎么办呢？</p><p>举个例子，我要部署我的项目到某个CI（持续集成）上去，然而我的项目用到了JNI， 原本两部分（CMake和Gradle）是我手动分别编译。</p><p>所以我最后还是想办法让CI编译了JNI部分。。。</p><p><b>临时解决方案</b><br>我有一个替代解决方案。考虑到国内 Git 仓库，比如 Coding.net 和 OSC 的 clone 速度是相当之快的（我学校机房里的批网速（打开我的 GitHub 平均需要五秒）都能达到 10mb/s 的 clone 速度）。</p><p>这时我们就可以先在国内 Git 源开个仓库用来堆这种破玩意，然后使用 Git 的 submodule 来解决（ submodule 怎么用，自己股沟）。</p><p><b>关于 IntelliJ 的 workspace.xml</b><br>比较了解 IntelliJ 系的 IDE 的同学应该注意到过，.idea 目录下有很多各种各样的配置，其中有一个巨大的 workspace.xml ，它的大小飘忽不定，不过一般在 20kb 到 70kb 之间。</p><p>这其实是 IntelliJ 的一个对你编辑状态的缓存，比如你复制粘贴了什么东西， 你剪切了什么东西，你光标怎么移动了一下，你 Git commit 时写了什么 commit message ， IntelliJ 都会把这些存进去。</p><p>而且编辑时，这破玩意是会大大改变的，有时你代码都没动，它变了，你 commit 的时候就会无意中把这些 commit 进去，造成 commit log 和整个仓库的污染。</p><p>看完上面这段，你还会上传 workspace.xml 吗？</p><h2 id="尽可能有-LICENSE-和-README"><a href="#尽可能有-LICENSE-和-README" class="headerlink" title="尽可能有 LICENSE 和 README"></a>尽可能有 LICENSE 和 README</h2><p>重要性我就不说了， LICENSE 你懂得，这里推荐最邪恶的 GPLv3.0 ，最不推荐 MIT。协议怎么选，网上很多教程，我就不赘述了。</p><blockquote><p>MIT 一时爽，抄袭火葬场。</p></blockquote><p>README 尽可能使用人性化的语言写，尽可能用英文写，里面一般包含：</p><ul><li>尽可能简洁的简介</li><li>特色，吸引别人</li><li>如果是软件类，放截图，可以考虑录制 GIF</li><li>Wiki 的链接</li><li>LICENSE</li><li>装逼用的 badge ，比如 CI ，比如 Gitter ，比如 CodeCov ，比如 CodeClimate</li><li>clone、build 说明</li><li>维护指北等各种指北的链接</li><li>release 的 binary 的下载链接</li><li>如果是库性质的，放构建工具远端仓库地址（比如 JitPack ，或者你牛逼，你上 Maven Central ）</li><li>Contributors</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>昨日在网上瞎逛时，突然想了解一下开源协议的具体内容，于是就发现这篇博客。<br>无疑的是，上面说的东西我也是中枪了呀…不过现在已经把idea给删了，真是蛋疼。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔心得 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：Emmet语法，前端利器！</title>
      <link href="article/36391/"/>
      <url>article/36391/</url>
      
        <content type="html"><![CDATA[<p>Emmet使用特定的语法来展开小段代码，它类似CSS选择器，使其成为完整的HTML代码。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10</span><br><span class="line">IDE: JetBrains WebStorm 2018.2.1 x64</span><br><span class="line">浏览器： Google Chrome 版本 67.0.3396.99（正式版本） （64 位）&amp;&amp; FireFox Developer Edition 版本63.0b4  (64位)</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>感觉背景似乎也没有人看的啦。主要是为方便自己前端开发能够更加省事，所以需要使用Emmet语法。<br>这已经成为了一种习惯了，确实可以提高开发效率，总是复制粘贴什么的，也是略烦的事情。<br>本人使用的是 Webstrom 代码编辑器，因此是内置了 Emmet 语法的。<br>如果你使用的是 Sublime或者Notapad++ 编辑器的话，可以去下载相应插件，这个在网上都是有教程的，可以去搜索一下。</p><p>Emmet（以前名为Zen Coding）是一套面向文本编辑器的插件，它允许通过内容辅助高速度的编写和编辑HTML、XML、XSL和其他结构化的代码格式。<br>此项目2008年由Vadim Makeev发起，并由Sergey Chikuyonok和其他Emmet用户基于Zen Coding 2.0的概念继续积极开发。<br>这套工具已经被一些高端的文本编辑器采纳，以及存在于Emmet团队开发或其他人独立实现的插件中。<br>不过，Emmet独立于任何文本编辑器，它的引擎可以直接处理文本，而无需与任何特定软件相关。<br>Emmet以MIT许可证开源。<br>简单来说，就是可以快速构建 HTML 结构的快捷语法。</p><h1 id="嵌套运算符（Nesting-Operator）"><a href="#嵌套运算符（Nesting-Operator）" class="headerlink" title="嵌套运算符（Nesting Operator）"></a>嵌套运算符（Nesting Operator）</h1><p>嵌套运算符用于在生成的树内定位缩写元素：它是否应该放置在上下文元素内部或附近。</p><ol><li>子代操作符（Child）：&gt;    </li></ol><p>就像我们使用 CSS 选择器那样，我们可以使用 &gt; 操作符来创建我们的子代。<br>当我在编辑器中使用这个操作符进行如下代码的创建：</p><blockquote><p>div&gt;ul&gt;li&gt;a&gt;p&gt;span&gt;b&gt;h1</p></blockquote><p>在Emmet语法的最后瞧上tab键，便会得出以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                    &lt;span&gt;</span><br><span class="line">                        &lt;b&gt;</span><br><span class="line">                            &lt;h1&gt;&lt;/h1&gt;</span><br><span class="line">                        &lt;/b&gt;</span><br><span class="line">                    &lt;/span&gt;</span><br><span class="line">                &lt;/p&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>通过观察，可以得出结论：Emmet语法的&gt;的递进是可以无穷的，你想包含多少级的HTML标签都没有问题。<br>“&gt;”符号前的标签包含“&gt;”附后后的标签的意思。例如“ div&gt;ul”，即div标签中有ul标签。  </p><hr><ol start="2"><li>同级操作符（Sibling）：+  </li></ol><p>上面我们讲到了，创建子代的方法。但是现在，我们希望子代中的 div 有多个 p 标签成为同一级，都是父级 div 的子代而不是递进包含关系。</p><blockquote><p>div&gt;p+span+p+p</p></blockquote><p>在Emmet语法的最后瞧上tab键，便会得出以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p&gt;&lt;/p&gt;</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">    &lt;p&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如此，它们就成为了同级的元素。</p><hr><ol start="3"><li>返回上级操作符（Climb-up）：^    </li></ol><p>这时候，我想要在父级元素的 div 的同级再创建一个 div 怎么办呢？</p><blockquote><p>div&gt;p+span+p+p^div</p></blockquote><p>在Emmet语法的最后瞧上tab键，便会得出以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p&gt;&lt;/p&gt;</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">    &lt;p&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;(这里多了个div)</span><br></pre></td></tr></table></figure><p>每多一个“^”符号就会多返回一层父级</p><blockquote><p>div&gt;div&gt;div&gt;p^^^button  </p></blockquote><p>在Emmet语法的最后瞧上tab键，便会得出以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p&gt;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;button&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>用了多少“&gt;”,就可以用多少“^”会到顶层父级。</p><hr><ol start="4"><li>乘法操作符（Multiplication）：*  </li></ol><p>用到重复元素最多的地方要数 ul 中的 li 了。一个一个复制，这显然是很麻烦而又枯燥的一件事情。</p><blockquote><p>ul&gt;li*5</p></blockquote><p>在Emmet语法的最后瞧上tab键，便会得出以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>ul标签下出现了5个li标签！</p><hr><ol start="5"><li>分组操作符（Grouping）：()  </li></ol><p>以上的方法若是简单的html还行，如果父级太多，那要是返回，那就太麻烦了。<br>这是就需要“（）”来封装它们，它们变成一个整体，就轻松的解决了问题，那就来个困难点的布局。<br>将网页分为了 header、main 和 footer 三个页面结构。</p><blockquote><p>div&gt;(header&gt;h1+div&gt;b)+(main&gt;(h2&gt;h3+div&gt;p)+(h2&gt;h3+div&gt;p)+(h2&gt;h3+div&gt;p))+(footer&gt;ul&gt;li*5)</p></blockquote><p>在Emmet语法的最后瞧上tab键，便会得出以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">        &lt;h1&gt;&lt;/h1&gt;</span><br><span class="line">        &lt;div&gt;&lt;b&gt;&lt;/b&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">        &lt;h2&gt;</span><br><span class="line">            &lt;h3&gt;&lt;/h3&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;</span><br><span class="line">            &lt;h3&gt;&lt;/h3&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;</span><br><span class="line">            &lt;h3&gt;&lt;/h3&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">    &lt;footer&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/footer&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>通过观察，很容易就能总结出规律了，“()”分组，可以让复杂的需求简单化。</p><h1 id="属性操作符（Attribute-Operators）"><a href="#属性操作符（Attribute-Operators）" class="headerlink" title="属性操作符（Attribute Operators）"></a>属性操作符（Attribute Operators）</h1><p>通过以上一些实例都是在HTML标签嵌套并级的快捷生成上做文章，要给各种标签添加”id、class”属性，<br>是不是也能用Emmet语法快捷生成呢？<br>答案:可以啊，当然可以！<br>属性运算符用于修改输出元素的属性。</p><ol><li>ID 和 Class（ID and CLASS）  </li></ol><blockquote><p>div#wrapbox1&gt;div.container&gt;p.news</p></blockquote><p>在Emmet语法的最后瞧上tab键，便会得出以下代码：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;wrapbox1&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;p class=&quot;news&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>So easy!标签后跟上“#”然后是id名，即可。如果跟上“.”+class名，即可。<br>但是如果一个标签含有多个class或者id的话，要如何实现？</p><blockquote><p>div#wrapbox1#rank-list&gt;div.container.text-center.flags&gt;p.news#music</p></blockquote><p>在Emmet语法的最后瞧上tab键，便会得出以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;wrapbox1 rank-list&quot;</span>&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;container text-center flags&quot;</span>&gt;</span><br><span class="line">        &lt;p class=<span class="string">&quot;news&quot;</span> id=<span class="string">&quot;music&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>以上代码，实现三种情况，多个id的情况，多个class的情况，以及class和id一起的情况。</p><hr><ol start="2"><li>定制属性（Custom attributes）  </li></ol><p>那么如果当碰到类似“a”标签这样有“href、target、title”多个属性的，用Emmet语法改怎么实现呢？<br>这时候，我们就需要使用中括号[] 来将其括起来。[]中间的内容就是该标签的各个属性了。</p><blockquote><p>div&gt;a[href=’#’ target=’’ title=’nya’]*5</p></blockquote><p>在Emmet语法的最后瞧上tab键，便会得出以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;#&quot;</span> target=<span class="string">&quot;&quot;</span> title=<span class="string">&quot;nya&quot;</span>&gt;&lt;/a&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;#&quot;</span> target=<span class="string">&quot;&quot;</span> title=<span class="string">&quot;nya&quot;</span>&gt;&lt;/a&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;#&quot;</span> target=<span class="string">&quot;&quot;</span> title=<span class="string">&quot;nya&quot;</span>&gt;&lt;/a&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;#&quot;</span> target=<span class="string">&quot;&quot;</span> title=<span class="string">&quot;nya&quot;</span>&gt;&lt;/a&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;#&quot;</span> target=<span class="string">&quot;&quot;</span> title=<span class="string">&quot;nya&quot;</span>&gt;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>这样就可以自由的操作标签的属性了。</p><hr><ol start="3"><li>文本操作符（Text）：{}  </li></ol><p>使用大括号 {} 来对其输入一定的内容，就是生成标签中夹着的内容。这个操作符就很简单啦。</p><blockquote><p>h1{喵喵喵}+p{汪汪汪}+b{咕咕咕}</p></blockquote><p>在Emmet语法的最后瞧上tab键，便会得出以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;喵喵喵&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;汪汪汪&lt;/p&gt;</span><br><span class="line">&lt;b&gt;咕咕咕&lt;/b&gt;</span><br></pre></td></tr></table></figure><p>太简单了，没啥总结的一看就懂了。</p><hr><ol start="4"><li>计算操作符（Item numbering）：$  </li></ol><p>随着乘法操作符的生成，可以递增或者递减的变化数字</p><blockquote><p>ul#id-$*3&gt;li.class-$@-{内容$@-3,内容$@3}*5</p></blockquote><p>在Emmet语法的最后瞧上tab键，便会得出以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=<span class="string">&quot;id-1&quot;</span>&gt;</span><br><span class="line">    &lt;li class=<span class="string">&quot;class-5&quot;</span>&gt;内容7,内容3&lt;/li&gt;</span><br><span class="line">    &lt;li class=<span class="string">&quot;class-4&quot;</span>&gt;内容6,内容4&lt;/li&gt;</span><br><span class="line">    &lt;li class=<span class="string">&quot;class-3&quot;</span>&gt;内容5,内容5&lt;/li&gt;</span><br><span class="line">    &lt;li class=<span class="string">&quot;class-2&quot;</span>&gt;内容4,内容6&lt;/li&gt;</span><br><span class="line">    &lt;li class=<span class="string">&quot;class-1&quot;</span>&gt;内容3,内容7&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;ul id=<span class="string">&quot;id-2&quot;</span>&gt;</span><br><span class="line">    &lt;li class=<span class="string">&quot;class-5&quot;</span>&gt;内容7,内容3&lt;/li&gt;</span><br><span class="line">    &lt;li class=<span class="string">&quot;class-4&quot;</span>&gt;内容6,内容4&lt;/li&gt;</span><br><span class="line">    &lt;li class=<span class="string">&quot;class-3&quot;</span>&gt;内容5,内容5&lt;/li&gt;</span><br><span class="line">    &lt;li class=<span class="string">&quot;class-2&quot;</span>&gt;内容4,内容6&lt;/li&gt;</span><br><span class="line">    &lt;li class=<span class="string">&quot;class-1&quot;</span>&gt;内容3,内容7&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;ul id=<span class="string">&quot;id-3&quot;</span>&gt;</span><br><span class="line">    &lt;li class=<span class="string">&quot;class-5&quot;</span>&gt;内容7,内容3&lt;/li&gt;</span><br><span class="line">    &lt;li class=<span class="string">&quot;class-4&quot;</span>&gt;内容6,内容4&lt;/li&gt;</span><br><span class="line">    &lt;li class=<span class="string">&quot;class-3&quot;</span>&gt;内容5,内容5&lt;/li&gt;</span><br><span class="line">    &lt;li class=<span class="string">&quot;class-2&quot;</span>&gt;内容4,内容6&lt;/li&gt;</span><br><span class="line">    &lt;li class=<span class="string">&quot;class-1&quot;</span>&gt;内容3,内容7&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>以上包含了五种规律：<br>(1)只加”$”符号ul标签的id名字为递增；<br>(2)”$”后加上”@-“符号li标签的class名字为递减，还说明class命名也受”$”的变化而变化；<br>(3)”$@”+数字”3”，使其内容部分以”3”为初始值然后递增；<br>(4)如果使用”$@-“+数字”3”，则是从别的数字倒数至”3”；<br>(5)说明”id、class、{}”也受”$”的变化而变化；</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Emmet常用的用法就在于此了，当然这也不是全部。还有一部分是Emmet对css快捷生成的语法，但是用得太少了，就不多介绍了。<br>最后来一串超级秀的Emmet的语句作为本次学习的收尾！</p><blockquote><p>(li&gt;(p.update-list-left&gt;a[href=’#’ target=’_blank’ title=’书的类别’]{类型$《}+a[href=’#’ target=’_blank’ title=’书的名字’]{书名$》})+p.update-list-center&gt;a[href=’#’ target=’_blank’ title=’书的名字’]{标题$}+(p.update-list-right&gt;a.update-writer[href=’#’ target=’_blank’ title=’作者名’]{作者$}+span.update-time{18-10-0$}))*20</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web后端：Django2.0+里urls.py里配置的改变！</title>
      <link href="article/2207/"/>
      <url>article/2207/</url>
      
        <content type="html"><![CDATA[<p>想把Django项目从Django1.11升级到Django2，当中有不小改动。<br>其中的url.py的用法就发生了很大的变化，链接更加灵活，减少了正则匹配的使用了。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04</span><br><span class="line">IDE: JetBrains pycharm 2018.2.4 x64</span><br><span class="line">Python: 3.6</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>从Django2.0开始，urls.py配置方法有很大改变，所以老项目升级的时候，那报错真是哇哇直叫啊。  </p><h1 id="主要变化"><a href="#主要变化" class="headerlink" title="主要变化"></a>主要变化</h1><ol><li>把url函数换成path</li><li>不在使用^、$作为路由</li><li>其他地方以后再进一步研究</li></ol><h1 id="具体案例"><a href="#具体案例" class="headerlink" title="具体案例"></a>具体案例</h1><p>url.py文件的样例代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path            <span class="comment">#此处应用path，老板本使用的是url</span></span><br><span class="line">from appchat import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">path(<span class="string">&#x27;login/&#x27;</span>, views.acc_login,name=<span class="string">&#x27;login&#x27;</span>),</span><br><span class="line">path(<span class="string">&#x27;logout/&#x27;</span>, views.acc_logout, name=<span class="string">&#x27;logout&#x27;</span>),</span><br><span class="line">path(<span class="string">&#x27;&#x27;</span>,views.index,name=<span class="string">&#x27;index&#x27;</span>),                               <span class="comment">#此处设置为首页，以前写法是&#x27;^$&#x27;,新版本不再使用^、$，只需要‘’就可以</span></span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Django2的变化还有很多。不过最直观和常用到的，那就url.py这一路由文件的变化。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> mysql </tag>
            
            <tag> Web后端 </tag>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> Django </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web后端：MysqlClient包的安装</title>
      <link href="article/55231/"/>
      <url>article/55231/</url>
      
        <content type="html"><![CDATA[<p>想把Django项目从Django1.11升级到Django2，当中有不小改动。其中就包括这个MysqlClient。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04</span><br><span class="line">IDE: JetBrains pycharm 2019.2.4 x64</span><br><span class="line">Python: 3.6.9</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Django升级到2.+版本以后，因为之前使用的是pymysql，官方建议使用mysqlclient，更新到最新版本（最低支持1.3.3）。<br>所以这次项目的升级也要把相应的包也做升级。</p><h1 id="安装MySQL数据库（如果已经安装过，可跳过）"><a href="#安装MySQL数据库（如果已经安装过，可跳过）" class="headerlink" title="安装MySQL数据库（如果已经安装过，可跳过）"></a>安装MySQL数据库（如果已经安装过，可跳过）</h1><p>具体步骤如下：</p><blockquote><p>apt-get update<br>apt-get install python-pip (已经有pip命令则跳过此步骤)<br>apt-get install mysql-server<br>apt-get install mysql-client  </p></blockquote><h1 id="安装MysqlClient"><a href="#安装MysqlClient" class="headerlink" title="安装MysqlClient"></a>安装MysqlClient</h1><p>因为MysqlClient是依赖MySQL的，所以MySQL数据库必须先安装后，再安装它。<br>而且MysqlClient它本身还需要一些其他依赖包，一般情况下，Ubuntu直接安装它会提示缺少依赖。<br>所以，要把依赖包都先安装到位再安装MysqlClient<br>具体步骤如下：</p><blockquote><p>apt-get install libmysql-dev<br>apt-get install libmysqlclient-dev<br>apt-get install python-dev<br>pip install mysqlclient</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>因为实在是很简单的东西。这里就不再进行配图了，打开Ubuntu的终端，把指令加进去就OK。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Web后端 </tag>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web后端：Django中快速安装部署uWSGI!</title>
      <link href="article/36428/"/>
      <url>article/36428/</url>
      
        <content type="html"><![CDATA[<p>短短的几步，简单易懂的完成uwsgi和Django的配合使用！</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04</span><br><span class="line">IDE: JetBrains pycharm 2018.2.4 x64</span><br><span class="line">Python: 3.6</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Django项目中，为了测试，它内置了一个测试服务器。使用“python managy.py runserver 192.168.x.xxx:xxxx”的命令就可以部署。<br>但是实际部署项目的时候，它是非常脆弱的，高访问量的情况下，就会爆炸了。于是，uWSGI就诞生了！<br>uWSGI是一个“旨在开发用于构建托管服务的完整堆栈”的软件应用程序。它以Web服务器网关接口命名，这是该项目支持的第一个插件。<br>uWSGI通常用于与Web服务器（如Cherokee和Nginx）一起提供Python Web应用程序，后者为uWSGI的本机uwsgi协议提供直接支持。<br>它本身更是由C语言编写的，运行速度不用担心了23333！！</p><h1 id="uWSGI的快速部署"><a href="#uWSGI的快速部署" class="headerlink" title="uWSGI的快速部署"></a>uWSGI的快速部署</h1><ol><li>打开终端，在终端黑窗口中输入命令，通过pip进行安装：<blockquote><p>pip install uwsgi</p></blockquote></li><li>下载安装完毕，以后选择一处自己觉得舒服的路径下创建uWSGI的配置文件：<blockquote><p>vim uwsgi_config.ini</p></blockquote></li><li>根据以下模板快速的定制一下你的配置文件内容：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"><span class="comment"># socket= 外网ip:端口（使用nginx连接时，使用socket）</span></span><br><span class="line">http= 192.168.1.108:5360 //（直接做web服务器，使用http）</span><br><span class="line"><span class="built_in">chdir</span>= /home/xxx/xxxx/xxx/xxx //项目根目录</span><br><span class="line">wsgi-file= /zzuilACGN/wsgi.py //项目中wsgi.py文件的目录，相对于项目根目录</span><br><span class="line">processes= 4</span><br><span class="line">threads= 2</span><br><span class="line">master = <span class="literal">true</span>         //主进程</span><br><span class="line"><span class="comment"># vhost = true          //多站模式</span></span><br><span class="line"><span class="comment"># no-site = true        //多站模式时不设置入口模块和文件</span></span><br><span class="line"><span class="comment"># workers = 2           //子进程数</span></span><br><span class="line"><span class="comment"># reload-mercy = 10</span></span><br><span class="line">vacuum = <span class="literal">true</span>         //退出、重启时清理文件</span><br><span class="line">max-requests = 1000</span><br><span class="line">pidfile = uwsgi.pid //记录进程id</span><br><span class="line">daemonize = uswgi.log //日志</span><br></pre></td></tr></table></figure><h1 id="常用的uWSGI操作指令"><a href="#常用的uWSGI操作指令" class="headerlink" title="常用的uWSGI操作指令"></a>常用的uWSGI操作指令</h1></li></ol><blockquote><p>启动：uwsgi –ini uwsgi_config.ini<br>停止：uwsgi –stop uwsgi.pid<br>重启：uwsgi –reload uwsgi.pid  </p></blockquote><p>详细文档,可以访问官方文档进行了解<br><a target="_blank" rel="noopener" href="http://uwsgi-docs-zh.readthedocs.io/zh_CN/latest/tutorials/Django_and_nginx.html">http://uwsgi-docs-zh.readthedocs.io/zh_CN/latest/tutorials/Django_and_nginx.html</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>搞清楚配置文件中的内容，其实使用起来没有什么难度，路径什么的一定要写对，不然会很麻烦。“chdir”就是django项目中放油wsgi.py的文件夹路径。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Web后端 </tag>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> 小技能 </tag>
            
            <tag> Django </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> uWSGI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：Ubuntu激活创建root!</title>
      <link href="article/64610/"/>
      <url>article/64610/</url>
      
        <content type="html"><![CDATA[<p>在安装ubuntu系统时，root账户并没有激活而是被隐藏了，只能通过sudo命令来完成一些需要root权限的任务，从而保证了你的系统安全。<br>若你需要使用root用户权限来完成一些工作的话，可用以下两种方式激活root用户。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu10  </span><br><span class="line">Software: VMware</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在安装ubuntu系统时，root账户并没有激活而是被隐藏了，只能通过sudo命令来完成一些需要root权限的任务，从而保证了你的系统安全。<br>出于某些使用的目的，而且也为了安全，所以建议激活root并且设立一个独立的强密码。</p><h1 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h1><p>以下两种方式激活root用户：</p><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><ol><li>在终端中输入：sudo passwd root</li><li>输入两次root用户的密码</li><li>通过su root命令即可登陆root用户或选择重启后登陆root用户<h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2></li><li>重启电脑，选择recovery模式</li><li>找到最下边的root选项</li><li>在recovery模式的root用户下创建一个root用户，输入：passwd root</li><li>输入两次root用户密码</li><li>重启后进入root用户</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一般来说，使用第一种就足够了，也是最常用的办法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - Ubuntu - VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：Pycharm中如何加载多个项目？</title>
      <link href="article/15440/"/>
      <url>article/15440/</url>
      
        <content type="html"><![CDATA[<p>在使用Pycharm工具练习Python时遇到一个疑问：在已存有项目A工程的前提下如何新建另一个项目B，且两者并存？</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10</span><br><span class="line">IDE: JetBrains pycharm 2018.2.4 x64</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>讲真是这是一个很久以前自己碰到的问题，方法写在其他地方了，现在把它转移到这个博客里来。<br>今天在使用Pycharm工具练习Python时遇到一个疑问：在已存有项目A工程的前提下如何新建另一个项目B，且两者并存？</p><h1 id="基本操作步骤"><a href="#基本操作步骤" class="headerlink" title="基本操作步骤"></a>基本操作步骤</h1><p>在File下拉项中选择“New Project”弹出新界面点击“Pure Python”后创建即可，这是会弹出如图所示的提示框：<br><img src= "/customize/img/loading.gif" data-lazy-src="one.png" alt="one.png"><br>选择“Open in new window”，会新打开一个新界面显示项目B工程，不包含原有项目A工程；  </p><p>选择“Open in current window”，新项目B工程会替换当前已打开界面中的项目A工程。来回切换真心麻烦，有什么好方法可以让两者相互共存呢？</p><h1 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h1><ol><li>File下拉项中选择Settings，操作如图：<br><img src= "/customize/img/loading.gif" data-lazy-src="two.png" alt="two.png">  </li><li>Settings设置界面打开Project下拉列表，选择“Project Structure”详情界面如图所示：<br><img src= "/customize/img/loading.gif" data-lazy-src="three.png" alt="three.png">  </li><li>点击右上角的Add Content Root，在弹出的对话框中选择需要添加的项目即可，如图:<br><img src= "/customize/img/loading.gif" data-lazy-src="four.png" alt="four.png"></li><li>此时并可达到项目A与B共存状态，根据自己需要选择打开就不用来回切换打开项目。<br><img src= "/customize/img/loading.gif" data-lazy-src="five.png" alt="five.png"></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一个pycharm很基础的技巧，平时积累就好。不然多开几个窗口切来切去的怪麻烦的。<br>这是一片以前博文的转移！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疑难杂症：cropper.js预览功能无法正常运行</title>
      <link href="article/28366/"/>
      <url>article/28366/</url>
      
        <content type="html"><![CDATA[<h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>cropper.js的预览功能（preview）如果在渲染时，元素为display:none,就会无法预览。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>cropper.js的预览功能（preview）<br>如果在渲染时，元素为display:none,就会无法预览。<br>改成与按钮绑定，点击时display:none变为display:block,这时进行渲染就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cropper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：hexo中加载本地图片</title>
      <link href="article/33435/"/>
      <url>article/33435/</url>
      
        <content type="html"><![CDATA[<ol><li><p>首先把blog（hexo）目录下的_config.yml里的psot_asset_folder:设置为true</p></li><li><p>在blog（hexo）目录下执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></li><li><p>在blog（hexo）目录下Git Bash Here，运行hexo n “博客名”来生成md博客时，会在_post目录下看到一个与博客同名的文件夹。</p></li><li><p>将想要上传的图片先扔到文件夹下，然后在博客中使用markdown的格式引入图片：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片加载不出时替代名字](图片名.jpg)</span><br></pre></td></tr></table></figure></li><li><p>然后，使用hexo g部署即可。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：Ubuntu快速安装部署mysql!</title>
      <link href="article/60231/"/>
      <url>article/60231/</url>
      
        <content type="html"><![CDATA[<p>方便自己日后查询使用，精简了Ubuntu安装mysql数据库的步骤。<br>文中的命令，可以复制使用，直接完成安装步骤。</p><span id="more"></span><p>首先报上一波，我开发的运行环境</p><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04LTS</span><br><span class="line">浏览器： Google Chrome 版本 67.0.3396.99（正式版本） （64 位）&amp;&amp; FireFox Developer Edition 版本63.0b4  (64位)  </span><br><span class="line">虚拟机： VMware WorkStation14</span><br><span class="line">Software: mysql Ubuntu版</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>MySQL（官方发音为/maɪ ˌɛskjuːˈɛl/“My S-Q-L”[6]，但也经常读作/maɪ ˈsiːkwəl/“My Sequel”）原本是一个开放源代码的关系数据库管理系统，原开发者为瑞典的MySQL AB公司，该公司于2008年被昇阳微系统（Sun Microsystems）收购。2009年，甲骨文公司（Oracle）收购昇阳微系统公司，MySQL成为Oracle旗下产品。</p><p>MySQL在过去由于性能高、成本低、可靠性好，已经成为最流行的开源数据库，因此被广泛地应用在Internet上的中小型网站中。随着MySQL的不断成熟，它也逐渐用于更多大规模网站和应用，比如维基百科、Google和Facebook等网站。非常流行的开源软件组合LAMP中的“M”指的就是MySQL。</p><p>但被甲骨文公司收购后，Oracle大幅调涨MySQL商业版的售价，且甲骨文公司不再支持另一个自由软件项目OpenSolaris的发展，因此导致自由软件社群们对于Oracle是否还会持续支持MySQL社群版（MySQL之中唯一的免费版本）有所隐忧，MySQL的创始人麦克尔·维德纽斯以MySQL为基础，成立分支计划MariaDB。而原先一些使用MySQL的开源软件逐渐转向MariaDB或其它的数据库。例如维基百科已于2013年正式宣布将从MySQL迁移到MariaDB数据库[7]。</p><h1 id="mysql安装流程"><a href="#mysql安装流程" class="headerlink" title="mysql安装流程"></a>mysql安装流程</h1><ol><li>打开终端输入如下命令回车,完成安装目录的更新并且下载mysql需要的文件。<blockquote><p>sudo apt-get update&amp;&amp;sudo apt-get install mysql-server mysql-client<br><img src= "/customize/img/loading.gif" data-lazy-src="first.png" alt="first.png">  </p></blockquote></li></ol><p>会看到类似这种提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">update-alternatives: 使用 /etc/mysql/mysql.cnf 来在自动模式中提供 /etc/mysql/my.cnf (my.cnf)</span><br><span class="line">Renaming removed key_buffer and myisam-recover options (<span class="keyword">if</span> present)</span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/mysql.service → /lib/systemd/system/mysql.service.</span><br><span class="line">正在设置 mysql-server (5.7.23-0ubuntu0.18.04.1) ...</span><br><span class="line">正在处理用于 libc-bin (2.27-3ubuntu1) 的触发器 ...</span><br><span class="line">正在处理用于 ureadahead (0.100.0-20) 的触发器 ...</span><br><span class="line">正在处理用于 systemd (237-3ubuntu10.3) 的触发器 ...</span><br></pre></td></tr></table></figure><p>由此可知，mysql的配置文件在/etc/mysql/my.cnf中。<br>新版本安装过程中没有提示设置root用户密码，根据安装日志和<a target="_blank" rel="noopener" href="https://dev.mysql.com/doc/refman/5.7/en/data-directory-initialization-mysqld.html">官方文档</a></p><blockquote><p>If you used –initialize-insecure to initialize the data directory, connect to the server as root without a password:</p></blockquote><ol start="2"><li><p>输入如下指令，登陆mysql。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root --skip-password</span><br></pre></td></tr></table></figure><p><img src= "/customize/img/loading.gif" data-lazy-src="sec.png" alt="sec.png"></p></li><li><p>登录之后，设置root用户密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;你的密码&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src= "/customize/img/loading.gif" data-lazy-src="three.png" alt="three.png"></p></li></ol><p>到这一步，mysql基本安装完成，这时你需要刷新一下mysql:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h1 id="mysql配置流程"><a href="#mysql配置流程" class="headerlink" title="mysql配置流程"></a>mysql配置流程</h1><p>1.（可选）修改为任何地址可访问数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;你的密码&#x27;</span> with grant option;</span><br></pre></td></tr></table></figure><p>2.将bind-address=127.0.0.1注释（如果没有装vim使用vi即可）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p><img src= "/customize/img/loading.gif" data-lazy-src="four.png" alt="four.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind-address=127.0.0.1 改为 <span class="comment"># bind-address=127.0.0.1</span></span><br></pre></td></tr></table></figure><p>然后保存退出重启mysql或者刷新一下权限即可。再不行，你重启一下Ubuntu总OK了。</p><h1 id="mysql操作命令"><a href="#mysql操作命令" class="headerlink" title="mysql操作命令"></a>mysql操作命令</h1><blockquote><p>•    启动<br>service mysql start<br>•    停止<br>service mysql stop<br>•    重启<br>service mysql restart<br>•    查询服务是否启动<br>netstat -tap | grep mysql  </p></blockquote><h1 id="mysql卸载"><a href="#mysql卸载" class="headerlink" title="mysql卸载"></a>mysql卸载</h1><p>将如下指令运行一遍即可：</p><blockquote><p>sudo apt-get autoremove –purge mysql-server<br>sudo apt-get remove mysql-server<br>sudo apt-get autoremove mysql-server<br>sudo apt-get remove mysql-common<br>dpkg -l |grep ^rc|awk ‘{print $2}’ |sudo xargs dpkg -P  </p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - Ubuntu - VMware - mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：Ubuntu上破解Pycharm2018 2.4</title>
      <link href="article/13655/"/>
      <url>article/13655/</url>
      
        <content type="html"><![CDATA[<p>Ubuntu18.04上安装Pycahrm2018.2.4的教程。<br>其他教程好像还真没有，这里我就先抛砖引玉了。</p><span id="more"></span><p>首先报上一波，我开发的运行环境</p><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04LTS</span><br><span class="line">虚拟机： VMware WorkStation14</span><br><span class="line">software: PyCharm2018.2.4</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Pycharm 2018.2.4激活破解！<br><img src= "/customize/img/loading.gif" data-lazy-src="pycharm.png" alt="pycharm.png"><br>前面有个博文教程介绍到，如何在Ubuntu18.04上安装Pycharm,现在专门就Pycharm2018破解问题上，专门开一片博客来介绍。<br>最近Rover12421大神放出了最新的 通过javaagent代理方式的激活程序，下来给大家一个详细的教程。</p><h1 id="下载破解补丁"><a href="#下载破解补丁" class="headerlink" title="下载破解补丁"></a>下载破解补丁</h1><p><a target="_blank" rel="noopener" href="https://www.imsxm.com/wp-content/uploads/2018/07/JetbrainsCrack-3.1.zip">JetbrainsCrack-3.1</a><br>把下载好的文件，放到pycharm/bin目录下，如图所示:<br><img src= "/customize/img/loading.gif" data-lazy-src="pwd.png" alt="pwd.png">  </p><h1 id="修改vmoptions配置文件"><a href="#修改vmoptions配置文件" class="headerlink" title="修改vmoptions配置文件"></a>修改vmoptions配置文件</h1><p>以文本形式打开pycharm.vmoptions和pycharm64.vmoptions文件，并输入：</p><blockquote><p>-javaagent:{你存放破解补丁的文件夹路径}/JetbrainsCrack.jar</p></blockquote><p><img src= "/customize/img/loading.gif" data-lazy-src="javafix.png" alt="javafix.png">  </p><h1 id="自定义激活信息"><a href="#自定义激活信息" class="headerlink" title="自定义激活信息"></a>自定义激活信息</h1><p>这个可以根据自己的需要自己写。在这里我发放出我的激活信息来供参考：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ThisCrackLicenseId-&#123;</span><br><span class="line"><span class="string">&quot;licenseId&quot;</span>:<span class="string">&quot;20180204&quot;</span>,</span><br><span class="line"><span class="string">&quot;licenseeName&quot;</span>:<span class="string">&quot;overlord&quot;</span>,</span><br><span class="line"><span class="string">&quot;assigneeName&quot;</span>:<span class="string">&quot;NataliaTsunako&quot;</span>,</span><br><span class="line"><span class="string">&quot;assigneeEmail&quot;</span>:<span class="string">&quot;xxx@qq.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;licenseRestriction&quot;</span>:<span class="string">&quot;DeSire&#x27;Fire！&quot;</span>,</span><br><span class="line"><span class="string">&quot;checkConcurrentUse&quot;</span>:<span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;products&quot;</span>:[</span><br><span class="line">&#123;<span class="string">&quot;code&quot;</span>:<span class="string">&quot;II&quot;</span>,<span class="string">&quot;paidUpTo&quot;</span>:<span class="string">&quot;2099-12-31&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;code&quot;</span>:<span class="string">&quot;DM&quot;</span>,<span class="string">&quot;paidUpTo&quot;</span>:<span class="string">&quot;2099-12-31&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;code&quot;</span>:<span class="string">&quot;AC&quot;</span>,<span class="string">&quot;paidUpTo&quot;</span>:<span class="string">&quot;2099-12-31&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;code&quot;</span>:<span class="string">&quot;RS0&quot;</span>,<span class="string">&quot;paidUpTo&quot;</span>:<span class="string">&quot;2099-12-31&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;code&quot;</span>:<span class="string">&quot;WS&quot;</span>,<span class="string">&quot;paidUpTo&quot;</span>:<span class="string">&quot;2099-12-31&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;code&quot;</span>:<span class="string">&quot;DPN&quot;</span>,<span class="string">&quot;paidUpTo&quot;</span>:<span class="string">&quot;2099-12-31&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;code&quot;</span>:<span class="string">&quot;RC&quot;</span>,<span class="string">&quot;paidUpTo&quot;</span>:<span class="string">&quot;2099-12-31&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;code&quot;</span>:<span class="string">&quot;PS&quot;</span>,<span class="string">&quot;paidUpTo&quot;</span>:<span class="string">&quot;2099-12-31&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;code&quot;</span>:<span class="string">&quot;DC&quot;</span>,<span class="string">&quot;paidUpTo&quot;</span>:<span class="string">&quot;2099-12-31&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;code&quot;</span>:<span class="string">&quot;RM&quot;</span>,<span class="string">&quot;paidUpTo&quot;</span>:<span class="string">&quot;2099-12-31&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;code&quot;</span>:<span class="string">&quot;CL&quot;</span>,<span class="string">&quot;paidUpTo&quot;</span>:<span class="string">&quot;2099-12-31&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;code&quot;</span>:<span class="string">&quot;PC&quot;</span>,<span class="string">&quot;paidUpTo&quot;</span>:<span class="string">&quot;2099-12-31&quot;</span>&#125;</span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;hash&quot;</span>:<span class="string">&quot;2911276/0&quot;</span>,</span><br><span class="line"><span class="string">&quot;gracePeriodDays&quot;</span>:7,</span><br><span class="line"><span class="string">&quot;autoProlongated&quot;</span>:<span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure><p>如图所示，将以上信息加入到Pychram中：<br><img src= "/customize/img/loading.gif" data-lazy-src="Pycahrmcraker.png" alt="Pycahrmcraker.png"><br>按下OK，就完成了全部破解流程了！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - Ubuntu - VMware - Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：Ubuntu18.04安装Pycharm2018</title>
      <link href="article/25932/"/>
      <url>article/25932/</url>
      
        <content type="html"><![CDATA[<p>绝了，一天码了三个博客，以前上课，日记都没有写那么勤奋，我的妈耶，mk语法倒是越练越熟了。<br>新装Ubuntu18.04还没有装pycharm,这次博文就来写一下，如何在Ubuntu上安装IDE：Pycharm!</p><span id="more"></span><p>首先报上一波，我开发的运行环境</p><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04LTS</span><br><span class="line">虚拟机： VMware WorkStation14</span><br><span class="line">software: PyCharm</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>习惯于在Ubuntu系统上进行Python的开发了，所以需要一个Python的IDE。<br>Pychram 是我认为21世纪以来最好的开发python的IDE，没有之一！</p><h1 id="Pycharm的下载"><a href="#Pycharm的下载" class="headerlink" title="Pycharm的下载"></a>Pycharm的下载</h1><p>这篇博文仅仅介绍在Ubuntu系统下如何Pycahrm,其他系统的安装或许有些许差异，这里不做介绍。<br>点击此处下载：<br><a target="_blank" rel="noopener" href="https://www.jetbrains.com/pycharm/download/download-thanks.html?platform=linux">Pychram Version: 2018.2.4</a></p><p>如果需要下载其他版本的或最新版本的Pycharm,还需要访问起官网进行下载。</p><blockquote><p><a target="_blank" rel="noopener" href="https://www.jetbrains.com/pycharm/download/#section=linux">https://www.jetbrains.com/pycharm/download/#section=linux</a>  </p></blockquote><p><img src= "/customize/img/loading.gif" data-lazy-src="pycharmDL.png" alt="pycharmDL"></p><p>然后将下载好的压缩包文件拷贝到Ubuntu中，并右键提取到此处，提取完成后，会生成一个pycharm-XXX的文件夹：<br><img src= "/customize/img/loading.gif" data-lazy-src="pycharmzip.png" alt="pycharmzip.png"></p><p>将终端在pycharm-xxx/bin目录下打开：<br>执行sh命令，输入</p><blockquote><p>sh ./pycharm.sh  </p></blockquote><p><img src= "/customize/img/loading.gif" data-lazy-src="pycharmsh.png" alt="pycharmsh.png">  </p><p>回车后，大概等待十几秒，出现Complete Installation弹框，<br>如果需要导入之前安装版本的配置的话，就选第一个，没有就选第二个。<br>所以这里选第二个，直接点击OK即可:<br><img src= "/customize/img/loading.gif" data-lazy-src="pycharmcom.png" alt="pycharmcom.png">  </p><p>点击OK之后弹出 PyCharm Privary Policy Agreement框，隐私政策协议，直接点击Accept:<br><img src= "/customize/img/loading.gif" data-lazy-src="pycharmacee.png" alt="pycharmacee.png"><br>之后会弹出发送XX信息的对话框，不再赘述了，直接选“Dont send”。<br>哇，发现一步步介绍太麻烦了，干脆多图流！<br><img src= "/customize/img/loading.gif" data-lazy-src="pycharmUI.png" alt="pycharmUI.png"><br><img src= "/customize/img/loading.gif" data-lazy-src="pycharmusr.png" alt="pycharmusr.png"><br>这一步，可以根据自己的需要，选择要安装插件，因为我需要MK，所以我安装了这个插件：<br><img src= "/customize/img/loading.gif" data-lazy-src="pycharmplugins.png" alt="pycharmplugins.png"><br>会弹出PyCharm License Activation框，PyCharm许可证激活，<br>Activation license with 激活许可证选择：License server<br>License server address许可证服务器地址填：</p><blockquote><p><a target="_blank" rel="noopener" href="http://idea.imsxm.com/">http://idea.imsxm.com</a></p></blockquote><p>最后点击“Activate”即可：<br><img src= "/customize/img/loading.gif" data-lazy-src="pycharmlisten.png" alt="pycharmlisten.png">  </p><p>如果提示这样的错误，则说明这个破解服务器不可用了：<br><img src= "/customize/img/loading.gif" data-lazy-src="pycharmlistenfalse.png" alt="pycharmlistenfalse.png"></p><p>那么，就要想办法破解pycharm2018了，<br>具体参考：<a target="_blank" rel="noopener" href="https://www.imsxm.com/2018/07/idea-2018-1-5-crack-patcher.html">pycharm破解教程</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Pycahrm2018 在Ubuntu上的安装没有以前那么方便，不过也不费事。加上个补丁即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - Ubuntu - VMware - Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疑难杂症：Hexo发布文章报错YAMLException: can not read a block mapping entry;</title>
      <link href="article/54834/"/>
      <url>article/54834/</url>
      
        <content type="html"><![CDATA[<p>昨天夜里，收到Ubuntu的更行提示，可以升级到18.04LTS版本，于是就直接升级了。<br>因此就出了各种各样奇怪的问题，就比如现在这种情况。</p><span id="more"></span><p>首先报上一波，我开发的运行环境</p><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04LTS</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>升级Ubuntu系统以后，直接再终端输入pip list出现ImportError: cannot import name main的报错。<br>pip3 list运行正常！</p><p>保存信息具体如下：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/usr/bin/pip&quot;</span>, line 9, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from pip import main</span><br><span class="line">ImportError: cannot import name main</span><br></pre></td></tr></table></figure><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>发现是没有main不能被import，于是修改文件：</p><blockquote><p>vim /usr/bin/pip</p></blockquote><p>然后修改pip文件，原文件有这几行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from pip import main</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sys.exit(main())</span><br></pre></td></tr></table></figure><p>将其修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from pip import __main__</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sys.exit(__main__._main())</span><br></pre></td></tr></table></figure><p>即可解决这个问题！<br>还有网友，提供的解决办法，但是我没尝试过运行“hash -d pip3”即可？<br>这个我就不知道了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 疑难杂症 - hexo - Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：Ubuntu软件包有关命令的整理</title>
      <link href="article/63055/"/>
      <url>article/63055/</url>
      
        <content type="html"><![CDATA[<p>刚更新Ubuntu18.04系统，做一些准备工作。<br>更新软件包什么，很正常的。顺便对这类命令做个整理，方便以后查用。</p><span id="more"></span><p>首先报上一波，我开发的运行环境</p><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Ubuntu18.04LTS</span><br><span class="line">虚拟机： VMware WorkStation14</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>刚更新Ubuntu18.04系统，做一些准备工作。<br>更新软件包什么，很正常的。顺便对这类命令做个整理，方便以后查用。<br>虽然通过搜索引擎能解决问题，但是有时候突然想找某一句印象中的命令，反而一下找不到。<br>干脆就做个整合好了。</p><h1 id="Ubuntu软件升级命令"><a href="#Ubuntu软件升级命令" class="headerlink" title="Ubuntu软件升级命令"></a>Ubuntu软件升级命令</h1><h2 id="最常用命令"><a href="#最常用命令" class="headerlink" title="最常用命令"></a>最常用命令</h2><blockquote><p>sudo apt-get update  –更新软件源</p></blockquote><blockquote><p>sudo apt-get upgrade  -更新已经安装的软件</p></blockquote><h2 id="非root用户更新"><a href="#非root用户更新" class="headerlink" title="非root用户更新"></a>非root用户更新</h2><p>每执行apt-get的命令，都需要有管理员权限。非root用户本身是没有这种权限的，所以在执行此类命令时，需要在命令之前加”sudo”。  </p><blockquote><p>sudo: linux系统管理指令，是允许系统管理员让普通用户执行一些或者全部的root命令的一个工具，如halt，reboot，su等等。这样不仅减少了root用户的登陆 和管理时间，同样也提高了安全性。Sudo不是对shell的一个代替，它是面向每个命令的。</p></blockquote><blockquote><p>apt-get: apt-get是一条linux命令，适用于deb包管理式的操作系统，主要用于自动从互联网的软件仓库中搜索、安装、升级、卸载软件或操作系统</p></blockquote><h2 id="Ubuntu-Linux软件包管理工具（APT）"><a href="#Ubuntu-Linux软件包管理工具（APT）" class="headerlink" title="Ubuntu Linux软件包管理工具（APT）"></a>Ubuntu Linux软件包管理工具（APT）</h2><blockquote><p>apt-cache search # ——(package 搜索包)</p></blockquote><blockquote><p>apt-cache show #——(package 获取包的相关信息，如说明、大小、版本等)</p></blockquote><blockquote><p>sudo apt-get install # ——(package 安装包)</p></blockquote><blockquote><p>sudo apt-get install # —–(package - - reinstall 重新安装包)</p></blockquote><blockquote><p>sudo apt-get -f install # —–(强制安装?#”-f = –fix-missing”当是修复安装吧…)</p></blockquote><blockquote><p>sudo apt-get remove #—–(package 删除包)</p></blockquote><blockquote><p>sudo apt-get remove - - purge # ——(package 删除包，包括删除配置文件等)</p></blockquote><blockquote><p>sudo apt-get autoremove –purge # —-(package 删除包及其依赖的软件包+配置文件等（只对6.10有效，强烈推荐）)</p></blockquote><blockquote><p>sudo apt-get update #——更新源</p></blockquote><blockquote><p>sudo apt-get upgrade #——更新已安装的包</p></blockquote><blockquote><p>sudo apt-get dist-upgrade # ———升级系统</p></blockquote><blockquote><p>sudo apt-get dselect-upgrade #——使用 dselect 升级</p></blockquote><blockquote><p>apt-cache depends #——-(package 了解使用依赖)</p></blockquote><blockquote><p>apt-cache rdepends # ——(package 了解某个具体的依赖?#当是查看该包被哪些包依赖吧…)</p></blockquote><blockquote><p>sudo apt-get build-dep # ——(package 安装相关的编译环境)</p></blockquote><blockquote><p>apt-get source #——(package 下载该包的源代码)</p></blockquote><blockquote><p>sudo apt-get clean &amp;&amp; sudo apt-get autoclean # ——–清理下载文件的存档 &amp;&amp; 只清理过时的包</p></blockquote><blockquote><p>sudo apt-get check #——-检查是否有损坏的依赖</p></blockquote><h2 id="apt-get-安装类命令的用法"><a href="#apt-get-安装类命令的用法" class="headerlink" title="apt-get 安装类命令的用法"></a>apt-get 安装类命令的用法</h2><blockquote><p>apt-get install <package><br>下载 <package> 以及所有倚赖的包裹,同时进行包裹的安装或升级.如果某个包裹被设置了 hold (停止标志,就会被搁在一边(即不会被升级).更多 hold 细节请看下面.</p></blockquote><blockquote><p>apt-get remove [–purge] <package><br>移除 <package> 以及任何倚赖这个包裹的其它包裹.–purge 指明这个包裹应该被完全清除 (purged) ,更多信息请看 dpkg -P .</p></blockquote><blockquote><p>apt-get update<br>升级来自 Debian 镜像的包裹列表,如果你想安装当天的任何软件,至少每天运行一次,而且每次修改了/etc/apt/sources.list 后,必须执行.</p></blockquote><blockquote><p>apt-get upgrade [-u]<br>升级所以已经安装的包裹为最新可用版本.不会安装新的或移除老的包裹.如果一个包改变了倚赖关系而需要安装一个新的包裹,那么它将不会被升级,而是标志为 hold .apt-get update 不会升级被标志为 hold 的包裹 (这个也就是 hold 的意思).请看下文如何手动设置包裹为 hold .我建议同时使用 ‘-u’ 选项,因为这样你就能看到哪些包裹将会被升级.</p></blockquote><blockquote><p>apt-get dist-upgrade [-u]<br>和 apt-get upgrade 类似,除了 dist-upgrade 会安装和移除包裹来满足倚赖关系.因此具有一定的危险性.</p></blockquote><blockquote><p>apt-cache search <pattern><br>搜索满足 <pattern> 的包裹和描述.</p></blockquote><blockquote><p>apt-cache show <package><br>显示 <package> 的完整的描述.</p></blockquote><blockquote><p>apt-cache showpkg <package><br>显示 <package> 许多细节,以及和其它包裹的关系.</p></blockquote><blockquote><p>dselect, console-apt, aptitude, gnome-apt,是APT 的几个图形前端(其中一些在使用前得先安装).这里 dselect 无疑是最强大的,也是最古老,最难驾驭.</p></blockquote><blockquote><p>注意：要用apt-get这种方式安装LAMP时，最好先运行下面在命令升级自己的系统这样是为了更新源，而如果你找的源不好，可能安装LMAP失败。</p></blockquote><h2 id="apt-get-卸载类命令的用法"><a href="#apt-get-卸载类命令的用法" class="headerlink" title="apt-get 卸载类命令的用法"></a>apt-get 卸载类命令的用法</h2><p>apt-get的卸载相关的命令有remove/purge/autoremove/clean/autoclean等。具体来说：</p><blockquote><p>apt-get purge / apt-get –purge remove<br>删除已安装包（不保留配置文件)。<br>如软件包a，依赖软件包b，则执行该命令会删除a，而且不保留配置文件  </p></blockquote><blockquote><p>apt-get autoremove<br>删除为了满足依赖而安装的，但现在不再需要的软件包（包括已安装包），保留配置文件。</p></blockquote><blockquote><p>apt-get remove<br>删除已安装的软件包（保留配置文件），不会删除依赖软件包，且保留配置文件。</p></blockquote><blockquote><p>apt-get autoclean<br>APT的底层包是dpkg, 而dpkg 安装Package时, 会将 *.deb 放在 /var/cache/apt/archives/中，apt-get autoclean 只会删除 /var/cache/apt/archives/ 已经过期的deb。</p></blockquote><blockquote><p>apt-get clean<br>使用 apt-get clean 会将 /var/cache/apt/archives/ 的 所有 deb 删掉，可以理解为 rm /var/cache/apt/archives/*.deb。</p></blockquote><h3 id="那么如何彻底卸载软件呢？"><a href="#那么如何彻底卸载软件呢？" class="headerlink" title="那么如何彻底卸载软件呢？"></a>那么如何彻底卸载软件呢？</h3><p>具体来说可以运行如下命令：</p><blockquote><p>删除软件及其配置文件<br>apt-get –purge remove <package></p></blockquote><blockquote><p>删除没用的依赖包<br>apt-get autoremove <package></p></blockquote><blockquote><p>此时dpkg的列表中有“rc”状态的软件包，可以执行如下命令做最后清理：<br>dpkg -l |grep ^rc|awk ‘{print $2}’ |sudo xargs dpkg -P</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>关于Ubuntu软件包更新、安装、卸载等管理命令，大部分都整理到这里。清爽的Ubuntu系统，强迫症福音呐！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技能GET：Mware虚拟机（Ubuntu）通过主机代理访问外网（SSR）</title>
      <link href="article/63302/"/>
      <url>article/63302/</url>
      
        <content type="html"><![CDATA[<p>作为一个Coder,访问外网这是一个必须技能。这样才能更好利用网络的资源，提高开发效率。<br>平时主要都在虚拟机里的Ubuntu中进行开发，那么也需要访问外网，那么该怎么使虚拟机中的Ubuntu能访问外网呢？<br>这里有个记录一个简单的方法。</p><span id="more"></span><p>首先报上一波，我开发的运行环境</p><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10，Ubuntu18.04LTS</span><br><span class="line">浏览器： Google Chrome 版本 67.0.3396.99（正式版本） （64 位）&amp;&amp; FireFox Developer Edition 版本63.0b4  (64位)  </span><br><span class="line">虚拟机： VMware WorkStation14</span><br><span class="line">Software: ShadowsocksR 4.7.0 Windows版</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>要上谷歌查点编程的文档！而且github想pull个东西下来，死慢。自己搭个中转站，来加快一下访问速度。<br>网上查到的教程很多都是直接在Ubuntu中安装代理软件来达到访问外网的目的，七七八八装得软件可真多，太麻烦了。<br>目前的需求，只是让我Win10系统中虚拟机的Ubuntu系统也能跟Win10一样能通过SSR访问外网。<br>那么直接，通过局域网代理就OK！</p><h1 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h1><p>在这里，我假定大家已经在本机（Windows 10 ）上安装好了SSR和虚拟机，并且能够在本机实现了访问外网。<br>因为防止被和谐，这篇博文就不介绍SSR如何实现访问外网了。<br>接下来我就讲解具体的配置方法：  </p><ol><li>打开设置<br><img src= "/customize/img/loading.gif" data-lazy-src="vmmenu.png"></li><li>将网络适配器的设置改成桥接模式<br><img src= "/customize/img/loading.gif" data-lazy-src="vmNat.png"></li><li>打开SSR的选项设置<br><img src= "/customize/img/loading.gif" data-lazy-src="SSRmenu.png"></li><li>修改SSR选项设置，打开本地代理<br><img src= "/customize/img/loading.gif" data-lazy-src="SSRFTP.png"></li><li>查询Win系统在局域网中的IP地址<br> 使用Win(开始菜单键)+R打开运行，并输入cmd后按确定！<br> 在出现的黑窗口中，输入”ipconfig”,获取IP<br><img src= "/customize/img/loading.gif" data-lazy-src="win10IP.png"></li><li>配置 Ubuntu 代理设置<br><img src= "/customize/img/loading.gif" data-lazy-src="Ubuntumenu.png"><br><img src= "/customize/img/loading.gif" data-lazy-src="Ubuntuproxy.png"></li><li>使用浏览器访问推特，测试是否代理成功。<br><img src= "/customize/img/loading.gif" data-lazy-src="twitter.png"></li></ol><p>到这里就完成了！如果你没有成功记得回去重新检查步骤。<br>另外确定自己SSR所用的服务器是否真的可用，如果本身SSR都访问不了外网，这种办法也是无用的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 小技能 - Ubuntu - VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疑难杂症：ubuntu18.04中解决pip的ImportError: cannot import name main问题</title>
      <link href="article/62614/"/>
      <url>article/62614/</url>
      
        <content type="html"><![CDATA[<p>刚才发布文章，出现了神奇的报错，然后我部署到github上发现没部署上，很是疑惑。<br>经过研究发现原来是这么回事！</p><span id="more"></span><p>首先报上一波，我开发的运行环境</p><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10</span><br><span class="line">浏览器： Google Chrome 版本 67.0.3396.99（正式版本） （64 位）&amp;&amp; FireFox Developer Edition 版本63.0b4  (64位)  </span><br><span class="line">IDE: JetBrains Pycharm 2018.2.1 x64</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>执行“hexo clean&amp;&amp;hexo g&amp;&amp;hexo s”命令后，出现can not read a block mapping entry的报错。</p><p>保存信息具体如下：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">ERROR Process failed: _posts/奇技淫巧：Ubuntu软件包有关命令的整理.md</span><br><span class="line">YAMLException: can not <span class="built_in">read</span> a block mapping entry; a multiline key may not be an implicit key at line 6, column 1:</span><br><span class="line">    </span><br><span class="line">    ^</span><br><span class="line">    at generateError (D:\workspace\nodejs\DeSireFireBlog\node_modules\js-yaml\lib\js-yaml\loader.js:165:10)</span><br><span class="line">    at throwError (D:\workspace\nodejs\DeSireFireBlog\node_modules\js-yaml\lib\js-yaml\loader.js:171:9)</span><br><span class="line">    at readBlockMapping (D:\workspace\nodejs\DeSireFireBlog\node_modules\js-yaml\lib\js-yaml\loader.js:1046:9)</span><br><span class="line">    at composeNode (D:\workspace\nodejs\DeSireFireBlog\node_modules\js-yaml\lib\js-yaml\loader.js:1332:12)</span><br><span class="line">    at readDocument (D:\workspace\nodejs\DeSireFireBlog\node_modules\js-yaml\lib\js-yaml\loader.js:1492:3)</span><br><span class="line">    at loadDocuments (D:\workspace\nodejs\DeSireFireBlog\node_modules\js-yaml\lib\js-yaml\loader.js:1548:5)</span><br><span class="line">    at Object.load (D:\workspace\nodejs\DeSireFireBlog\node_modules\js-yaml\lib\js-yaml\loader.js:1569:19)</span><br><span class="line">    at parseYAML (D:\workspace\nodejs\DeSireFireBlog\node_modules\hexo-front-matter\lib\front_matter.js:80:21)</span><br><span class="line">    at parse (D:\workspace\nodejs\DeSireFireBlog\node_modules\hexo-front-matter\lib\front_matter.js:56:12)</span><br><span class="line">    at Promise.all.spread (D:\workspace\nodejs\DeSireFireBlog\node_modules\hexo\lib\plugins\processor\post.js:52:20)</span><br><span class="line">    at tryCatcher (D:\workspace\nodejs\DeSireFireBlog\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (D:\workspace\nodejs\DeSireFireBlog\node_modules\bluebird\js\release\promise.js:509:35)</span><br><span class="line">    at Promise._settlePromise (D:\workspace\nodejs\DeSireFireBlog\node_modules\bluebird\js\release\promise.js:569:18)</span><br><span class="line">    at Promise._settlePromise0 (D:\workspace\nodejs\DeSireFireBlog\node_modules\bluebird\js\release\promise.js:614:10)</span><br><span class="line">    at Promise._settlePromises (D:\workspace\nodejs\DeSireFireBlog\node_modules\bluebird\js\release\promise.js:694:18)</span><br><span class="line">    at Promise._fulfill (D:\workspace\nodejs\DeSireFireBlog\node_modules\bluebird\js\release\promise.js:638:18)</span><br><span class="line">    at PromiseArray._resolve (D:\workspace\nodejs\DeSireFireBlog\node_modules\bluebird\js\release\promise_array.js:126:19)</span><br><span class="line">    at PromiseArray._promiseFulfilled (D:\workspace\nodejs\DeSireFireBlog\node_modules\bluebird\js\release\promise_array.js:144:14)</span><br><span class="line">    at PromiseArray._iterate (D:\workspace\nodejs\DeSireFireBlog\node_modules\bluebird\js\release\promise_array.js:114:31)</span><br><span class="line">    at PromiseArray.init [as _init] (D:\workspace\nodejs\DeSireFireBlog\node_modules\bluebird\js\release\promise_array.js:78:10)</span><br><span class="line">    at Promise._settlePromise (D:\workspace\nodejs\DeSireFireBlog\node_modules\bluebird\js\release\promise.js:566:21)</span><br><span class="line">    at Promise._settlePromise0 (D:\workspace\nodejs\DeSireFireBlog\node_modules\bluebird\js\release\prom</span><br></pre></td></tr></table></figure><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>发现是因为tag后面我不小心把“：”整没了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: <span class="string">&#x27;疑难杂症：ubuntu18.04中解决pip的ImportError: cannot import name main问题&#x27;</span></span><br><span class="line">date: 2018-09-23 20:13:32</span><br><span class="line">tags</span><br><span class="line">- hexo</span><br><span class="line">- Web</span><br><span class="line">- IT技术</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>tags冒号后面应当有个空格,其他地方也应当注意</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: <span class="string">&#x27;疑难杂症：ubuntu18.04中解决pip的ImportError: cannot import name main问题&#x27;</span></span><br><span class="line">date: 2018-09-23 20:13:32</span><br><span class="line">tags： </span><br><span class="line">- hexo</span><br><span class="line">- Web</span><br><span class="line">- IT技术</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>即可解决这个问题！</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 疑难杂症 </tag>
            
            <tag> 技术博文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：hexo+github搭建个人博客，免费！</title>
      <link href="article/55001/"/>
      <url>article/55001/</url>
      
        <content type="html"><![CDATA[<p>网上查的同类教程有不少，但是看了一下发布时间，那些教程的发布还是有些年头的了。<br>有些教程中的步骤现在不一定适用了，我当初就按照别人的教程搭建<a target="_blank" rel="noopener" href="https://hexo.io/zh-cn/">Hexo</a>,不小心就掉了坑。<br>那就干脆自己写一个，方便记忆，顺便给需要的朋友提供参考。</p><span id="more"></span><p>首先报上一波，我开发的运行环境</p><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10</span><br><span class="line">IDE: JetBrains WebStorm 2018.2.1 x64</span><br><span class="line">浏览器： Google Chrome 版本 67.0.3396.99（正式版本） （64 位）&amp;&amp; FireFox Developer Edition 版本63.0b4  (64位)</span><br><span class="line">hexo: 3.7.1</span><br><span class="line">hexo-cli: 1.1.0</span><br><span class="line">node: 8.11.4</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>个人博客，一般来说，基本都是咱们干IT的人用得多一些。<br>要是从事这行业之外的人，根本也不需要吧。QQ空间，微博，微信朋友圈之类的地方就基本能够满足需求了。<br>受到了知乎上，一个讨论的问题的启发。<a target="_blank" rel="noopener" href="https://www.zhihu.com/question/24629410">如何开始写技术博客，怎么选择？</a><br>所以打算自己搭建博客，自己用的东西，当然是讲究一个“顺自己心意”就好。<br>为了尽可能写得详细，所以教程显得很冗长，但是Hexo搭建博客真的很容易..</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>为什么选择<a target="_blank" rel="noopener" href="https://hexo.io/zh-cn/">Hexo</a>+<a target="_blank" rel="noopener" href="https://github.com/">Github</a>来搭建自己的博客？<br>我认为有以下几点优势：</p><ol><li>不需要服务器，<a target="_blank" rel="noopener" href="https://github.com/">Github</a>免费提供的托管服务；</li><li>不需要域名，<a target="_blank" rel="noopener" href="https://github.com/">Github</a>同样提供了一个.io的域名；</li><li>不用将太多的心思投入到博客开发；</li><li>hexo主题多样且免费、又好看；</li><li>不像其他博客有让人心烦的广告；</li><li>便于维护更新，换风格直接换模板就行。</li></ol><h2 id="总体步骤概述"><a href="#总体步骤概述" class="headerlink" title="总体步骤概述"></a>总体步骤概述</h2><p>大体的就4个步骤，咱就不弄那么复杂了。</p><ol><li>下载需要的工具，并安装；</li><li>创建<a target="_blank" rel="noopener" href="https://github.com/">Github</a>仓库；</li><li>修改<a target="_blank" rel="noopener" href="https://hexo.io/zh-cn/">Hexo</a>配置文件；</li><li>把博客部署到<a target="_blank" rel="noopener" href="https://github.com/">Github</a>上；</li></ol><h1 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h1><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><ul><li>下载安装相关工具</li></ul><p>1.下载<a target="_blank" rel="noopener" href="https://nodejs.org/zh-cn/">NodeJs</a><br>    点击此处<a target="_blank" rel="noopener" href="https://nodejs.org/zh-cn/download/">NodeJs中文下载页</a>根据自己的操作系统，下载对应版本的NodeJs。<br>    这里是推荐使用长期维护版本（LTS）的NodeJs,<br>    如果你看不懂，从我这里下载也一样，但是版本就可能不是最新的了，这里版本v8.12.0。<br>    Windows系统：<br>        64位：<a target="_blank" rel="noopener" href="https://nodejs.org/dist/v8.12.0/node-v8.12.0-x64.msi">NodeJs_x64</a><br>        32位：<a target="_blank" rel="noopener" href="https://nodejs.org/dist/v8.12.0/node-v8.12.0-x86.msi">NodeJs_x86</a><br>    Linux系统：（你都会Linux了，不会选不太可能吧？）<br>        64位：<a target="_blank" rel="noopener" href="https://nodejs.org/dist/v8.12.0/node-v8.12.0-linux-x64.tar.xz">NodeJs_x64</a><br>        32位：<a target="_blank" rel="noopener" href="https://nodejs.org/dist/v8.12.0/node-v8.12.0-linux-x86.tar.xz">NodeJs_x86</a><br>    macOS系统：<br>        没用过，不知道。  </p><p>2.安装<a target="_blank" rel="noopener" href="https://git-scm.com/downloads">Git</a><br>    点击<a target="_blank" rel="noopener" href="https://git-scm.com/download/win">Git</a>根据自己的操作系统，下载对应版本的<a target="_blank" rel="noopener" href="https://git-scm.com/downloads">Git</a> 。<br>    如果你看不懂，从我这里下载也一样，但是版本就可能不是最新的了，这里版本v2.19.0。<br>    Window系统：<br>        64位：<a target="_blank" rel="noopener" href="https://github.com/git-for-windows/git/releases/download/v2.19.0.windows.1/Git-2.19.0-32-bit.exe">Git_x64</a><br>        32位：<a target="_blank" rel="noopener" href="https://github.com/git-for-windows/git/releases/download/v2.19.0.windows.1/Git-2.19.0-64-bit.exe">git_x86</a><br>    Linux系统：<br>        详见<a target="_blank" rel="noopener" href="https://git-scm.com/download/linux">安装命令</a></p><p>下载完成以后，打开根据提示操作，Win系统直接“下一步”就OK了。</p><p>3.测试安装是否已经生效<br>    打开cmd命令行(win+r 输入cmd回车)分别执行（Linux系统则是在终端中）复制以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>回车，稍微等下便会有以下运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\DeSireFire&gt;node -v</span><br><span class="line">v8.11.4</span><br><span class="line"></span><br><span class="line">C:\Users\DeSireFire&gt;npm -v</span><br><span class="line">5.6.0</span><br><span class="line"></span><br><span class="line">C:\Users\DeSireFire&gt;git --version</span><br><span class="line">git version 2.18.0.windows.1</span><br></pre></td></tr></table></figure><p>说明安装成功了。</p><p>4.安装<a target="_blank" rel="noopener" href="https://hexo.io/zh-cn/">Hexo</a><br>之前做的，是为了安装<a target="_blank" rel="noopener" href="https://hexo.io/zh-cn/">Hexo</a>做准备。</p><pre><code>https://hexo.io/zh-cn/</code></pre><p>从<a target="_blank" rel="noopener" href="https://hexo.io/zh-cn/">Hexo</a> 官网中可以看到这些指令，咱就以人家官网的步骤行事准没错。<br>打开cmd命令行(win+r 输入cmd回车)分别执行（Linux系统则是在终端中），通过cd指令跳转到要存储<a target="_blank" rel="noopener" href="https://hexo.io/zh-cn/">Hexo</a>的位置。<br>如果不想琢磨，我直接写完全部指令，路径我放在D盘上（以Windows系统为例）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d:</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>以上命令的意思是：</p><ol><li>跳转到D盘</li><li>使用npm安装hexo</li><li>使用hexo初始化一个名为blog的项目</li><li>跳转到生成出的blog文件夹里</li><li>hexo启动服务器<br>如果没有出错，一般会是以下情景：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>此时访问<a target="_blank" rel="noopener" href="http://localhost:4000/">Hexo测试服</a>即可。如果出错请严格按照步骤检查！</li></ol><p>打开浏览器输入 <a target="_blank" rel="noopener" href="http://localhost:4000/">http://localhost:4000</a> 就能看到搭建好的Hexo本地博客了。<br>不过因为没有使用其他主题，所以Hexo会是用自带的默认Blog主题。<br>测试完毕记得在命令窗口上按 Ctrl+C 关闭hexo服务器。  </p><ul><li>创建Github仓库  </li></ul><p><em>注意：</em>   </p><blockquote><p>1.在这里，我的做法是创建两个仓库！<br>2.一个仓库用于存放hexo的配置文件；<br>3.另一个仓库用于部署Blog的静态文件！</p></blockquote><ol><li>点击<a target="_blank" rel="noopener" href="https://github.com/">Github</a>进入Github,登陆！（如果没有账号，自行百度一下注册方法）</li><li>依照图中的位置创建仓库，如图所示：<br><img src= "/customize/img/loading.gif" data-lazy-src="newrepo.png" alt="创建仓库">  </li><li>在Repository name中输入你要创建的仓库名字，这里我命名为“myhexo”,在Description输入仓库的描述，如图：<br><img src= "/customize/img/loading.gif" data-lazy-src="myhexo.png" alt="仓库命名">  </li><li>其他的，根据自己需要来设定。最后单击Create repository来完成最后确定创建。</li><li>再创建第二个仓库，重复以上1~4的步骤，这一次在Repository name中输入dafanshu.github.io（xxx为你的想起的博客名，自行修改,但是必须与你的github用户名一致！）</li></ol><p>完成以上五步，那么在你的github首页就能看到这两个仓库了。如图：<br><img src= "/customize/img/loading.gif" data-lazy-src="repos.png" alt="仓库列表"><br>以“.github.io”结尾的为博客仓库，另一个是hexo配置文件仓库。</p><ul><li>美化Hexo主题（拓展）<br>点击按钮访问<a target="_blank" rel="noopener" href="https://github.com/search?q=hexo-theme">Hexo主题搜索</a>，在里面随便挑。<br><img src= "/customize/img/loading.gif" data-lazy-src="hexothemes.png" alt="主题搜索"><br>一般主题的开发者都会在其仓库下方放上主题效果的预览图。<br>这里，作为举例，选择了 <a target="_blank" rel="noopener" href="https://github.com/litten/hexo-theme-yilia">https://github.com/litten/hexo-theme-yilia</a> 主题。<br>下载方法，如图所示：<br><img src= "/customize/img/loading.gif" data-lazy-src="dltheme.png" alt="主题下载"><br>下载完成后，解压得到一个名为“hexo-theme-yilia-master”的文件夹，这里我把它改名为“yilia”。<br>最后，把它复制到D:\Blog\themes\文件夹下，主题安装就此完成。<br>配置文件方面，之后会讲到。</li></ul><h2 id="使用阶段"><a href="#使用阶段" class="headerlink" title="使用阶段"></a>使用阶段</h2><p>下载、安装完相关工具，创建完相应的两个仓库，那么就开始进入重要的阶段。</p><h3 id="修改Hexo配置文件"><a href="#修改Hexo配置文件" class="headerlink" title="修改Hexo配置文件"></a>修改Hexo配置文件</h3><p>1.打开blog/_config.yml，参考实例进行修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: 网站标题</span><br><span class="line">subtitle: 副标题</span><br><span class="line">description: 个人签名</span><br><span class="line">author: 姓名</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure><p>需要注意的是：  </p><blockquote><ol><li>所有的配置“:”符号后面都要带空格，否则失效。</li><li>language是设置语言。zh-Hans是中文，若出现乱码需转码UTF8。</li></ol></blockquote><p>2.配置发布blog的仓库地址<br>如何获得github的地址呢？如图：<br><img src= "/customize/img/loading.gif" data-lazy-src="blogdeloy.png" alt="部署发布仓库"> </p><blockquote><p>注意，这里提到的仓库是用以“.github.io”结尾的用于部署Blog的仓库</p></blockquote><p>将图中选中的部分复制下来，然后如示例中，写入_config.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/DeSireFire/DeSireFire.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>以上这步非常重要，它关系到你最终能不能部署成功！</p><p>内容较多建议参考官方文档<br><a target="_blank" rel="noopener" href="https://hexo.io/zh-cn/docs/configuration.html">https://hexo.io/zh-cn/docs/configuration.html</a><br>修改完之后，可以重新执行hexo s在浏览器查看效果。并确认无误，包括以后需要添加文章，或者更新主题等，都建议先在本地查看无误再远程部署。<br>根_config.yml文件中。</p><p>3.配置主题到配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: yilia</span><br></pre></td></tr></table></figure><p>需要注意的是：  </p><blockquote><ol><li>theme名必须与D:\Blog\themes\下的文件夹名一致。</li></ol></blockquote><p>4.配置用于存放hexo文件的仓库地址<br>首先，进入<a target="_blank" rel="noopener" href="https://github.com/">Github</a>,找到之前创建来用于存放hexo的配置文件的仓库“myhexo”，如图：<br><img src= "/customize/img/loading.gif" data-lazy-src="blogconfigrepo.png" alt="部署配置仓库"><br>复制仓库地址，然后在D:\Blog\目录下，然后如图中打开gitbash（如果你是Linux系统，直接在相应目录下打开终端即可）：<br><img src= "/customize/img/loading.gif" data-lazy-src="gitbash.png" alt="gitbash"><br>在之后出现的黑窗口中输入一下命令，注意根据自己的需要修改部分命令内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line">git config --global user.name <span class="string">&quot;你的github用户名&quot;</span></span><br><span class="line">git config --global user.email XXX@qq.com（你的邮箱地址）</span><br><span class="line"></span><br><span class="line">git add *</span><br><span class="line">git commit -m <span class="string">&quot;提交hexo配置文件到仓库&quot;</span></span><br><span class="line">git remote add origin (此处加上你的仓库地址，如我的是：https://github.com/DeSireFire/DeSireFire-sHexoWarehouse.git)</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>回车搞定，你的Hexo文件就上传到配置仓库去了！</p><h3 id="本地测试Hexo是否生效"><a href="#本地测试Hexo是否生效" class="headerlink" title="本地测试Hexo是否生效"></a>本地测试Hexo是否生效</h3><p>一切顺利，下一步就可以愉快写博客了。<br>打开cmd命令行(win+r 输入cmd回车)分别执行（Linux系统则是在终端中），<br>如果不想琢磨，我直接写完全部指令，路径我放在D盘上（以Windows系统为例）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> d:\blog\</span><br><span class="line">d:</span><br><span class="line">hexo clean&amp;&amp;hexo g&amp;&amp;hexo server</span><br></pre></td></tr></table></figure><p>如果没有出错，一般会是以下情景：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>打开浏览器输入 <a target="_blank" rel="noopener" href="http://localhost:4000/">http://localhost:4000</a> 就能看到搭建好的Hexo本地博客了。<br>不过因为没有使用其他主题，所以Hexo会是用自带的默认Blog主题。<br>测试完毕记得在命令窗口上按 Ctrl+C 关闭hexo服务器。  </p><h3 id="部署Blog到外网"><a href="#部署Blog到外网" class="headerlink" title="部署Blog到外网"></a>部署Blog到外网</h3><p>完成前面的工作，说明你离成功就只剩下最后一道命令了。<br>继续在本目录命令行，执行！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.hexo clean&amp;&amp;hexo g&amp;&amp;hexo d</span><br></pre></td></tr></table></figure><p>提示上传完成以后，访问<a target="_blank" rel="noopener" href="https://github.com/">Github</a>。打开之间说到以“.github.io”结尾的用于部署Blog的仓库。<br>打开该数据库的设置页面，如图：<br><img src= "/customize/img/loading.gif" data-lazy-src="reposetting.png" alt="reposetting"><br>在设置页面中，向下滚动到GitHub Pages一栏，如图：<br><img src= "/customize/img/loading.gif" data-lazy-src="settings.png" alt="GitHub Pages"><br>刚刚上传完成时，github需要一点时间才能把blog发布到外网上，耐心等待一首歌的时间基本就OK了。<br>当github发布完成，会显示“Your site is published at XXXX”，<br>这时候访问箭头所指的位置，就能直接看到自己的博客了。</p><p>最后一项拓展：<br>如果你有自己购买的域名，可以在第三个箭头处的位置输入保存。这样就能用自己自定义的域名来访问博客了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到此，整个Hexo+Github搭建个人博客的教程就完成了！有没有很开心！如果有不会的地方可以直接留言提问2333！</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> 娱乐资讯 </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：使用Booastrap3-实现标签页的简单实例</title>
      <link href="article/53288/"/>
      <url>article/53288/</url>
      
        <content type="html"><![CDATA[<p>使用Booastrap3 实现标签页的简单实例<br>前端开发中，标签页样式，经常见到。以此次开发项目为契机，来学习实践<a target="_blank" rel="noopener" href="https://v3.bootcss.com/components/#nav-tabs">Boostrap3标签页样式</a></p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10</span><br><span class="line">IDE: JetBrains WebStorm 2018.2.1 x64</span><br><span class="line">浏览器： Google Chrome 版本 67.0.3396.99（正式版本） （64 位）&amp;&amp; FireFox Developer Edition 版本63.0b4  (64位)</span><br><span class="line">Bootstrap： v3.3.7</span><br><span class="line">Jquery： 1.12.4</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>讲真，光从<a target="_blank" rel="noopener" href="https://v3.bootcss.com/components/#nav-tabs">Boostrap3标签页样式</a>来看，还是远远不够的。<br>它的样例效果并没达到标签页的切换效果，仅仅只是有个样式在那里。<br>经过一轮搜索，基本查明了使用方法。</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>参考锚点的思路，用&lt;a&gt;跳转id的方法，在href属性上面写上id地址。<br>然后在，标签内容页部分，给其id属性加上对应的id名，即可控制内容页部分的变化。<br>这部分功能使用了<a target="_blank" rel="noopener" href="https://v3.bootcss.com/javascript/">Boostrap.js</a>插件，而此插件又是建立在JQ上。<br>所以，引入Boostrap.js之前必须先引入JQ。<br>代码中使用了<a target="_blank" rel="noopener" href="https://www.bootcdn.cn/">Bootcdn</a>来引入Boostrap和JQ</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="传统标签页"><a href="#传统标签页" class="headerlink" title="传统标签页"></a>传统标签页</h3><p>具体代码如下：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            /*校准标签对齐*/</span><br><span class="line">            margin: 0px; /*清除外边距*/</span><br><span class="line">            padding: 0px; /*清除内边距*/</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        li &#123;</span><br><span class="line">            /*去掉列表头*/</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line">        /* display、margin-right和margin-left 居中 */</span><br><span class="line">        .container&#123;</span><br><span class="line">            width: 800px;</span><br><span class="line">            height: auto;</span><br><span class="line">            background-color:pink;</span><br><span class="line"></span><br><span class="line">            display: block;</span><br><span class="line">            margin: auto;</span><br><span class="line">            padding-top:20px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;!-- begin 标签页标签 --&gt;</span><br><span class="line">    &lt;ul class=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span><br><span class="line">        &lt;li class=<span class="string">&quot;active&quot;</span>&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;#tab_1&quot;</span> data-toggle=<span class="string">&quot;tab&quot;</span> class=<span class="string">&quot;tab-default&quot;</span>&gt; 主页 &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;#tab_2&quot;</span> data-toggle=<span class="string">&quot;tab&quot;</span>&gt; 附页 &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;#tab_3&quot;</span> data-toggle=<span class="string">&quot;tab&quot;</span>&gt; 附页 &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;#tab_4&quot;</span> data-toggle=<span class="string">&quot;tab&quot;</span>&gt; 正文 &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;#tab_5&quot;</span> data-toggle=<span class="string">&quot;tab&quot;</span>&gt; 感言 &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;!-- end 导航条 --&gt;</span><br><span class="line">    &lt;!-- begin 标签页内容  --&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;tab-content&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;tab-pane active&quot;</span> id=<span class="string">&quot;tab_1&quot;</span>&gt;</span><br><span class="line">            Maecenas sed diam eget risus varius blandit sit amet non magna. Sed posuere consectetur est at lobortis. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Etiam porta sem malesuada magna mollis euismod. Aenean lacinia bibendum nulla sed consectetur. Nulla vitae elit libero, a pharetra augue.</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;tab-pane fade&quot;</span> id=<span class="string">&quot;tab_2&quot;</span>&gt;</span><br><span class="line">            Donec id elit non mi porta gravida at eget metus. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas faucibus mollis interdum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Aenean lacinia bibendum nulla sed consectetur.</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;tab-pane fade&quot;</span> id=<span class="string">&quot;tab_3&quot;</span>&gt;</span><br><span class="line">            non magna. Sed posuere consectetur est at lobortis. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Etiam porta sem malesuada magna mollis euismod. Aenean lacinia bibendum nulla sed consectetur. Nulla vitae elit libero, a pharetra augue</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;tab-pane fade&quot;</span> id=<span class="string">&quot;tab_4&quot;</span>&gt;</span><br><span class="line">            eget metus. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas faucibus mollis interdum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Aenean lacinia bibendum</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;tab-pane fade&quot;</span> id=<span class="string">&quot;tab_5&quot;</span>&gt;</span><br><span class="line">             Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas faucibus mollis interdum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Aenean lacinia bibendum</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- end   导航条下方的内容 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- begin 引入前置JS文件 --&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- end   引入前置JS文件 --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="胶囊式标签页"><a href="#胶囊式标签页" class="headerlink" title="胶囊式标签页"></a>胶囊式标签页</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            /*校准标签对齐*/</span><br><span class="line">            margin: 0px; /*清除外边距*/</span><br><span class="line">            padding: 0px; /*清除内边距*/</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        li &#123;</span><br><span class="line">            /*去掉列表头*/</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line">        /* display、margin-right和margin-left 居中 */</span><br><span class="line">        .container&#123;</span><br><span class="line">            width: 800px;</span><br><span class="line">            height: 1000px;</span><br><span class="line">            background-color:pink;</span><br><span class="line"></span><br><span class="line">            display: block;</span><br><span class="line">            margin: auto;</span><br><span class="line">            padding-top:20px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;!-- begin 标签页标签 --&gt;</span><br><span class="line">    &lt;ul class=<span class="string">&quot;nav nav-pills&quot;</span>&gt;</span><br><span class="line">        &lt;li class=<span class="string">&quot;active&quot;</span>&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;#tab_1&quot;</span> data-toggle=<span class="string">&quot;tab&quot;</span> class=<span class="string">&quot;tab-default&quot;</span>&gt; 主页 &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;#tab_2&quot;</span> data-toggle=<span class="string">&quot;tab&quot;</span>&gt; 附页 &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;#tab_3&quot;</span> data-toggle=<span class="string">&quot;tab&quot;</span>&gt; 附页 &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;#tab_4&quot;</span> data-toggle=<span class="string">&quot;tab&quot;</span>&gt; 正文 &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;#tab_5&quot;</span> data-toggle=<span class="string">&quot;tab&quot;</span>&gt; 感言 &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;!-- end 导航条 --&gt;</span><br><span class="line">    &lt;!-- begin 标签页内容  --&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;tab-content&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;tab-pane active&quot;</span> id=<span class="string">&quot;tab_1&quot;</span>&gt;</span><br><span class="line">            Maecenas sed diam eget risus varius blandit sit amet non magna. Sed posuere consectetur est at lobortis. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Etiam porta sem malesuada magna mollis euismod. Aenean lacinia bibendum nulla sed consectetur. Nulla vitae elit libero, a pharetra augue.</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;tab-pane fade&quot;</span> id=<span class="string">&quot;tab_2&quot;</span>&gt;</span><br><span class="line">            Donec id elit non mi porta gravida at eget metus. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas faucibus mollis interdum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Aenean lacinia bibendum nulla sed consectetur.</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;tab-pane fade&quot;</span> id=<span class="string">&quot;tab_3&quot;</span>&gt;</span><br><span class="line">            non magna. Sed posuere consectetur est at lobortis. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Etiam porta sem malesuada magna mollis euismod. Aenean lacinia bibendum nulla sed consectetur. Nulla vitae elit libero, a pharetra augue</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;tab-pane fade&quot;</span> id=<span class="string">&quot;tab_4&quot;</span>&gt;</span><br><span class="line">            eget metus. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas faucibus mollis interdum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Aenean lacinia bibendum</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;tab-pane fade&quot;</span> id=<span class="string">&quot;tab_5&quot;</span>&gt;</span><br><span class="line">             Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas faucibus mollis interdum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Aenean lacinia bibendum</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- end   导航条下方的内容 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- begin 引入前置JS文件 --&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- end   引入前置JS文件 --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="垂直标签页"><a href="#垂直标签页" class="headerlink" title="垂直标签页"></a>垂直标签页</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            /*校准标签对齐*/</span><br><span class="line">            margin: 0px; /*清除外边距*/</span><br><span class="line">            padding: 0px; /*清除内边距*/</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        li &#123;</span><br><span class="line">            /*去掉列表头*/</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line">        /* display、margin-right和margin-left 居中 */</span><br><span class="line">        .container&#123;</span><br><span class="line">            display: block;</span><br><span class="line">            margin: auto;</span><br><span class="line">            padding-top:20px;</span><br><span class="line">            width: 800px;</span><br><span class="line">            height: 500px;</span><br><span class="line">            background-color:pink;</span><br><span class="line">            border: 1px silver solid;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;col-md-2&quot;</span>&gt;</span><br><span class="line">            &lt;!-- begin 标签页标签 --&gt;</span><br><span class="line">            &lt;ul class=<span class="string">&quot;nav nav-pills nav-stacked text-center&quot;</span> style=<span class="string">&quot;border-right: 4px silver solid&quot;</span>&gt;</span><br><span class="line">                &lt;li class=<span class="string">&quot;active&quot;</span>&gt;</span><br><span class="line">                    &lt;a href=<span class="string">&quot;#tab_1&quot;</span> data-toggle=<span class="string">&quot;tab&quot;</span> class=<span class="string">&quot;tab-default&quot;</span>&gt; 主页 &lt;/a&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;a href=<span class="string">&quot;#tab_2&quot;</span> data-toggle=<span class="string">&quot;tab&quot;</span>&gt; 附页 &lt;/a&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;a href=<span class="string">&quot;#tab_3&quot;</span> data-toggle=<span class="string">&quot;tab&quot;</span>&gt; 附页 &lt;/a&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;a href=<span class="string">&quot;#tab_4&quot;</span> data-toggle=<span class="string">&quot;tab&quot;</span>&gt; 正文 &lt;/a&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;a href=<span class="string">&quot;#tab_5&quot;</span> data-toggle=<span class="string">&quot;tab&quot;</span>&gt; 感言 &lt;/a&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">            &lt;!-- end 标签页标签 --&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;col-md-10&quot;</span>&gt;</span><br><span class="line">            &lt;!-- begin 标签页内容  --&gt;</span><br><span class="line">            &lt;div class=<span class="string">&quot;tab-content&quot;</span>&gt;</span><br><span class="line">                &lt;div class=<span class="string">&quot;tab-pane active&quot;</span> id=<span class="string">&quot;tab_1&quot;</span>&gt;</span><br><span class="line">                    Maecenas sed diam eget risus varius blandit sit amet non magna. Sed posuere consectetur est at lobortis. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Etiam porta sem malesuada magna mollis euismod. Aenean lacinia bibendum nulla sed consectetur. Nulla vitae elit libero, a pharetra augue.</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=<span class="string">&quot;tab-pane fade&quot;</span> id=<span class="string">&quot;tab_2&quot;</span>&gt;</span><br><span class="line">                    Donec id elit non mi porta gravida at eget metus. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas faucibus mollis interdum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Aenean lacinia bibendum nulla sed consectetur.</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=<span class="string">&quot;tab-pane fade&quot;</span> id=<span class="string">&quot;tab_3&quot;</span>&gt;</span><br><span class="line">                    non magna. Sed posuere consectetur est at lobortis. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Etiam porta sem malesuada magna mollis euismod. Aenean lacinia bibendum nulla sed consectetur. Nulla vitae elit libero, a pharetra augue</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=<span class="string">&quot;tab-pane fade&quot;</span> id=<span class="string">&quot;tab_4&quot;</span>&gt;</span><br><span class="line">                    eget metus. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas faucibus mollis interdum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Aenean lacinia bibendum</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=<span class="string">&quot;tab-pane fade&quot;</span> id=<span class="string">&quot;tab_5&quot;</span>&gt;</span><br><span class="line">                    Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas faucibus mollis interdum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Aenean lacinia bibendum</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;!-- end   标签页内容 --&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- begin 引入前置JS文件 --&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- end   引入前置JS文件 --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="两端对齐标签页"><a href="#两端对齐标签页" class="headerlink" title="两端对齐标签页"></a>两端对齐标签页</h3><ul><li>由于Boostrap官网表示，两端对齐的导航条导航链接已经被弃用了。便不做演示了。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>常见的几种标签页样式，便以实例代码来展示了，部分排版依赖于Boostrap的栅格系统。<br>Boostrap是真的很方便，快速完成大概样式，然后自己diy的CSS样式覆盖修饰，一个个性的网页就很快出来了。<br>但是Boostrap的东西，真的太多，要完全吃透它得花不少的时间。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> Boostrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：Markdown常用语法举例和总结</title>
      <link href="article/8129/"/>
      <url>article/8129/</url>
      
        <content type="html"><![CDATA[<p>Markdown 是用于 创作 web 文档的.书写博客的利器！对常用的MK语法进行简单的介绍！</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10</span><br><span class="line">IDE: pycharm2018</span><br></pre></td></tr></table></figure><hr><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="设计理念"><a href="#设计理念" class="headerlink" title="设计理念"></a>设计理念</h2><p>Markdown 致力于使阅读和创作文档变得容易.</p><p>Markdown 视可读性为最高准则. Markdown 文件应该以纯文本形式原样发布, 不应该包含标记标签和格式化指令. 尽管 Markdown 的语法受到了以下这些 text-to-HTML 过滤器的影响 – 包括 Setext, atx, Textile, reStructuredText, Grutatext, 还有 EtText – 但是 Markdown 语法灵感最大的来源还是纯文本 email 的格式.</p><p>基于以上背景, Markdown 完全由标点符号组成, 这些标点经过仔细挑选以使他们看上去和表达的含义相同. 例如, 星号标记的单词就像 <em>强调</em>. 列表就像是列表. 如果你使用过 email 的话, 就连块引用都像引用的文本段落.</p><ul><li>总的来说，Markdown 是用于 创作 web 文档的.</li></ul><h2 id="Markdown的内联HTML"><a href="#Markdown的内联HTML" class="headerlink" title="Markdown的内联HTML"></a>Markdown的内联HTML</h2><h3 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h3><p>Markdown，创建初衷是用于创造web文档，但却从来不是要取代HTML。</p><p>因为这本身就没什么必要，它的语法集非常小, 只对应一小部分 HTML 标签.<br>HTML 是一种 发布 格式; Markdown 是一种 创作 格式. 因此, Markdown 处理的都是纯文本.</p><ul><li>markdown 的目标是易于阅读, 创作和编辑文章. </li></ul><p>我们可以通过一些简单HTML代码来是实现一部分Markdown语法的文本效果。<br>例如, 下面是添加 HTML 表格到 Markdown 文件:  </p><pre><code>这是另一个普通段落。&lt;table&gt;    &lt;tr&gt;        &lt;td&gt;Markdown&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;这是另一个普通段落。</code></pre><p>效果如下：   </p><p>这是另一个普通段落。</p><table>    <tr>        <td>Markdown</td>    </tr></table>这是另一个普通段落。<ul><li>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。</li></ul><p>如果多来几个&lt;td&gt;（列）标签和&lt;tr&gt;（行）标签，效果如下：<br>    <table><br>        <tr><br>            <td>Markdown</td><br>            <td>Markdown</td><br>            <td>Markdown</td><br>        </tr><br>        <tr><br>            <td>Markdown</td><br>            <td>Markdown</td><br>            <td>Markdown</td><br>        </tr><br>    </table></p><ul><li>看起来还挺简单的，那么markdown的表格形式完全就可以这么搞定了。</li></ul><p>继续进行一些拓展，这回加入span，cite，del等标签尝试一下！<br>    <table><br>        <tr><br>            <td><span>Markdown</span></td><br>            <td><cite>Markdown</cite></td><br>            <td><del>Markdown</del></td><br>        </tr><br>    </table></p><ul><li>好吧，除了del标签，其他的感觉好像没什么luan用的样子。</li></ul><h3 id="特殊字符自动转义"><a href="#特殊字符自动转义" class="headerlink" title="特殊字符自动转义"></a>特殊字符自动转义</h3><ul><li><p>说真的，我感觉这东西用的少。“\”可以解决很多问题了。<br>在 HTML 中, 有两个字符需要特殊对待: &lt; 和 &amp;. 左尖括号用于起始标签; 英镑符号用于表示 HTML 字符实体. 如果你想将它们用作字面量, 你必须将它们转义为字符实体, 例如 &amp;lt;, 和 &amp;amp;。<br>简单来说，在markdown中这两个特殊符号可以通过这种方式转移。</p>  <table>      <tr>          <td>“ < ”: \& lt</td>      </tr>      <tr>          <td>“ & ”: \& amp</td>      </tr>  </table>最多也就在网页网址的特殊符号中用到一下，比如：   <p>  <a target="_blank" rel="noopener" href="http://images.google.com/images?num=30&amp;q=larry+bird">http://images.google.com/images?num=30&amp;q=larry+bird</a></p></li></ul><h2 id="真Markdown-常用语法"><a href="#真Markdown-常用语法" class="headerlink" title="真Markdown 常用语法"></a>真Markdown 常用语法</h2><h3 id="Markdown-标题"><a href="#Markdown-标题" class="headerlink" title="Markdown 标题"></a>Markdown 标题</h3><p>在Markdown中，你只需要在文本前面加上# 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加# 即可，标题字号相应降低。例如：</p><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><p>预览结果:</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><ul><li>妈耶，真多，不过跟HTML的h1~6标签也就一个样。</li></ul><h3 id="Markdown-锚点"><a href="#Markdown-锚点" class="headerlink" title="Markdown 锚点"></a>Markdown 锚点</h3><p>Coding 会针对每个标题，在解析时都会添加锚点id，这样的话如果是大文章，就容易分出目录来了。比如：</p><pre><code># 锚点</code></pre><p>变成静态网页文件以后，会解析成：</p><pre><code>&lt;h1 id=&quot;user-content-锚点&quot;&gt;锚点&lt;/h1&gt;</code></pre><p>锚点一般是用在站内链接，方便跳转的，比如：</p><pre><code>[回到大标题](#user-content-概述);</code></pre><p>使用效果如下：<br><a href="#user-content-%E6%A6%82%E8%BF%B0">回到大标题</a></p><ul><li>虽然我似乎没有跳转成功。</li></ul><h3 id="Markdown-段落换行"><a href="#Markdown-段落换行" class="headerlink" title="Markdown 段落换行"></a>Markdown 段落换行</h3><p>集中起来，我认为有五种方法：</p><ol><li>通过&lt;br&gt;标签来换行；</li><li>通过在句末加入两个空格来换行；</li><li>通过&lt;p&gt;&lt;/p&gt;标签来圈出段落,来达到换行目的；</li><li>通过在Markdown文本中按两下回车，也能起到换行的目的，就是换得有点远；</li><li>通过列表的形式，之后介绍。</li></ol><ul><li>相当得简单，效果就不演示了。</li></ul><h3 id="Markdown-列表"><a href="#Markdown-列表" class="headerlink" title="Markdown 列表"></a>Markdown 列表</h3><p>Markdown的列表样式跟HTML一样，分有序列表和无序列表。</p><pre><code>无序列表：注意是：-[空格]文本- 文本- 文本- 文本有序列表：注意是：1.[空格]文本1. 通过\&lt;br&gt;标签来换行；2. 通过在句末加入两个空格来换行；3. 通过\&lt;p&gt;\&lt;/p&gt;标签来圈出段落,来达到换行目的；4. 通过在Markdown文本中按两下回车，也能起到换行的目的，就是换得有点远；5. 通过列表的形式，之后介绍。</code></pre><ul><li>是不是发现只要有一点点HTML，Markdown就很容易上手了？</li></ul><h3 id="Markdown-引用、代码块、强调"><a href="#Markdown-引用、代码块、强调" class="headerlink" title="Markdown 引用、代码块、强调"></a>Markdown 引用、代码块、强调</h3><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>在句首加个符号“&gt;[空格]”即可，效果如下：</p><blockquote><p>窗前明月光，李白想姑娘！</p></blockquote><ul><li>李白怕是要打死我了。</li></ul><p>引用的用法还有嵌套引用，多加几个“&gt;”符号，效果如下：</p><blockquote><p>窗前明月光，李白想姑娘！</p><blockquote><p>杜甫来我床头闻拖鞋！</p><blockquote><p>杜甫2号来我床头闻拖鞋！</p><blockquote><p>杜甫3号来我床头闻拖鞋！</p><blockquote><p>杜甫4号来我床头闻拖鞋！</p><blockquote><p>杜甫5号来我床头闻拖鞋！</p><blockquote><p>杜甫6号来我床头闻拖鞋！</p><blockquote><blockquote><p>杜甫7号来我床头闻拖鞋！<br>杜甫8号来我床头闻拖鞋！</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><ul><li>由此可见，引用嵌套最深能够搞6层，再多就并列了，666。</li></ul><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>通过以下方式来表示代码块； </p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">print</span>(<span class="string">&#x27;我不要问我从哪里来~&#x27;</span>) </span><br></pre></td></tr></table></figure></code></pre><p>效果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">print</span>(<span class="string">&#x27;我不要问我从哪里来~&#x27;</span>) </span><br></pre></td></tr></table></figure><h4 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h4><ol><li>*强调* 或者_强调_（示例：斜体）</li><li>**加重强调** 或者 __加重强调__</li><li>多行强调，空两行，并缩进4个空格的方式来表示；</li></ol><pre><code>print(&#39;我不要问我从哪里来~&#39;)print(&#39;我不要问我从哪里来~&#39;)print(&#39;我不要问我从哪里来~&#39;)</code></pre><ul><li>实践一下，很快就能看明白了什么意思了。</li></ul><h3 id="Markdown-链接"><a href="#Markdown-链接" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h3><p><em>语法1</em>：[链接的名字](链接的地址)，链接地址可以是绝对路径也可以是相对路径  </p><p>链接可以在行内插入：</p><pre><code>Welcome to [Hexo](https://hexo.io/zh-cn/)! This is your very first post.</code></pre><p>比较一下？<br>Welcome to <a target="_blank" rel="noopener" href="https://hexo.io/zh-cn/">Hexo</a>! This is your very first post.</p><h3 id="Markdown-图片"><a href="#Markdown-图片" class="headerlink" title="Markdown 图片"></a>Markdown 图片</h3><p><em>语法</em>：![Alt text](链接的地址)，链接地址可以是绝对路径也可以是相对路径<br><img src= "/customize/img/loading.gif" data-lazy-src="https://www.google.co.jp/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png" alt="Google"></p><h3 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h3><p>emmmm，之前介绍过了。用table标签嘛…<br>但是！还有其他的方法！</p><pre><code>| Tables        | Are           | Cool  || ------------- |:-------------:| -----:|| col 3 is      | right-aligned | $1600 || col 2 is      | centered      |   $12 || zebra stripes | are neat      |    $1 |</code></pre><p>显示的效果：</p><table><thead><tr><th>Tables</th><th align="center">Are</th><th align="right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td align="center">right-aligned</td><td align="right">$1600</td></tr><tr><td>col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td>zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr></tbody></table><ul><li>注意观察，表格第二行的“：”符号，这决定了表格中的内容向什么地方靠齐！</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Markdown，当然还不止这些东西。但是常用的，我感觉已经差不多了。<br>多写多练，体会一下 Markdown 的优雅之处！<br>最后我还发现一个问题，就是Markdown语法本身没有错。但是由于主题的原因，它改了某些markdown生成的样式。<br>这就有点蛋疼了233</p><ul><li>啊，好累啊。</li></ul>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔：最初的声音！</title>
      <link href="article/35813/"/>
      <url>article/35813/</url>
      
        <content type="html"><![CDATA[<p>早在很久之前都一直想自己搭建一个属于自己的个人博客，<br>但是无论是CSDN、简书、博客园、&amp;%￥（*&amp;、甚至是Bilibili创作版，它们的博客样式，实在是让人喜欢不起来。<br>加上苦于没有时间，只是想写写博客，也不想将时间用在前端开发上，就始终没有搭成。</p><span id="more"></span><ul><li>趁着一个特别周末连休，就找机会摸索了一下。</li><li>早有耳闻，使用github搭建静态博客，省时省力省钱钱还有点逼格。<br>于是查查资料，感觉自己看来还是有点高估了搭建博客的难度…</li><li>Jekyll 也做出了尝试，但是光了好一阵，没找到什么自己喜欢的主题。</li><li>便开始东逛西逛看看有没有其他类似的东西能够在github上搭建博客，这时一个名为<a target="_blank" rel="noopener" href="https://hexo.io/zh-cn/">Hexo</a>吸引了我的注意，<br>而且找到了自己喜欢的主题。</li><li>一拍大腿，就敲定，搞tmd！最后这个博客就出现了。</li><li>终于不用再写本地文档了，我好开心啊！<br>顺便多练习联系<a target="_blank" rel="noopener" href="https://zh.wikipedia.org/wiki/Markdown">Markdown</a>语法！</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔心得 </tag>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疑难杂症：JS提示Cannot read property &#39;replace&#39; of undefined</title>
      <link href="article/23534/"/>
      <url>article/23534/</url>
      
        <content type="html"><![CDATA[<p>使用replace方法的是发生了报错。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10</span><br><span class="line">IDE: JetBrains WebStorm 2020.2.4 x64</span><br><span class="line">浏览器： Google Chrome 版本 67.0.3396.99（正式版本） （64 位）&amp;&amp; FireFox Developer Edition 版本63.0b4  (64位)</span><br></pre></td></tr></table></figure><hr><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>使用replace方法的是发生了报错。console.log报错：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot read property &#x27;replace&#x27; of undefined</span><br></pre></td></tr></table></figure><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>出现这个错误的原因一般是传的参数为null</p><p>在传参之前加个是否为null的判断就行了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>给各位大佬丢人了！<br>当你的才华还撑不起你的野心时<br>那你就应该静下心来学习<br>当你的能力还驾驭不了你的目标时<br>那就应该沉下心来历练</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - Web前端 - 疑难杂症 - JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】：新手练习建站神器！免费域名+免费CDN</title>
      <link href="article/54734/"/>
      <url>article/54734/</url>
      
        <content type="html"><![CDATA[<p>原来是逗比根据地的文章，但是这个很好用的网站一夜之间消失了。<br>很大可能是被水表了，为站长默哀..<br>原站已经没有了，但是它上面有些博文，还是非常有用的，所以保存一份到自己的博客中，方便查看  </p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">操作系统： win10  </span><br></pre></td></tr></table></figure><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>免费并不是开善堂，缺点还是有的，免费域名随时可能被回收，免费cdn在大陆访问速度并不是很好。我认为域名回收就是如果这个域名用的人多了，就会被回收让你拿钱去赎。不过因为也就自己玩玩，说穿了被回收了换个新的就行了。CDN因为众所周知的原因，在大陆用起来不咋地，不过免费还要啥自行车。这次推荐的CDN和域名都有DNS功能，可以二选一。</p><h1 id="免费域名"><a href="#免费域名" class="headerlink" title="免费域名"></a>免费域名</h1><p>先打开 <a target="_blank" rel="noopener" href="https://www.freenom.com/zh/index.html?lang=zh"> “免费注册网站Freenom.com”</a> ，输入自己想要的域名查看是否被占用。目前免费的域名应该只有.tk/.ml/.ga/.cf/.gp这五个后缀。下单后可以在Period选项中修改购买时间，最长12个月是免费1年就要收费了（不是很懂1年和12个月的具体区别。然后要验证邮箱，因为此站在国内也有服务所以QQ邮箱也是可以的，然后点击Verify My Email Address，就会有一封电子邮件发到你的邮箱里点击里面的链接。就会跳转到填写用户信息+注册账号的页面，网站会记录你的ip地址，所以不要乱些信息。记得同意不用看的用户协议后提交，就会跳到order confirmation页面，点击Click here to go to your Client Area就会跳转到登陆界面，用刚才输入的邮箱和密码登陆后，找到Domains——My Domains就能看到自己购买的域名了。</p><p><img src= "/customize/img/loading.gif" data-lazy-src="001fee58.png"></p><p>点击Manage Domain查看域名</p><p><img src= "/customize/img/loading.gif" data-lazy-src="fe68c9eb.png"></p><p>再点击Manage Freenom DNS，就可以管理免费DNS啦。如果不能正常使用点击Management Tools——Nameservers，切换回默认Use default nameservers再切换回去就可以了。</p><h1 id="免费CDN"><a href="#免费CDN" class="headerlink" title="免费CDN"></a>免费CDN</h1><p>先打开 <a target="_blank" rel="noopener" href="https://www.cloudflare.com/">Cloudflare CDN</a> 注册一个账号并登陆。访问 <a target="_blank" rel="noopener" href="https://www.cloudflare.com/a/add-site">https://www.cloudflare.com/a/add-site</a> 进入添加网站域名页面。</p><p><img src= "/customize/img/loading.gif" data-lazy-src="9abd85dc.png"></p><p>之后就可以下一步了，注意在选择服务页面选择免费档的。</p><p><img src= "/customize/img/loading.gif" data-lazy-src="38b1f344.png"></p><p>接下来就要用免费CDN的DNS托管免费域名。这个步骤可以先不管，直接点击Continue **按钮继续。</p><p><img src= "/customize/img/loading.gif" data-lazy-src="71eacbe2.png"></p><p>获取Cloudflare DNS服务器地址，复制下来备用，不要关闭页面。</p><p><img src= "/customize/img/loading.gif" data-lazy-src="343d3ce3.png"></p><p>打开Freenom 域名管理页面 <a target="_blank" rel="noopener" href="https://my.freenom.com/clientarea.php?action=domains">https://my.freenom.com/clientarea.php?action=domains</a> 找到Management Tools——Nameservers选择Use custom nameservers (enter below)，把刚才复制下来的两个DNS服务器地址复制进去，后点击Change Nameservers。</p><p><img src= "/customize/img/loading.gif" data-lazy-src="f68ad682.png"></p><p>完成后回到Cloudflare的页面，点击 Continue按钮继续。</p><p><img src= "/customize/img/loading.gif" data-lazy-src="271e5303.png"></p><p>跳到页面显示域名状态，应该是生效中，这个时间要看脸我的很快就生效了。当在overview中显示Status: Active**后就生效啦。</p><p><img src= "/customize/img/loading.gif" data-lazy-src="7fc0eea4.png"></p><p>在等待生效的时候可以点击DNS选项，进行正常的DNS配置。具体规则可以自己上网查，A是IPv4地址，c是域名地址之类的。</p><p><img src= "/customize/img/loading.gif" data-lazy-src="534015e4.png"></p><h1 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h1><p>挂载CDN后再访问域名就不是直接访问ip地址了而是从CDN加载一部分资源，利用这个原理有兴趣可以折腾一下。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 - 转载 - 小技能 - CDN - NS - 域名解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：requests请求库的使用</title>
      <link href="article/8882/"/>
      <url>article/8882/</url>
      
        <content type="html"><![CDATA[<p>近期看到V2EX上一个老帖子 <a target="_blank" rel="noopener" href="https://www.v2ex.com/t/210030">新人求教： Python 删除 dict 一个 item 后，内存不释放的？</a><br>引起了我的思考，如果对一个dict对象进行增删改操作，它的内存占用会发生什么样的变化？</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统： Windos10  </span><br><span class="line">IDE: JetBrains Pycharm 2018.2.4 x64  </span><br><span class="line">语言: Python 3.6.4</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>python一个非常基本爬虫库，它是基于python urllib 这个基本网络请求包来造的轮子。<br>可以更方便的开发python静态爬虫。<br>在这里就总一个简单总结和超级好懂的代码示例</p><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">urllib是手枪的话，那么现在可以做个升级，玩自动突击步枪了！</span></span><br><span class="line"><span class="string">urllib开发爬虫相对来说比较繁琐，其中确实有不方便的地方。</span></span><br><span class="line"><span class="string">为了更方便的开发来实现一些高级操作，就有了更为强大的库requests</span></span><br><span class="line"><span class="string">现在就来初步体验一下！</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 首先导入requests</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送请求</span></span><br><span class="line">req = requests.get(<span class="string">&quot;https://sm.ms/&quot;</span>)</span><br><span class="line"><span class="comment"># 查看请求结果的类型</span></span><br><span class="line">print(<span class="built_in">type</span>(req))</span><br><span class="line">print(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="comment"># 通过属性查看请求状态码</span></span><br><span class="line">print(req.status_code)</span><br><span class="line">print(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="comment"># 查看请求结果网页内容的类型</span></span><br><span class="line">print(<span class="built_in">type</span>(req.text))</span><br><span class="line">print(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="comment"># 查看请求后获得cookies</span></span><br><span class="line">print(<span class="built_in">type</span>(req.cookies))</span><br><span class="line">print(req.cookies)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> req.cookies:</span><br><span class="line">    print(i.name+<span class="string">&quot;=&quot;</span>+i.value)</span><br><span class="line">print(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="comment"># 查看请求结果网页内容</span></span><br><span class="line">print(req.text)</span><br><span class="line">print(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="comment"># 查看requests.get方法的所有参数</span></span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line">print(inspect.getfullargspec(requests.get))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">可以发现，requests库对于请求得到的网页内容，在查看的时候要比urllib更加方便。</span></span><br><span class="line"><span class="string">不再需要类似“.read()”啊，“。decode()”解码啊，还有opener处理cookies之类那么麻烦。</span></span><br><span class="line"><span class="string">在requests库都能一步到位，而且可以很直观地通过requests.get()看出，这是以get方式发送请求！</span></span><br><span class="line"><span class="string">除此之外，还有其他几种请求方式：</span></span><br><span class="line"><span class="string">req = requests.post(&quot;http://httpbin.org/post&quot;)</span></span><br><span class="line"><span class="string">req = requests.put(&quot;http://httpbin.org/put&quot;)</span></span><br><span class="line"><span class="string">req = requests.delete(&quot;http://httpbin.org/delete&quot;)</span></span><br><span class="line"><span class="string">req = requests.head(&quot;http://httpbin.org/head&quot;)</span></span><br><span class="line"><span class="string">req = requests.options(&quot;http://httpbin.org/options&quot;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="Get方法"><a href="#Get方法" class="headerlink" title="Get方法"></a>Get方法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">requests库的get()方法与urlopen()方法没有太大的区别，</span></span><br><span class="line"><span class="string">能达到同样的效果，但是requests库简单得多，</span></span><br><span class="line"><span class="string">requests.get(url,params,***)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 首先导入requests</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 有简入繁，最简单的requests_get爬虫</span></span><br><span class="line"><span class="comment"># req = requests.get(url=&quot;http://httpbin.org/get&quot;)</span></span><br><span class="line"><span class="comment"># print(req.text)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;args&quot;: &#123;&#125;, </span></span><br><span class="line"><span class="string">  &quot;headers&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;Accept&quot;: &quot;*/*&quot;, </span></span><br><span class="line"><span class="string">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, </span></span><br><span class="line"><span class="string">    &quot;Connection&quot;: &quot;close&quot;, </span></span><br><span class="line"><span class="string">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span></span><br><span class="line"><span class="string">    &quot;User-Agent&quot;: &quot;python-requests/2.14.2&quot;</span></span><br><span class="line"><span class="string">  &#125;, </span></span><br><span class="line"><span class="string">  &quot;origin&quot;: &quot;171.36.8.151&quot;, </span></span><br><span class="line"><span class="string">  &quot;url&quot;: &quot;http://httpbin.org/get&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再来魔改一下，通过get请求传递参数</span></span><br><span class="line"><span class="comment"># req = requests.get(url=&quot;http://httpbin.org/get?name=666&amp;value=888&quot;)</span></span><br><span class="line"><span class="comment"># print(req.text)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">对比以后可以看到，在args字段这里传参数了！</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;args&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;name&quot;: &quot;666&quot;, </span></span><br><span class="line"><span class="string">    &quot;value&quot;: &quot;888&quot;</span></span><br><span class="line"><span class="string">  &#125;, </span></span><br><span class="line"><span class="string">  &quot;headers&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;Accept&quot;: &quot;*/*&quot;, </span></span><br><span class="line"><span class="string">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, </span></span><br><span class="line"><span class="string">    &quot;Connection&quot;: &quot;close&quot;, </span></span><br><span class="line"><span class="string">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span></span><br><span class="line"><span class="string">    &quot;User-Agent&quot;: &quot;python-requests/2.14.2&quot;</span></span><br><span class="line"><span class="string">  &#125;, </span></span><br><span class="line"><span class="string">  &quot;origin&quot;: &quot;171.36.8.151&quot;, </span></span><br><span class="line"><span class="string">  &quot;url&quot;: &quot;http://httpbin.org/get?name=666&amp;value=888&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再人性化一点</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;666&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span>: <span class="string">&quot;888&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">req = requests.get(url=<span class="string">&quot;http://httpbin.org/get&quot;</span>,params=data)</span><br><span class="line">print(req.text)</span><br><span class="line">print(<span class="built_in">type</span>(req.text))</span><br><span class="line">print(req.json())</span><br><span class="line">print(<span class="built_in">type</span>(req.json()))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">与之前的结果并没有不同，但是回想一下以前用urllib的时候，就会有些感慨。</span></span><br><span class="line"><span class="string">不用你再转换什么byte了呢！也不用urllib.parse()方法了！</span></span><br><span class="line"><span class="string">直接就用！是不是很方便呀！</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;args&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;name&quot;: &quot;666&quot;, </span></span><br><span class="line"><span class="string">    &quot;value&quot;: &quot;888&quot;</span></span><br><span class="line"><span class="string">  &#125;, </span></span><br><span class="line"><span class="string">  &quot;headers&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;Accept&quot;: &quot;*/*&quot;, </span></span><br><span class="line"><span class="string">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, </span></span><br><span class="line"><span class="string">    &quot;Connection&quot;: &quot;close&quot;, </span></span><br><span class="line"><span class="string">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span></span><br><span class="line"><span class="string">    &quot;User-Agent&quot;: &quot;python-requests/2.14.2&quot;</span></span><br><span class="line"><span class="string">  &#125;, </span></span><br><span class="line"><span class="string">  &quot;origin&quot;: &quot;171.36.8.151&quot;, </span></span><br><span class="line"><span class="string">  &quot;url&quot;: &quot;http://httpbin.org/get?name=666&amp;value=888&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">&#123;&#x27;args&#x27;: &#123;&#x27;name&#x27;: &#x27;666&#x27;, &#x27;value&#x27;: &#x27;888&#x27;&#125;, &#x27;headers&#x27;: &#123;&#x27;Accept&#x27;: &#x27;*/*&#x27;, &#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate&#x27;, &#x27;Connection&#x27;: &#x27;close&#x27;, &#x27;Host&#x27;: &#x27;httpbin.org&#x27;, &#x27;User-Agent&#x27;: &#x27;python-requests/2.14.2&#x27;&#125;, &#x27;origin&#x27;: &#x27;171.36.8.151&#x27;, &#x27;url&#x27;: &#x27;http://httpbin.org/get?name=666&amp;value=888&#x27;&#125;</span></span><br><span class="line"><span class="string">&lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"><span class="string">通过观察可知，网页内容返回的是str类型，但却是Json格式的（即：&#123;&quot;XX&quot;:&quot;XXXX&quot;,&#125;的格式），</span></span><br><span class="line"><span class="string">在这里就可以将返回内容直接解析，从而得到一个字典格式，在这里使用json()来解析。</span></span><br><span class="line"><span class="string">如果返回内容格式不是Json格式的（即：&#123;&quot;XX&quot;:&quot;XXXX&quot;,&#125;的格式），用此方法是没用的。</span></span><br><span class="line"><span class="string">json()解析出来的结果，类型是dict,也就是字典。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="数据清洗，抓取内容"><a href="#数据清洗，抓取内容" class="headerlink" title="数据清洗，抓取内容"></a>数据清洗，抓取内容</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">requests 爬虫</span></span><br><span class="line"><span class="string">实现简单的内容抓取</span></span><br><span class="line"><span class="string">这里以get()方法为例，post等其他方法抓取内容时也可以参考</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 添加请求头</span></span><br><span class="line">myheaders1 = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>:<span class="string">&quot;https://lnovel.cc/&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># req = requests.get(&quot;https://www.zhihu.com/explore&quot;,headers=myheaders1)</span></span><br><span class="line"><span class="comment"># pattern = re.compile(&#x27;data-za-element-name=&quot;Title&quot;&gt;(.*?)&lt;/a&gt;&#x27;,re.S)</span></span><br><span class="line"><span class="comment"># titles = re.findall(pattern,req.text)</span></span><br><span class="line"><span class="comment"># print(titles)</span></span><br><span class="line"><span class="comment"># print(&#x27;*&#x27;*50)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">是不是相当的简单呀？</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">myheaders2 = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>:<span class="string">&quot;https://lnovel.cc/&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># req = requests.get(&quot;https://lnovel.cc/&quot;,headers=myheaders2)</span></span><br><span class="line"><span class="comment"># print(req.text)</span></span><br><span class="line"><span class="comment"># print(req.content)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">可以观察到，text都是乱码,content是以b开头的内容，但是好一些，起码能看出来是编码了</span></span><br><span class="line"><span class="string">text： 返回的是Unicode编码的数据</span></span><br><span class="line"><span class="string">content：返回的是bytes类型的数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">由于这个网站它本身UTF-8编码的，当你再用Unicode编码时会肯定出现乱码了</span></span><br><span class="line"><span class="string">怎么解决呢？万码之祖当然是bytes了，只要把它解码成utf-8就行，text在这里就不用它了</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># print(req.content.decode(encoding=&quot;utf-8&quot;))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">然后抓取需要的内容！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">req = requests.get(<span class="string">&quot;https://lnovel.cc/&quot;</span>,headers=myheaders2)</span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;h2 class=&quot;mdl-card__title-text&quot;&gt;(.*?)&lt;/h2&gt;&#x27;</span>,re.S)</span><br><span class="line">titles = re.findall(pattern,req.content.decode(encoding=<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">print(titles)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> titles:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h1 id="采集的内容保存到文本"><a href="#采集的内容保存到文本" class="headerlink" title="采集的内容保存到文本"></a>采集的内容保存到文本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">requests 爬虫</span></span><br><span class="line"><span class="string">实现简单的内容抓取以后，把有用的信息保存下来，此法可用于保存图片、视频、音乐、文本等，这里以图片和文本为例</span></span><br><span class="line"><span class="string">请求方法以get()方法为例，post等其他方法抓取内容时也可以参考</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 下载图片</span></span><br><span class="line"><span class="comment"># import requests</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># req = requests.get(&quot;http://www.zzuliacgn.cf/static/ZA_Show/img/background/QYMX-logo.png&quot;)</span></span><br><span class="line"><span class="comment"># with open(&quot;QYMX-logo.png&quot;,&quot;wb&quot;) as f:</span></span><br><span class="line"><span class="comment">#     f.write(req.content)</span></span><br><span class="line"><span class="comment"># print(&quot;图片下载完成！&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存文本</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">myheaders = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>:<span class="string">&quot;https://lnovel.cc/&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">req = requests.get(<span class="string">&quot;https://lnovel.cc/&quot;</span>,headers=myheaders)</span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;h2 class=&quot;mdl-card__title-text&quot;&gt;(.*?)&lt;/h2&gt;&#x27;</span>,re.S)</span><br><span class="line">titles = re.findall(pattern,req.content.decode(encoding=<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">print(<span class="built_in">str</span>(titles))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;titles.txt&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(titles))</span><br><span class="line">print(<span class="string">&quot;文本保存完成！&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="简单的代码上传示例"><a href="#简单的代码上传示例" class="headerlink" title="简单的代码上传示例"></a>简单的代码上传示例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">requests 爬虫</span></span><br><span class="line"><span class="string">来而不往非礼也，既然有了下载保存，那么肯定也有上传</span></span><br><span class="line"><span class="string">这里不再使用get方法，而是使用post方法！</span></span><br><span class="line"><span class="string">以上传图片到图床https://sm.ms 为例</span></span><br><span class="line"><span class="string">这是图床的API说明文档：https://sm.ms/doc/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">了解一下：post()</span></span><br><span class="line"><span class="string">requests.post(url,data=data,header=header,files=files)</span></span><br><span class="line"><span class="string">- data设置body数据</span></span><br><span class="line"><span class="string">- header设置请求头</span></span><br><span class="line"><span class="string">- files设置上传的文件</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests,re</span><br><span class="line">myheader = &#123;</span><br><span class="line"><span class="string">&#x27;Host&#x27;</span>:<span class="string">&#x27;sm.ms&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">files = &#123;<span class="string">&#x27;smfile&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;1.jpg&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line">req = requests.post(url=<span class="string">&quot;https://sm.ms/api/upload&quot;</span>,files=files)</span><br><span class="line">print(req.json())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">成功以后运行结果如下：</span></span><br><span class="line"><span class="string">&#123;&#x27;code&#x27;: &#x27;success&#x27;, &#x27;data&#x27;: &#123;&#x27;width&#x27;: 150, &#x27;height&#x27;: 155, &#x27;filename&#x27;: &#x27;1.jpg&#x27;, &#x27;storename&#x27;: &#x27;5bc9d5e084d19.jpg&#x27;, &#x27;size&#x27;: 28902, &#x27;path&#x27;: &#x27;/2018/10/19/5bc9d5e084d19.jpg&#x27;, &#x27;hash&#x27;: &#x27;nVgKA5E8tLcofJx&#x27;, &#x27;timestamp&#x27;: 1539954144, &#x27;ip&#x27;: &#x27;171.36.8.151&#x27;, &#x27;url&#x27;: &#x27;https://i.loli.net/2018/10/19/5bc9d5e084d19.jpg&#x27;, &#x27;delete&#x27;: &#x27;https://sm.ms/delete/nVgKA5E8tLcofJx&#x27;&#125;&#125;</span></span><br><span class="line"><span class="string">其他结果均为失败！</span></span><br><span class="line"><span class="string">由于只是测试所以就不要给别人的图床增加那么多负担啦,这是浪费资源，何况这是一个免费的良心图床，</span></span><br><span class="line"><span class="string">不要让贡献者寒心，所以测试完，记得删除！这是礼仪！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">req = requests.post(url=req.json()[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;delete&#x27;</span>])</span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;div class=&quot;bs-callout bs-callout-warning&quot; style=&quot;border-left-width: 2px;&quot;&gt;([\s\S]*?)&lt;/div&gt;&#x27;</span>,re.S)</span><br><span class="line">titles = re.findall(pattern,req.text)</span><br><span class="line">print(titles)</span><br></pre></td></tr></table></figure><h1 id="下载文件的示例"><a href="#下载文件的示例" class="headerlink" title="下载文件的示例"></a>下载文件的示例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 下载其他文件</span></span><br><span class="line"><span class="comment"># with open(&quot;Sublime_Build_203207.dmg&quot;, &quot;wb&quot;) as code:</span></span><br><span class="line"><span class="comment">#     code.write(requests.get(url=&quot;https://download.sublimetext.com/Sublime%20Text%20Build%203207.dmg&quot;).content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载图片文件</span></span><br><span class="line">req = requests.get(url=<span class="string">&quot;https://www.seselah.com/uploads/2a/2a71e0d8fdf1c870596b2be33c27dc18.jpg&quot;</span>)</span><br><span class="line">print(req.content)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;1.jpg&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> code:</span><br><span class="line">    code.write(req.content)</span><br><span class="line">req = requests.get(url=<span class="string">&quot;http://t1.aixinxi.net/o_1d6l2rdi21910gk01o22187c1sqja.jpg&quot;</span>)</span><br><span class="line">print(req.content)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;2.jpg&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> code:</span><br><span class="line">    code.write(req.content)</span><br><span class="line">req = requests.get(url=<span class="string">&quot;http://img.wkcdn.com/image/0/2/2s.jpg&quot;</span>)</span><br><span class="line">print(req.content)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;3.jpg&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> code:</span><br><span class="line">    code.write(req.content)</span><br><span class="line">req = requests.get(url=<span class="string">&quot;http://t1.aixinxi.net/o_1cnu5m83210v1oi41ca4n56r6la.jpg&quot;</span>)</span><br><span class="line">print(req.content)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;4.jpg&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> code:</span><br><span class="line">    code.write(req.content)</span><br><span class="line"></span><br><span class="line">req = requests.get(url=<span class="string">&quot;http://t1.aixinxi.net/o_1d96s8ha36po1o2dumm10me1t8ga.jpg-j.jpg&quot;</span>)</span><br><span class="line">print(req.content)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;5.jpg&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> code:</span><br><span class="line">    code.write(req.content)</span><br></pre></td></tr></table></figure><h1 id="网页编码识别"><a href="#网页编码识别" class="headerlink" title="网页编码识别"></a>网页编码识别</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">url = <span class="string">&#x27;http://www.langzi.fun&#x27;</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">encoding = requests.utils.get_encodings_from_content(r.text)[<span class="number">0</span>]</span><br><span class="line">res = r.content.decode(encoding,<span class="string">&#x27;replace&#x27;</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="comment"># 其实requests里面用的就是chardet</span></span><br><span class="line"><span class="keyword">import</span> chardet</span><br><span class="line">r = requests.get(url=url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取网页编码格式，并修改为request.text的解码类型</span></span><br><span class="line">r.encoding = chardet.detect(r.content)[<span class="string">&#x27;encoding&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> r.encoding == <span class="string">&quot;GB2312&quot;</span>:</span><br><span class="line">    r.encoding = <span class="string">&quot;GBK&quot;</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>requests请求库的基本使用和示例就是这些了。<br>学习python爬虫这些都是基本操作。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> 小技能GET </category>
          
          <category> python </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：CSS中不常见，但是很有用的标签，备忘！</title>
      <link href="article/44638/"/>
      <url>article/44638/</url>
      
        <content type="html"><![CDATA[<p>CSS样式多如猫毛,时间长了不用，就会忘记。回头再用的时候，想不起来了，焦头烂额的翻一阵结果发现自己以前折腾过并总结出更合适的方案..<br>emmm，好记性不如烂笔头啊，写下来记住，也没毛病。回头看看，可以提高回忆效率。<br>就把日常前端开发中，发现一些自己不常用到的样式，总结到一起，备忘。</p><span id="more"></span><h1 id="运行环境-Runtime-environment"><a href="#运行环境-Runtime-environment" class="headerlink" title="运行环境 Runtime environment"></a>运行环境 Runtime environment</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作系统 ： Windows10</span><br><span class="line">IDE: JetBrains WebStorm 2018.2.1 x64</span><br><span class="line">浏览器： Google Chrome 版本 67.0.3396.99（正式版本） （64 位）&amp;&amp; FireFox Developer Edition 版本63.0b4  (64位)</span><br></pre></td></tr></table></figure><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>方便自己回忆的备忘CSS样式备忘录。虽然W3C上都有，但是它就跟字典一样的，难道学中文背字典呐。</p><h1 id="CSS3-text-overflow"><a href="#CSS3-text-overflow" class="headerlink" title="CSS3 text-overflow"></a>CSS3 text-overflow</h1><p>定义和用法：<br>text-overflow 属性规定当文本溢出包含元素时发生的事情。</p><p>语法：<br>text-overflow: clip|ellipsis|string;</p><table><thead><tr><th>clip</th><th>ellipsis</th><th>string</th></tr></thead><tbody><tr><td>修剪文本。</td><td>显示省略符号来代表被修剪的文本。</td><td>使用给定的字符串来代表被修剪的文本。</td></tr></tbody></table><p><a target="_blank" rel="noopener" href="http://www.w3school.com.cn/cssref/pr_text-overflow.asp">详细内容W3C</a><br><a target="_blank" rel="noopener" href="http://www.w3school.com.cn/tiy/t.asp?f=css3_text-overflow_hover">实例</a></p><h1 id="CSS-white-space"><a href="#CSS-white-space" class="headerlink" title="CSS white-space"></a>CSS white-space</h1><p>定义和用法:<br>white-space 属性设置如何处理元素内的空白。</p><p>语法：<br>white-space: nowrap;</p><p>这个属性声明建立布局过程中如何处理元素中的空白符。值 pre-wrap 和 pre-line 是 CSS 2.1 中新增的。</p><p>normal 默认。空白会被浏览器忽略。</p><p>pre 空白会被浏览器保留。其行为方式类似 HTML 中的 pre 标签。</p><p>nowrap 文本不会换行，文本会在在同一行上继续，直到遇到 br 标签为止。</p><p>pre-wrap 保留空白符序列，但是正常地进行换行。</p><p>pre-line 合并空白符序列，但是保留换行符。</p><p>inherit 规定应该从父元素继承 white-space 属性的值。</p><p><a target="_blank" rel="noopener" href="http://www.w3school.com.cn/cssref/pr_text_white-space.asp">详细内容W3C</a><br><a target="_blank" rel="noopener" href="http://www.w3school.com.cn/tiy/t.asp?f=csse_text_white-space">实例</a></p><h1 id="CSS-before"><a href="#CSS-before" class="headerlink" title="CSS :before"></a>CSS :before</h1><p>定义和用法<br>:before 选择器在被选元素的内容前面插入内容。</p><p>请使用 content 属性来指定要插入的内容。</p><p><a target="_blank" rel="noopener" href="http://www.w3school.com.cn/cssref/selector_before.asp">详细内容W3C</a><br><a target="_blank" rel="noopener" href="http://www.w3school.com.cn/tiy/t.asp?f=css_sel_before_style">实例</a></p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端：Hello World</title>
      <link href="article/55915/"/>
      <url>article/55915/</url>
      
        <content type="html"><![CDATA[<p>关于hexo官网自带的部署命令</p><span id="more"></span><p>Welcome to <a target="_blank" rel="noopener" href="https://hexo.io/zh-cn/">Hexo</a>! This is your very first post. Check <a target="_blank" rel="noopener" href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a target="_blank" rel="noopener" href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a target="_blank" rel="noopener" href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> HTML </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
